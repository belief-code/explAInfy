{"mappings":"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EAKF,OAAOb,CACT,EAgByCU,GAEjCA,GACA,AAAiB,UAAjB,OAAOA,GACPA,EAAMI,WAAW,GAAKtE,OAEtBgE,CAAS,CAACC,EAAS,CAAGH,EAAMI,GAE5BF,CAAS,CAACC,EAAS,CAAGC,GAK5B,OAAOF,CACT,CASA,SAASO,EACPR,CAAS,CACTS,CAAY,EAEZ,KAAOT,AAAW,OAAXA,GAAiB,CACtB,IAAMU,EAAO1E,EAAyBgE,EAAQS,GAE9C,GAAIC,EAAM,CACR,GAAIA,EAAKC,GAAG,CACV,OAAO7D,EAAQ4D,EAAKC,GAAG,EAGzB,GAAI,AAAsB,YAAtB,OAAOD,EAAKP,KAAK,CACnB,OAAOrD,EAAQ4D,EAAKP,KAAK,CAE7B,CAEAH,EAASjE,EAAeiE,EAC1B,CAMA,OAJA,WACE,OAAO,IACT,CAGF,CC3MO,IAAMmB,EAAOjF,EAAO,CACzB,IACA,OACA,UACA,UACA,OACA,UACA,QACA,QACA,IACA,MACA,MACA,MACA,QACA,aACA,OACA,KACA,SACA,SACA,UACA,SACA,OACA,OACA,MACA,WACA,UACA,OACA,WACA,KACA,YACA,MACA,UACA,MACA,SACA,MACA,MACA,KACA,KACA,UACA,KACA,WACA,aACA,SACA,OACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,MACA,QACA,MACA,MACA,QACA,SACA,KACA,OACA,MACA,OACA,UACA,OACA,WACA,QACA,MACA,OACA,KACA,WACA,SACA,SACA,IACA,UACA,MACA,WACA,IACA,KACA,KACA,OACA,IACA,OACA,UACA,SACA,SACA,QACA,SACA,SACA,OACA,SACA,SACA,QACA,MACA,UACA,MACA,QACA,QACA,KACA,WACA,WACA,QACA,KACA,QACA,OACA,KACA,QACA,KACA,IACA,KACA,MACA,QACA,MACQ,EAEGkF,EAAMlF,EAAO,CACxB,MACA,IACA,WACA,cACA,eACA,eACA,gBACA,mBACA,SACA,WACA,OACA,OACA,UACA,SACA,OACA,IACA,QACA,WACA,QACA,QACA,OACA,iBACA,SACA,OACA,WACA,QACA,OACA,UACA,UACA,WACA,iBACA,OACA,OACA,QACA,SACA,SACA,OACA,WACA,QACA,OACA,QACA,OACA,QACQ,EAEG4E,EAAa5E,EAAO,CAC/B,UACA,gBACA,sBACA,cACA,mBACA,oBACA,oBACA,iBACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,UACA,UACA,cACA,eACA,WACA,eACA,qBACA,cACA,SACA,eACQ,EAMG6E,EAAgB7E,EAAO,CAClC,UACA,gBACA,SACA,UACA,YACA,mBACA,iBACA,gBACA,gBACA,gBACA,QACA,YACA,OACA,eACA,YACA,UACA,gBACA,SACA,MACA,aACA,UACA,MACQ,EAEGmF,EAASnF,EAAO,CAC3B,OACA,WACA,SACA,UACA,QACA,SACA,KACA,aACA,gBACA,KACA,KACA,QACA,UACA,WACA,QACA,OACA,KACA,SACA,QACA,SACA,OACA,OACA,UACA,SACA,MACA,QACA,MACA,SACA,aACA,cACQ,EAIG+E,EAAmB/E,EAAO,CACrC,UACA,cACA,aACA,WACA,YACA,UACA,UACA,SACA,SACA,QACA,YACA,aACA,iBACA,cACA,OACQ,EAEGgF,EAAOhF,EAAO,CAAC,QAAiB,ECpRhCiF,EAAOjF,EAAO,CACzB,SACA,SACA,QACA,MACA,iBACA,eACA,uBACA,WACA,aACA,UACA,SACA,UACA,cACA,cACA,UACA,OACA,QACA,QACA,QACA,OACA,UACA,WACA,eACA,SACA,cACA,WACA,WACA,UACA,MACA,WACA,0BACA,wBACA,WACA,YACA,UACA,eACA,OACA,MACA,UACA,SACA,SACA,OACA,OACA,WACA,KACA,YACA,YACA,QACA,OACA,QACA,OACA,OACA,UACA,OACA,MACA,MACA,YACA,QACA,SACA,MACA,YACA,WACA,QACA,OACA,QACA,UACA,aACA,SACA,OACA,UACA,UACA,cACA,cACA,UACA,gBACA,sBACA,SACA,UACA,UACA,aACA,WACA,MACA,WACA,MACA,WACA,OACA,OACA,UACA,aACA,QACA,WACA,QACA,OACA,QACA,OACA,UACA,QACA,MACA,SACA,OACA,QACA,UACA,WACA,QACA,YACA,OACA,SACA,SACA,QACA,QACA,OACA,QACA,OACQ,EAEGkF,EAAMlF,EAAO,CACxB,gBACA,aACA,WACA,qBACA,YACA,SACA,gBACA,gBACA,UACA,gBACA,iBACA,QACA,OACA,KACA,QACA,OACA,gBACA,YACA,YACA,QACA,sBACA,8BACA,gBACA,kBACA,KACA,KACA,IACA,KACA,KACA,kBACA,YACA,UACA,UACA,MACA,WACA,YACA,MACA,WACA,OACA,eACA,YACA,SACA,cACA,cACA,gBACA,cACA,YACA,mBACA,eACA,aACA,eACA,cACA,KACA,KACA,KACA,KACA,aACA,WACA,gBACA,oBACA,SACA,OACA,KACA,kBACA,KACA,MACA,YACA,IACA,KACA,KACA,KACA,KACA,UACA,YACA,aACA,WACA,OACA,eACA,iBACA,eACA,mBACA,iBACA,QACA,aACA,aACA,eACA,eACA,cACA,cACA,mBACA,YACA,MACA,OACA,QACA,SACA,OACA,MACA,OACA,aACA,SACA,WACA,UACA,QACA,SACA,cACA,SACA,WACA,cACA,OACA,aACA,sBACA,mBACA,eACA,SACA,gBACA,sBACA,iBACA,IACA,KACA,KACA,SACA,OACA,OACA,cACA,YACA,UACA,SACA,SACA,QACA,OACA,kBACA,QACA,mBACA,mBACA,eACA,cACA,eACA,cACA,aACA,eACA,mBACA,oBACA,iBACA,kBACA,oBACA,iBACA,SACA,eACA,QACA,eACA,iBACA,WACA,cACA,UACA,UACA,YACA,mBACA,cACA,kBACA,iBACA,aACA,OACA,KACA,KACA,UACA,SACA,UACA,aACA,UACA,aACA,gBACA,gBACA,QACA,eACA,OACA,eACA,mBACA,mBACA,IACA,KACA,KACA,QACA,IACA,KACA,KACA,IACA,aACQ,EAEGmF,EAASnF,EAAO,CAC3B,SACA,cACA,QACA,WACA,QACA,eACA,cACA,aACA,aACA,QACA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","sources":["<anon>","src/script.js","node_modules/dompurify/dist/purify.js","node_modules/dompurify/src/utils.ts","node_modules/dompurify/src/tags.ts","node_modules/dompurify/src/attrs.ts","node_modules/dompurify/src/regexp.ts","node_modules/dompurify/src/purify.ts","node_modules/marked/lib/marked.umd.js","node_modules/marked/src/defaults.ts","node_modules/marked/src/rules.ts","node_modules/marked/src/helpers.ts","node_modules/marked/src/Tokenizer.ts","node_modules/marked/src/Lexer.ts","node_modules/marked/src/Renderer.ts","node_modules/marked/src/TextRenderer.ts","node_modules/marked/src/Parser.ts","node_modules/marked/src/Hooks.ts","node_modules/marked/src/Instance.ts","node_modules/marked/src/marked.ts","node_modules/micromodal/dist/micromodal.es.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $d349326c2b62c55f$exports = {};\n/*! @license DOMPurify 3.2.5 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.5/LICENSE */ (function(global, factory) {\n    $d349326c2b62c55f$exports = factory();\n})($d349326c2b62c55f$exports, function() {\n    'use strict';\n    const { entries: entries, setPrototypeOf: setPrototypeOf, isFrozen: isFrozen, getPrototypeOf: getPrototypeOf, getOwnPropertyDescriptor: getOwnPropertyDescriptor } = Object;\n    let { freeze: freeze, seal: seal, create: create } = Object; // eslint-disable-line import/no-mutable-exports\n    let { apply: apply, construct: construct } = typeof Reflect !== 'undefined' && Reflect;\n    if (!freeze) freeze = function freeze(x) {\n        return x;\n    };\n    if (!seal) seal = function seal(x) {\n        return x;\n    };\n    if (!apply) apply = function apply(fun, thisValue, args) {\n        return fun.apply(thisValue, args);\n    };\n    if (!construct) construct = function construct(Func, args) {\n        return new Func(...args);\n    };\n    const arrayForEach = unapply(Array.prototype.forEach);\n    const arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);\n    const arrayPop = unapply(Array.prototype.pop);\n    const arrayPush = unapply(Array.prototype.push);\n    const arraySplice = unapply(Array.prototype.splice);\n    const stringToLowerCase = unapply(String.prototype.toLowerCase);\n    const stringToString = unapply(String.prototype.toString);\n    const stringMatch = unapply(String.prototype.match);\n    const stringReplace = unapply(String.prototype.replace);\n    const stringIndexOf = unapply(String.prototype.indexOf);\n    const stringTrim = unapply(String.prototype.trim);\n    const objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);\n    const regExpTest = unapply(RegExp.prototype.test);\n    const typeErrorCreate = unconstruct(TypeError);\n    /**\n   * Creates a new function that calls the given function with a specified thisArg and arguments.\n   *\n   * @param func - The function to be wrapped and called.\n   * @returns A new function that calls the given function with a specified thisArg and arguments.\n   */ function unapply(func) {\n        return function(thisArg) {\n            if (thisArg instanceof RegExp) thisArg.lastIndex = 0;\n            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];\n            return apply(func, thisArg, args);\n        };\n    }\n    /**\n   * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n   *\n   * @param func - The constructor function to be wrapped and called.\n   * @returns A new function that constructs an instance of the given constructor function with the provided arguments.\n   */ function unconstruct(func) {\n        return function() {\n            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];\n            return construct(func, args);\n        };\n    }\n    /**\n   * Add properties to a lookup table\n   *\n   * @param set - The set to which elements will be added.\n   * @param array - The array containing elements to be added to the set.\n   * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n   * @returns The modified set with added elements.\n   */ function addToSet(set, array) {\n        let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;\n        if (setPrototypeOf) // Make 'in' and truthy checks like Boolean(set.constructor)\n        // independent of any properties defined on Object.prototype.\n        // Prevent prototype setters from intercepting set as a this value.\n        setPrototypeOf(set, null);\n        let l = array.length;\n        while(l--){\n            let element = array[l];\n            if (typeof element === 'string') {\n                const lcElement = transformCaseFunc(element);\n                if (lcElement !== element) {\n                    // Config presets (e.g. tags.js, attrs.js) are immutable.\n                    if (!isFrozen(array)) array[l] = lcElement;\n                    element = lcElement;\n                }\n            }\n            set[element] = true;\n        }\n        return set;\n    }\n    /**\n   * Clean up an array to harden against CSPP\n   *\n   * @param array - The array to be cleaned.\n   * @returns The cleaned version of the array\n   */ function cleanArray(array) {\n        for(let index = 0; index < array.length; index++){\n            const isPropertyExist = objectHasOwnProperty(array, index);\n            if (!isPropertyExist) array[index] = null;\n        }\n        return array;\n    }\n    /**\n   * Shallow clone an object\n   *\n   * @param object - The object to be cloned.\n   * @returns A new object that copies the original.\n   */ function clone(object) {\n        const newObject = create(null);\n        for (const [property, value] of entries(object)){\n            const isPropertyExist = objectHasOwnProperty(object, property);\n            if (isPropertyExist) {\n                if (Array.isArray(value)) newObject[property] = cleanArray(value);\n                else if (value && typeof value === 'object' && value.constructor === Object) newObject[property] = clone(value);\n                else newObject[property] = value;\n            }\n        }\n        return newObject;\n    }\n    /**\n   * This method automatically checks if the prop is function or getter and behaves accordingly.\n   *\n   * @param object - The object to look up the getter function in its prototype chain.\n   * @param prop - The property name for which to find the getter function.\n   * @returns The getter function found in the prototype chain or a fallback function.\n   */ function lookupGetter(object, prop) {\n        while(object !== null){\n            const desc = getOwnPropertyDescriptor(object, prop);\n            if (desc) {\n                if (desc.get) return unapply(desc.get);\n                if (typeof desc.value === 'function') return unapply(desc.value);\n            }\n            object = getPrototypeOf(object);\n        }\n        function fallbackValue() {\n            return null;\n        }\n        return fallbackValue;\n    }\n    const html$1 = freeze([\n        'a',\n        'abbr',\n        'acronym',\n        'address',\n        'area',\n        'article',\n        'aside',\n        'audio',\n        'b',\n        'bdi',\n        'bdo',\n        'big',\n        'blink',\n        'blockquote',\n        'body',\n        'br',\n        'button',\n        'canvas',\n        'caption',\n        'center',\n        'cite',\n        'code',\n        'col',\n        'colgroup',\n        'content',\n        'data',\n        'datalist',\n        'dd',\n        'decorator',\n        'del',\n        'details',\n        'dfn',\n        'dialog',\n        'dir',\n        'div',\n        'dl',\n        'dt',\n        'element',\n        'em',\n        'fieldset',\n        'figcaption',\n        'figure',\n        'font',\n        'footer',\n        'form',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'head',\n        'header',\n        'hgroup',\n        'hr',\n        'html',\n        'i',\n        'img',\n        'input',\n        'ins',\n        'kbd',\n        'label',\n        'legend',\n        'li',\n        'main',\n        'map',\n        'mark',\n        'marquee',\n        'menu',\n        'menuitem',\n        'meter',\n        'nav',\n        'nobr',\n        'ol',\n        'optgroup',\n        'option',\n        'output',\n        'p',\n        'picture',\n        'pre',\n        'progress',\n        'q',\n        'rp',\n        'rt',\n        'ruby',\n        's',\n        'samp',\n        'section',\n        'select',\n        'shadow',\n        'small',\n        'source',\n        'spacer',\n        'span',\n        'strike',\n        'strong',\n        'style',\n        'sub',\n        'summary',\n        'sup',\n        'table',\n        'tbody',\n        'td',\n        'template',\n        'textarea',\n        'tfoot',\n        'th',\n        'thead',\n        'time',\n        'tr',\n        'track',\n        'tt',\n        'u',\n        'ul',\n        'var',\n        'video',\n        'wbr'\n    ]);\n    const svg$1 = freeze([\n        'svg',\n        'a',\n        'altglyph',\n        'altglyphdef',\n        'altglyphitem',\n        'animatecolor',\n        'animatemotion',\n        'animatetransform',\n        'circle',\n        'clippath',\n        'defs',\n        'desc',\n        'ellipse',\n        'filter',\n        'font',\n        'g',\n        'glyph',\n        'glyphref',\n        'hkern',\n        'image',\n        'line',\n        'lineargradient',\n        'marker',\n        'mask',\n        'metadata',\n        'mpath',\n        'path',\n        'pattern',\n        'polygon',\n        'polyline',\n        'radialgradient',\n        'rect',\n        'stop',\n        'style',\n        'switch',\n        'symbol',\n        'text',\n        'textpath',\n        'title',\n        'tref',\n        'tspan',\n        'view',\n        'vkern'\n    ]);\n    const svgFilters = freeze([\n        'feBlend',\n        'feColorMatrix',\n        'feComponentTransfer',\n        'feComposite',\n        'feConvolveMatrix',\n        'feDiffuseLighting',\n        'feDisplacementMap',\n        'feDistantLight',\n        'feDropShadow',\n        'feFlood',\n        'feFuncA',\n        'feFuncB',\n        'feFuncG',\n        'feFuncR',\n        'feGaussianBlur',\n        'feImage',\n        'feMerge',\n        'feMergeNode',\n        'feMorphology',\n        'feOffset',\n        'fePointLight',\n        'feSpecularLighting',\n        'feSpotLight',\n        'feTile',\n        'feTurbulence'\n    ]);\n    // List of SVG elements that are disallowed by default.\n    // We still need to know them so that we can do namespace\n    // checks properly in case one wants to add them to\n    // allow-list.\n    const svgDisallowed = freeze([\n        'animate',\n        'color-profile',\n        'cursor',\n        'discard',\n        'font-face',\n        'font-face-format',\n        'font-face-name',\n        'font-face-src',\n        'font-face-uri',\n        'foreignobject',\n        'hatch',\n        'hatchpath',\n        'mesh',\n        'meshgradient',\n        'meshpatch',\n        'meshrow',\n        'missing-glyph',\n        'script',\n        'set',\n        'solidcolor',\n        'unknown',\n        'use'\n    ]);\n    const mathMl$1 = freeze([\n        'math',\n        'menclose',\n        'merror',\n        'mfenced',\n        'mfrac',\n        'mglyph',\n        'mi',\n        'mlabeledtr',\n        'mmultiscripts',\n        'mn',\n        'mo',\n        'mover',\n        'mpadded',\n        'mphantom',\n        'mroot',\n        'mrow',\n        'ms',\n        'mspace',\n        'msqrt',\n        'mstyle',\n        'msub',\n        'msup',\n        'msubsup',\n        'mtable',\n        'mtd',\n        'mtext',\n        'mtr',\n        'munder',\n        'munderover',\n        'mprescripts'\n    ]);\n    // Similarly to SVG, we want to know all MathML elements,\n    // even those that we disallow by default.\n    const mathMlDisallowed = freeze([\n        'maction',\n        'maligngroup',\n        'malignmark',\n        'mlongdiv',\n        'mscarries',\n        'mscarry',\n        'msgroup',\n        'mstack',\n        'msline',\n        'msrow',\n        'semantics',\n        'annotation',\n        'annotation-xml',\n        'mprescripts',\n        'none'\n    ]);\n    const text = freeze([\n        '#text'\n    ]);\n    const html = freeze([\n        'accept',\n        'action',\n        'align',\n        'alt',\n        'autocapitalize',\n        'autocomplete',\n        'autopictureinpicture',\n        'autoplay',\n        'background',\n        'bgcolor',\n        'border',\n        'capture',\n        'cellpadding',\n        'cellspacing',\n        'checked',\n        'cite',\n        'class',\n        'clear',\n        'color',\n        'cols',\n        'colspan',\n        'controls',\n        'controlslist',\n        'coords',\n        'crossorigin',\n        'datetime',\n        'decoding',\n        'default',\n        'dir',\n        'disabled',\n        'disablepictureinpicture',\n        'disableremoteplayback',\n        'download',\n        'draggable',\n        'enctype',\n        'enterkeyhint',\n        'face',\n        'for',\n        'headers',\n        'height',\n        'hidden',\n        'high',\n        'href',\n        'hreflang',\n        'id',\n        'inputmode',\n        'integrity',\n        'ismap',\n        'kind',\n        'label',\n        'lang',\n        'list',\n        'loading',\n        'loop',\n        'low',\n        'max',\n        'maxlength',\n        'media',\n        'method',\n        'min',\n        'minlength',\n        'multiple',\n        'muted',\n        'name',\n        'nonce',\n        'noshade',\n        'novalidate',\n        'nowrap',\n        'open',\n        'optimum',\n        'pattern',\n        'placeholder',\n        'playsinline',\n        'popover',\n        'popovertarget',\n        'popovertargetaction',\n        'poster',\n        'preload',\n        'pubdate',\n        'radiogroup',\n        'readonly',\n        'rel',\n        'required',\n        'rev',\n        'reversed',\n        'role',\n        'rows',\n        'rowspan',\n        'spellcheck',\n        'scope',\n        'selected',\n        'shape',\n        'size',\n        'sizes',\n        'span',\n        'srclang',\n        'start',\n        'src',\n        'srcset',\n        'step',\n        'style',\n        'summary',\n        'tabindex',\n        'title',\n        'translate',\n        'type',\n        'usemap',\n        'valign',\n        'value',\n        'width',\n        'wrap',\n        'xmlns',\n        'slot'\n    ]);\n    const svg = freeze([\n        'accent-height',\n        'accumulate',\n        'additive',\n        'alignment-baseline',\n        'amplitude',\n        'ascent',\n        'attributename',\n        'attributetype',\n        'azimuth',\n        'basefrequency',\n        'baseline-shift',\n        'begin',\n        'bias',\n        'by',\n        'class',\n        'clip',\n        'clippathunits',\n        'clip-path',\n        'clip-rule',\n        'color',\n        'color-interpolation',\n        'color-interpolation-filters',\n        'color-profile',\n        'color-rendering',\n        'cx',\n        'cy',\n        'd',\n        'dx',\n        'dy',\n        'diffuseconstant',\n        'direction',\n        'display',\n        'divisor',\n        'dur',\n        'edgemode',\n        'elevation',\n        'end',\n        'exponent',\n        'fill',\n        'fill-opacity',\n        'fill-rule',\n        'filter',\n        'filterunits',\n        'flood-color',\n        'flood-opacity',\n        'font-family',\n        'font-size',\n        'font-size-adjust',\n        'font-stretch',\n        'font-style',\n        'font-variant',\n        'font-weight',\n        'fx',\n        'fy',\n        'g1',\n        'g2',\n        'glyph-name',\n        'glyphref',\n        'gradientunits',\n        'gradienttransform',\n        'height',\n        'href',\n        'id',\n        'image-rendering',\n        'in',\n        'in2',\n        'intercept',\n        'k',\n        'k1',\n        'k2',\n        'k3',\n        'k4',\n        'kerning',\n        'keypoints',\n        'keysplines',\n        'keytimes',\n        'lang',\n        'lengthadjust',\n        'letter-spacing',\n        'kernelmatrix',\n        'kernelunitlength',\n        'lighting-color',\n        'local',\n        'marker-end',\n        'marker-mid',\n        'marker-start',\n        'markerheight',\n        'markerunits',\n        'markerwidth',\n        'maskcontentunits',\n        'maskunits',\n        'max',\n        'mask',\n        'media',\n        'method',\n        'mode',\n        'min',\n        'name',\n        'numoctaves',\n        'offset',\n        'operator',\n        'opacity',\n        'order',\n        'orient',\n        'orientation',\n        'origin',\n        'overflow',\n        'paint-order',\n        'path',\n        'pathlength',\n        'patterncontentunits',\n        'patterntransform',\n        'patternunits',\n        'points',\n        'preservealpha',\n        'preserveaspectratio',\n        'primitiveunits',\n        'r',\n        'rx',\n        'ry',\n        'radius',\n        'refx',\n        'refy',\n        'repeatcount',\n        'repeatdur',\n        'restart',\n        'result',\n        'rotate',\n        'scale',\n        'seed',\n        'shape-rendering',\n        'slope',\n        'specularconstant',\n        'specularexponent',\n        'spreadmethod',\n        'startoffset',\n        'stddeviation',\n        'stitchtiles',\n        'stop-color',\n        'stop-opacity',\n        'stroke-dasharray',\n        'stroke-dashoffset',\n        'stroke-linecap',\n        'stroke-linejoin',\n        'stroke-miterlimit',\n        'stroke-opacity',\n        'stroke',\n        'stroke-width',\n        'style',\n        'surfacescale',\n        'systemlanguage',\n        'tabindex',\n        'tablevalues',\n        'targetx',\n        'targety',\n        'transform',\n        'transform-origin',\n        'text-anchor',\n        'text-decoration',\n        'text-rendering',\n        'textlength',\n        'type',\n        'u1',\n        'u2',\n        'unicode',\n        'values',\n        'viewbox',\n        'visibility',\n        'version',\n        'vert-adv-y',\n        'vert-origin-x',\n        'vert-origin-y',\n        'width',\n        'word-spacing',\n        'wrap',\n        'writing-mode',\n        'xchannelselector',\n        'ychannelselector',\n        'x',\n        'x1',\n        'x2',\n        'xmlns',\n        'y',\n        'y1',\n        'y2',\n        'z',\n        'zoomandpan'\n    ]);\n    const mathMl = freeze([\n        'accent',\n        'accentunder',\n        'align',\n        'bevelled',\n        'close',\n        'columnsalign',\n        'columnlines',\n        'columnspan',\n        'denomalign',\n        'depth',\n        'dir',\n        'display',\n        'displaystyle',\n        'encoding',\n        'fence',\n        'frame',\n        'height',\n        'href',\n        'id',\n        'largeop',\n        'length',\n        'linethickness',\n        'lspace',\n        'lquote',\n        'mathbackground',\n        'mathcolor',\n        'mathsize',\n        'mathvariant',\n        'maxsize',\n        'minsize',\n        'movablelimits',\n        'notation',\n        'numalign',\n        'open',\n        'rowalign',\n        'rowlines',\n        'rowspacing',\n        'rowspan',\n        'rspace',\n        'rquote',\n        'scriptlevel',\n        'scriptminsize',\n        'scriptsizemultiplier',\n        'selection',\n        'separator',\n        'separators',\n        'stretchy',\n        'subscriptshift',\n        'supscriptshift',\n        'symmetric',\n        'voffset',\n        'width',\n        'xmlns'\n    ]);\n    const xml = freeze([\n        'xlink:href',\n        'xml:id',\n        'xlink:title',\n        'xml:space',\n        'xmlns:xlink'\n    ]);\n    // eslint-disable-next-line unicorn/better-regex\n    const MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n    const ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\n    const TMPLIT_EXPR = seal(/\\$\\{[\\w\\W]*/gm); // eslint-disable-line unicorn/better-regex\n    const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]+$/); // eslint-disable-line no-useless-escape\n    const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n    const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n    );\n    const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\n    const ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n    );\n    const DOCTYPE_NAME = seal(/^html$/i);\n    const CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n    var EXPRESSIONS = /*#__PURE__*/ Object.freeze({\n        __proto__: null,\n        ARIA_ATTR: ARIA_ATTR,\n        ATTR_WHITESPACE: ATTR_WHITESPACE,\n        CUSTOM_ELEMENT: CUSTOM_ELEMENT,\n        DATA_ATTR: DATA_ATTR,\n        DOCTYPE_NAME: DOCTYPE_NAME,\n        ERB_EXPR: ERB_EXPR,\n        IS_ALLOWED_URI: IS_ALLOWED_URI,\n        IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,\n        MUSTACHE_EXPR: MUSTACHE_EXPR,\n        TMPLIT_EXPR: TMPLIT_EXPR\n    });\n    /* eslint-disable @typescript-eslint/indent */ // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\n    const NODE_TYPE = {\n        element: 1,\n        attribute: 2,\n        text: 3,\n        cdataSection: 4,\n        entityReference: 5,\n        // Deprecated\n        entityNode: 6,\n        // Deprecated\n        progressingInstruction: 7,\n        comment: 8,\n        document: 9,\n        documentType: 10,\n        documentFragment: 11,\n        notation: 12 // Deprecated\n    };\n    const getGlobal = function getGlobal() {\n        return typeof window === 'undefined' ? null : window;\n    };\n    /**\n   * Creates a no-op policy for internal use only.\n   * Don't export this function outside this module!\n   * @param trustedTypes The policy factory.\n   * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n   * @return The policy created (or null, if Trusted Types\n   * are not supported or creating the policy failed).\n   */ const _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {\n        if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') return null;\n        // Allow the callers to control the unique policy name\n        // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n        // Policy creation with duplicate names throws in Trusted Types.\n        let suffix = null;\n        const ATTR_NAME = 'data-tt-policy-suffix';\n        if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) suffix = purifyHostElement.getAttribute(ATTR_NAME);\n        const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n        try {\n            return trustedTypes.createPolicy(policyName, {\n                createHTML (html) {\n                    return html;\n                },\n                createScriptURL (scriptUrl) {\n                    return scriptUrl;\n                }\n            });\n        } catch (_) {\n            // Policy creation failed (most likely another DOMPurify script has\n            // already run). Skip creating the policy, as this will only cause errors\n            // if TT are enforced.\n            console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n            return null;\n        }\n    };\n    const _createHooksMap = function _createHooksMap() {\n        return {\n            afterSanitizeAttributes: [],\n            afterSanitizeElements: [],\n            afterSanitizeShadowDOM: [],\n            beforeSanitizeAttributes: [],\n            beforeSanitizeElements: [],\n            beforeSanitizeShadowDOM: [],\n            uponSanitizeAttribute: [],\n            uponSanitizeElement: [],\n            uponSanitizeShadowNode: []\n        };\n    };\n    function createDOMPurify() {\n        let window1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n        const DOMPurify = (root)=>createDOMPurify(root);\n        DOMPurify.version = '3.2.5';\n        DOMPurify.removed = [];\n        if (!window1 || !window1.document || window1.document.nodeType !== NODE_TYPE.document || !window1.Element) {\n            // Not running in a browser, provide a factory function\n            // so that you can pass your own Window\n            DOMPurify.isSupported = false;\n            return DOMPurify;\n        }\n        let { document: document } = window1;\n        const originalDocument = document;\n        const currentScript = originalDocument.currentScript;\n        const { DocumentFragment: DocumentFragment, HTMLTemplateElement: HTMLTemplateElement, Node: Node, Element: Element, NodeFilter: NodeFilter, NamedNodeMap: NamedNodeMap = window1.NamedNodeMap || window1.MozNamedAttrMap, HTMLFormElement: HTMLFormElement, DOMParser: DOMParser, trustedTypes: trustedTypes } = window1;\n        const ElementPrototype = Element.prototype;\n        const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n        const remove = lookupGetter(ElementPrototype, 'remove');\n        const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n        const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n        const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n        // As per issue #47, the web-components registry is inherited by a\n        // new document created via createHTMLDocument. As per the spec\n        // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n        // a new empty registry is used when creating a template contents owner\n        // document, so we use that as our parent document to ensure nothing\n        // is inherited.\n        if (typeof HTMLTemplateElement === 'function') {\n            const template = document.createElement('template');\n            if (template.content && template.content.ownerDocument) document = template.content.ownerDocument;\n        }\n        let trustedTypesPolicy;\n        let emptyHTML = '';\n        const { implementation: implementation, createNodeIterator: createNodeIterator, createDocumentFragment: createDocumentFragment, getElementsByTagName: getElementsByTagName } = document;\n        const { importNode: importNode } = originalDocument;\n        let hooks = _createHooksMap();\n        /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */ DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;\n        const { MUSTACHE_EXPR: MUSTACHE_EXPR, ERB_EXPR: ERB_EXPR, TMPLIT_EXPR: TMPLIT_EXPR, DATA_ATTR: DATA_ATTR, ARIA_ATTR: ARIA_ATTR, IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA, ATTR_WHITESPACE: ATTR_WHITESPACE, CUSTOM_ELEMENT: CUSTOM_ELEMENT } = EXPRESSIONS;\n        let { IS_ALLOWED_URI: IS_ALLOWED_URI$1 } = EXPRESSIONS;\n        /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */ /* allowed element names */ let ALLOWED_TAGS = null;\n        const DEFAULT_ALLOWED_TAGS = addToSet({}, [\n            ...html$1,\n            ...svg$1,\n            ...svgFilters,\n            ...mathMl$1,\n            ...text\n        ]);\n        /* Allowed attribute names */ let ALLOWED_ATTR = null;\n        const DEFAULT_ALLOWED_ATTR = addToSet({}, [\n            ...html,\n            ...svg,\n            ...mathMl,\n            ...xml\n        ]);\n        /*\n     * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.\n     * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n     * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n     * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n     */ let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {\n            tagNameCheck: {\n                writable: true,\n                configurable: false,\n                enumerable: true,\n                value: null\n            },\n            attributeNameCheck: {\n                writable: true,\n                configurable: false,\n                enumerable: true,\n                value: null\n            },\n            allowCustomizedBuiltInElements: {\n                writable: true,\n                configurable: false,\n                enumerable: true,\n                value: false\n            }\n        }));\n        /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */ let FORBID_TAGS = null;\n        /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */ let FORBID_ATTR = null;\n        /* Decide if ARIA attributes are okay */ let ALLOW_ARIA_ATTR = true;\n        /* Decide if custom data attributes are okay */ let ALLOW_DATA_ATTR = true;\n        /* Decide if unknown protocols are okay */ let ALLOW_UNKNOWN_PROTOCOLS = false;\n        /* Decide if self-closing tags in attributes are allowed.\n     * Usually removed due to a mXSS issue in jQuery 3.0 */ let ALLOW_SELF_CLOSE_IN_ATTR = true;\n        /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */ let SAFE_FOR_TEMPLATES = false;\n        /* Output should be safe even for XML used within HTML and alike.\n     * This means, DOMPurify removes comments when containing risky content.\n     */ let SAFE_FOR_XML = true;\n        /* Decide if document with <html>... should be returned */ let WHOLE_DOCUMENT = false;\n        /* Track whether config is already set on this instance of DOMPurify. */ let SET_CONFIG = false;\n        /* Decide if all elements (e.g. style, script) must be children of\n     * document.body. By default, browsers might move them to document.head */ let FORCE_BODY = false;\n        /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n     * string (or a TrustedHTML object if Trusted Types are supported).\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */ let RETURN_DOM = false;\n        /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n     * string  (or a TrustedHTML object if Trusted Types are supported) */ let RETURN_DOM_FRAGMENT = false;\n        /* Try to return a Trusted Type object instead of a string, return a string in\n     * case Trusted Types are not supported  */ let RETURN_TRUSTED_TYPE = false;\n        /* Output should be free from DOM clobbering attacks?\n     * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n     */ let SANITIZE_DOM = true;\n        /* Achieve full DOM Clobbering protection by isolating the namespace of named\n     * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n     *\n     * HTML/DOM spec rules that enable DOM Clobbering:\n     *   - Named Access on Window (§7.3.3)\n     *   - DOM Tree Accessors (§3.1.5)\n     *   - Form Element Parent-Child Relations (§4.10.3)\n     *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n     *   - HTMLCollection (§4.2.10.2)\n     *\n     * Namespace isolation is implemented by prefixing `id` and `name` attributes\n     * with a constant string, i.e., `user-content-`\n     */ let SANITIZE_NAMED_PROPS = false;\n        const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n        /* Keep element content when removing element? */ let KEEP_CONTENT = true;\n        /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n     * of importing it into a new Document and returning a sanitized copy */ let IN_PLACE = false;\n        /* Allow usage of profiles like html, svg and mathMl */ let USE_PROFILES = {};\n        /* Tags to ignore content of when KEEP_CONTENT is true */ let FORBID_CONTENTS = null;\n        const DEFAULT_FORBID_CONTENTS = addToSet({}, [\n            'annotation-xml',\n            'audio',\n            'colgroup',\n            'desc',\n            'foreignobject',\n            'head',\n            'iframe',\n            'math',\n            'mi',\n            'mn',\n            'mo',\n            'ms',\n            'mtext',\n            'noembed',\n            'noframes',\n            'noscript',\n            'plaintext',\n            'script',\n            'style',\n            'svg',\n            'template',\n            'thead',\n            'title',\n            'video',\n            'xmp'\n        ]);\n        /* Tags that are safe for data: URIs */ let DATA_URI_TAGS = null;\n        const DEFAULT_DATA_URI_TAGS = addToSet({}, [\n            'audio',\n            'video',\n            'img',\n            'source',\n            'image',\n            'track'\n        ]);\n        /* Attributes safe for values like \"javascript:\" */ let URI_SAFE_ATTRIBUTES = null;\n        const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, [\n            'alt',\n            'class',\n            'for',\n            'id',\n            'label',\n            'name',\n            'pattern',\n            'placeholder',\n            'role',\n            'summary',\n            'title',\n            'value',\n            'style',\n            'xmlns'\n        ]);\n        const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n        const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n        const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n        /* Document namespace */ let NAMESPACE = HTML_NAMESPACE;\n        let IS_EMPTY_INPUT = false;\n        /* Allowed XHTML+XML namespaces */ let ALLOWED_NAMESPACES = null;\n        const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [\n            MATHML_NAMESPACE,\n            SVG_NAMESPACE,\n            HTML_NAMESPACE\n        ], stringToString);\n        let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, [\n            'mi',\n            'mo',\n            'mn',\n            'ms',\n            'mtext'\n        ]);\n        let HTML_INTEGRATION_POINTS = addToSet({}, [\n            'annotation-xml'\n        ]);\n        // Certain elements are allowed in both SVG and HTML\n        // namespace. We need to specify them explicitly\n        // so that they don't get erroneously deleted from\n        // HTML namespace.\n        const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, [\n            'title',\n            'style',\n            'font',\n            'a',\n            'script'\n        ]);\n        /* Parsing of strict XHTML documents */ let PARSER_MEDIA_TYPE = null;\n        const SUPPORTED_PARSER_MEDIA_TYPES = [\n            'application/xhtml+xml',\n            'text/html'\n        ];\n        const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n        let transformCaseFunc = null;\n        /* Keep a reference to config to pass to hooks */ let CONFIG = null;\n        /* Ideally, do not touch anything below this line */ /* ______________________________________________ */ const formElement = document.createElement('form');\n        const isRegexOrFunction = function isRegexOrFunction(testValue) {\n            return testValue instanceof RegExp || testValue instanceof Function;\n        };\n        /**\n     * _parseConfig\n     *\n     * @param cfg optional config literal\n     */ // eslint-disable-next-line complexity\n        const _parseConfig = function _parseConfig() {\n            let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            if (CONFIG && CONFIG === cfg) return;\n            /* Shield configuration object from tampering */ if (!cfg || typeof cfg !== 'object') cfg = {};\n            /* Shield configuration object from prototype pollution */ cfg = clone(cfg);\n            PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes\n            SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;\n            // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n            transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n            /* Set configuration parameters */ ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS') ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n            ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR') ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n            ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES') ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n            URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR') ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;\n            DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS') ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;\n            FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS') ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n            FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS') ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n            FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR') ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n            USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES') ? cfg.USE_PROFILES : false;\n            ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n            ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n            ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n            ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n            SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n            SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true\n            WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n            RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n            RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n            RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n            FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n            SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n            SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n            KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n            IN_PLACE = cfg.IN_PLACE || false; // Default false\n            IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n            NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n            MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;\n            HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;\n            CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n            if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n            if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n            if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n            if (SAFE_FOR_TEMPLATES) ALLOW_DATA_ATTR = false;\n            if (RETURN_DOM_FRAGMENT) RETURN_DOM = true;\n            /* Parse profile info */ if (USE_PROFILES) {\n                ALLOWED_TAGS = addToSet({}, text);\n                ALLOWED_ATTR = [];\n                if (USE_PROFILES.html === true) {\n                    addToSet(ALLOWED_TAGS, html$1);\n                    addToSet(ALLOWED_ATTR, html);\n                }\n                if (USE_PROFILES.svg === true) {\n                    addToSet(ALLOWED_TAGS, svg$1);\n                    addToSet(ALLOWED_ATTR, svg);\n                    addToSet(ALLOWED_ATTR, xml);\n                }\n                if (USE_PROFILES.svgFilters === true) {\n                    addToSet(ALLOWED_TAGS, svgFilters);\n                    addToSet(ALLOWED_ATTR, svg);\n                    addToSet(ALLOWED_ATTR, xml);\n                }\n                if (USE_PROFILES.mathMl === true) {\n                    addToSet(ALLOWED_TAGS, mathMl$1);\n                    addToSet(ALLOWED_ATTR, mathMl);\n                    addToSet(ALLOWED_ATTR, xml);\n                }\n            }\n            /* Merge configuration parameters */ if (cfg.ADD_TAGS) {\n                if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) ALLOWED_TAGS = clone(ALLOWED_TAGS);\n                addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n            }\n            if (cfg.ADD_ATTR) {\n                if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) ALLOWED_ATTR = clone(ALLOWED_ATTR);\n                addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n            }\n            if (cfg.ADD_URI_SAFE_ATTR) addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n            if (cfg.FORBID_CONTENTS) {\n                if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) FORBID_CONTENTS = clone(FORBID_CONTENTS);\n                addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n            }\n            /* Add #text in case KEEP_CONTENT is set to true */ if (KEEP_CONTENT) ALLOWED_TAGS['#text'] = true;\n            /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */ if (WHOLE_DOCUMENT) addToSet(ALLOWED_TAGS, [\n                'html',\n                'head',\n                'body'\n            ]);\n            /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */ if (ALLOWED_TAGS.table) {\n                addToSet(ALLOWED_TAGS, [\n                    'tbody'\n                ]);\n                delete FORBID_TAGS.tbody;\n            }\n            if (cfg.TRUSTED_TYPES_POLICY) {\n                if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.');\n                if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.');\n                // Overwrite existing TrustedTypes policy.\n                trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;\n                // Sign local variables required by `sanitize`.\n                emptyHTML = trustedTypesPolicy.createHTML('');\n            } else {\n                // Uninitialized policy, attempt to initialize the internal dompurify policy.\n                if (trustedTypesPolicy === undefined) trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);\n                // If creating the internal policy succeeded sign internal variables.\n                if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') emptyHTML = trustedTypesPolicy.createHTML('');\n            }\n            // Prevent further manipulation of configuration.\n            // Not available in IE8, Safari 5, etc.\n            if (freeze) freeze(cfg);\n            CONFIG = cfg;\n        };\n        /* Keep track of all possible SVG and MathML tags\n     * so that we can perform the namespace checks\n     * correctly. */ const ALL_SVG_TAGS = addToSet({}, [\n            ...svg$1,\n            ...svgFilters,\n            ...svgDisallowed\n        ]);\n        const ALL_MATHML_TAGS = addToSet({}, [\n            ...mathMl$1,\n            ...mathMlDisallowed\n        ]);\n        /**\n     * @param element a DOM element whose namespace is being checked\n     * @returns Return false if the element has a\n     *  namespace that a spec-compliant parser would never\n     *  return. Return true otherwise.\n     */ const _checkValidNamespace = function _checkValidNamespace(element) {\n            let parent = getParentNode(element);\n            // In JSDOM, if we're inside shadow DOM, then parentNode\n            // can be null. We just simulate parent in this case.\n            if (!parent || !parent.tagName) parent = {\n                namespaceURI: NAMESPACE,\n                tagName: 'template'\n            };\n            const tagName = stringToLowerCase(element.tagName);\n            const parentTagName = stringToLowerCase(parent.tagName);\n            if (!ALLOWED_NAMESPACES[element.namespaceURI]) return false;\n            if (element.namespaceURI === SVG_NAMESPACE) {\n                // The only way to switch from HTML namespace to SVG\n                // is via <svg>. If it happens via any other tag, then\n                // it should be killed.\n                if (parent.namespaceURI === HTML_NAMESPACE) return tagName === 'svg';\n                // The only way to switch from MathML to SVG is via`\n                // svg if parent is either <annotation-xml> or MathML\n                // text integration points.\n                if (parent.namespaceURI === MATHML_NAMESPACE) return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n                // We only allow elements that are defined in SVG\n                // spec. All others are disallowed in SVG namespace.\n                return Boolean(ALL_SVG_TAGS[tagName]);\n            }\n            if (element.namespaceURI === MATHML_NAMESPACE) {\n                // The only way to switch from HTML namespace to MathML\n                // is via <math>. If it happens via any other tag, then\n                // it should be killed.\n                if (parent.namespaceURI === HTML_NAMESPACE) return tagName === 'math';\n                // The only way to switch from SVG to MathML is via\n                // <math> and HTML integration points\n                if (parent.namespaceURI === SVG_NAMESPACE) return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n                // We only allow elements that are defined in MathML\n                // spec. All others are disallowed in MathML namespace.\n                return Boolean(ALL_MATHML_TAGS[tagName]);\n            }\n            if (element.namespaceURI === HTML_NAMESPACE) {\n                // The only way to switch from SVG to HTML is via\n                // HTML integration points, and from MathML to HTML\n                // is via MathML text integration points\n                if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) return false;\n                if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) return false;\n                // We disallow tags that are specific for MathML\n                // or SVG and should never appear in HTML namespace\n                return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n            }\n            // For XHTML and XML documents that support custom namespaces\n            if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) return true;\n            // The code should never reach this place (this means\n            // that the element somehow got namespace that is not\n            // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n            // Return false just in case.\n            return false;\n        };\n        /**\n     * _forceRemove\n     *\n     * @param node a DOM node\n     */ const _forceRemove = function _forceRemove(node) {\n            arrayPush(DOMPurify.removed, {\n                element: node\n            });\n            try {\n                // eslint-disable-next-line unicorn/prefer-dom-node-remove\n                getParentNode(node).removeChild(node);\n            } catch (_) {\n                remove(node);\n            }\n        };\n        /**\n     * _removeAttribute\n     *\n     * @param name an Attribute name\n     * @param element a DOM node\n     */ const _removeAttribute = function _removeAttribute(name, element) {\n            try {\n                arrayPush(DOMPurify.removed, {\n                    attribute: element.getAttributeNode(name),\n                    from: element\n                });\n            } catch (_) {\n                arrayPush(DOMPurify.removed, {\n                    attribute: null,\n                    from: element\n                });\n            }\n            element.removeAttribute(name);\n            // We void attribute values for unremovable \"is\" attributes\n            if (name === 'is') {\n                if (RETURN_DOM || RETURN_DOM_FRAGMENT) try {\n                    _forceRemove(element);\n                } catch (_) {}\n                else try {\n                    element.setAttribute(name, '');\n                } catch (_) {}\n            }\n        };\n        /**\n     * _initDocument\n     *\n     * @param dirty - a string of dirty markup\n     * @return a DOM, filled with the dirty markup\n     */ const _initDocument = function _initDocument(dirty) {\n            /* Create a HTML document */ let doc = null;\n            let leadingWhitespace = null;\n            if (FORCE_BODY) dirty = '<remove></remove>' + dirty;\n            else {\n                /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */ const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n                leadingWhitespace = matches && matches[0];\n            }\n            if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n            dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n            const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n            /*\n       * Use the DOMParser API by default, fallback later if needs be\n       * DOMParser not work for svg when has multiple root element.\n       */ if (NAMESPACE === HTML_NAMESPACE) try {\n                doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n            } catch (_) {}\n            /* Use createHTMLDocument in case DOMParser is not available */ if (!doc || !doc.documentElement) {\n                doc = implementation.createDocument(NAMESPACE, 'template', null);\n                try {\n                    doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n                } catch (_) {\n                // Syntax error if dirtyPayload is invalid xml\n                }\n            }\n            const body = doc.body || doc.documentElement;\n            if (dirty && leadingWhitespace) body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n            /* Work on whole document or just its body */ if (NAMESPACE === HTML_NAMESPACE) return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n            return WHOLE_DOCUMENT ? doc.documentElement : body;\n        };\n        /**\n     * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n     *\n     * @param root The root element or node to start traversing on.\n     * @return The created NodeIterator\n     */ const _createNodeIterator = function _createNodeIterator(root) {\n            return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise\n            NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null);\n        };\n        /**\n     * _isClobbered\n     *\n     * @param element element to check for clobbering attacks\n     * @return true if clobbered, false if safe\n     */ const _isClobbered = function _isClobbered(element) {\n            return element instanceof HTMLFormElement && (typeof element.nodeName !== 'string' || typeof element.textContent !== 'string' || typeof element.removeChild !== 'function' || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== 'function' || typeof element.setAttribute !== 'function' || typeof element.namespaceURI !== 'string' || typeof element.insertBefore !== 'function' || typeof element.hasChildNodes !== 'function');\n        };\n        /**\n     * Checks whether the given object is a DOM node.\n     *\n     * @param value object to check whether it's a DOM node\n     * @return true is object is a DOM node\n     */ const _isNode = function _isNode(value) {\n            return typeof Node === 'function' && value instanceof Node;\n        };\n        function _executeHooks(hooks, currentNode, data) {\n            arrayForEach(hooks, (hook)=>{\n                hook.call(DOMPurify, currentNode, data, CONFIG);\n            });\n        }\n        /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     * @param currentNode to check for permission to exist\n     * @return true if node was killed, false if left alive\n     */ const _sanitizeElements = function _sanitizeElements(currentNode) {\n            let content = null;\n            /* Execute a hook if present */ _executeHooks(hooks.beforeSanitizeElements, currentNode, null);\n            /* Check if element is clobbered or can clobber */ if (_isClobbered(currentNode)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Now let's check the element's type and name */ const tagName = transformCaseFunc(currentNode.nodeName);\n            /* Execute a hook if present */ _executeHooks(hooks.uponSanitizeElement, currentNode, {\n                tagName: tagName,\n                allowedTags: ALLOWED_TAGS\n            });\n            /* Detect mXSS attempts abusing namespace confusion */ if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\\w!]/g, currentNode.innerHTML) && regExpTest(/<[/\\w!]/g, currentNode.textContent)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Remove any occurrence of processing instructions */ if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Remove any kind of possibly harmful comments */ if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\\w]/g, currentNode.data)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Remove element if anything forbids its presence */ if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n                /* Check if we have a custom element to handle */ if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n                    if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;\n                    if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;\n                }\n                /* Keep content except for bad-listed elements */ if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n                    const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n                    const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n                    if (childNodes && parentNode) {\n                        const childCount = childNodes.length;\n                        for(let i = childCount - 1; i >= 0; --i){\n                            const childClone = cloneNode(childNodes[i], true);\n                            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;\n                            parentNode.insertBefore(childClone, getNextSibling(currentNode));\n                        }\n                    }\n                }\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Check whether element has a valid namespace */ if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Make sure that older browsers don't get fallback-tag mXSS */ if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Sanitize element content to be template-safe */ if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {\n                /* Get the element's text content */ content = currentNode.textContent;\n                arrayForEach([\n                    MUSTACHE_EXPR,\n                    ERB_EXPR,\n                    TMPLIT_EXPR\n                ], (expr)=>{\n                    content = stringReplace(content, expr, ' ');\n                });\n                if (currentNode.textContent !== content) {\n                    arrayPush(DOMPurify.removed, {\n                        element: currentNode.cloneNode()\n                    });\n                    currentNode.textContent = content;\n                }\n            }\n            /* Execute a hook if present */ _executeHooks(hooks.afterSanitizeElements, currentNode, null);\n            return false;\n        };\n        /**\n     * _isValidAttribute\n     *\n     * @param lcTag Lowercase tag name of containing element.\n     * @param lcName Lowercase attribute name.\n     * @param value Attribute value.\n     * @return Returns true if `value` is valid, otherwise false.\n     */ // eslint-disable-next-line complexity\n        const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n            /* Make sure attribute cannot clobber */ if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) return false;\n            /* Allow valid data-* attributes: At least one character after \"-\"\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n          We don't need to check the value; it's always URI safe. */ if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ;\n            else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ;\n            else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n                if (// First condition does a very basic check if a) it's basically a valid custom element tagname AND\n                // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n                // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n                _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND\n                // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n                lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ;\n                else return false;\n            /* Check value is safe. First, is attr inert? If so, is safe */ } else if (URI_SAFE_ATTRIBUTES[lcName]) ;\n            else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ;\n            else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ;\n            else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ;\n            else if (value) return false;\n            return true;\n        };\n        /**\n     * _isBasicCustomElement\n     * checks if at least one dash is included in tagName, and it's not the first char\n     * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n     *\n     * @param tagName name of the tag of the node to sanitize\n     * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n     */ const _isBasicCustomElement = function _isBasicCustomElement(tagName) {\n            return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);\n        };\n        /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param currentNode to sanitize\n     */ const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n            /* Execute a hook if present */ _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);\n            const { attributes: attributes } = currentNode;\n            /* Check if we have attributes; if not we might have a text node */ if (!attributes || _isClobbered(currentNode)) return;\n            const hookEvent = {\n                attrName: '',\n                attrValue: '',\n                keepAttr: true,\n                allowedAttributes: ALLOWED_ATTR,\n                forceKeepAttr: undefined\n            };\n            let l = attributes.length;\n            /* Go backwards over all attributes; safely remove bad ones */ while(l--){\n                const attr = attributes[l];\n                const { name: name, namespaceURI: namespaceURI, value: attrValue } = attr;\n                const lcName = transformCaseFunc(name);\n                let value = name === 'value' ? attrValue : stringTrim(attrValue);\n                /* Execute a hook if present */ hookEvent.attrName = lcName;\n                hookEvent.attrValue = value;\n                hookEvent.keepAttr = true;\n                hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n                _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);\n                value = hookEvent.attrValue;\n                /* Full DOM Clobbering protection via namespace isolation,\n         * Prefix id and name attributes with `user-content-`\n         */ if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n                    // Remove the attribute with this value\n                    _removeAttribute(name, currentNode);\n                    // Prefix the value and later re-create the attribute with the sanitized value\n                    value = SANITIZE_NAMED_PROPS_PREFIX + value;\n                }\n                /* Work around a security issue with comments inside attributes */ if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\\/(style|title)/i, value)) {\n                    _removeAttribute(name, currentNode);\n                    continue;\n                }\n                /* Did the hooks approve of the attribute? */ if (hookEvent.forceKeepAttr) continue;\n                /* Remove attribute */ _removeAttribute(name, currentNode);\n                /* Did the hooks approve of the attribute? */ if (!hookEvent.keepAttr) continue;\n                /* Work around a security issue in jQuery 3.0 */ if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n                    _removeAttribute(name, currentNode);\n                    continue;\n                }\n                /* Sanitize attribute content to be template-safe */ if (SAFE_FOR_TEMPLATES) arrayForEach([\n                    MUSTACHE_EXPR,\n                    ERB_EXPR,\n                    TMPLIT_EXPR\n                ], (expr)=>{\n                    value = stringReplace(value, expr, ' ');\n                });\n                /* Is `value` valid for this attribute? */ const lcTag = transformCaseFunc(currentNode.nodeName);\n                if (!_isValidAttribute(lcTag, lcName, value)) continue;\n                /* Handle attributes that require Trusted Types */ if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n                    if (namespaceURI) ;\n                    else switch(trustedTypes.getAttributeType(lcTag, lcName)){\n                        case 'TrustedHTML':\n                            value = trustedTypesPolicy.createHTML(value);\n                            break;\n                        case 'TrustedScriptURL':\n                            value = trustedTypesPolicy.createScriptURL(value);\n                            break;\n                    }\n                }\n                /* Handle invalid data-* attribute set by try-catching it */ try {\n                    if (namespaceURI) currentNode.setAttributeNS(namespaceURI, name, value);\n                    else /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */ currentNode.setAttribute(name, value);\n                    if (_isClobbered(currentNode)) _forceRemove(currentNode);\n                    else arrayPop(DOMPurify.removed);\n                } catch (_) {}\n            }\n            /* Execute a hook if present */ _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);\n        };\n        /**\n     * _sanitizeShadowDOM\n     *\n     * @param fragment to iterate over recursively\n     */ const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n            let shadowNode = null;\n            const shadowIterator = _createNodeIterator(fragment);\n            /* Execute a hook if present */ _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);\n            while(shadowNode = shadowIterator.nextNode()){\n                /* Execute a hook if present */ _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);\n                /* Sanitize tags and elements */ _sanitizeElements(shadowNode);\n                /* Check attributes next */ _sanitizeAttributes(shadowNode);\n                /* Deep shadow DOM detected */ if (shadowNode.content instanceof DocumentFragment) _sanitizeShadowDOM(shadowNode.content);\n            }\n            /* Execute a hook if present */ _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);\n        };\n        // eslint-disable-next-line complexity\n        DOMPurify.sanitize = function(dirty) {\n            let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            let body = null;\n            let importedNode = null;\n            let currentNode = null;\n            let returnNode = null;\n            /* Make sure we have a string to sanitize.\n        DO NOT return early, as this will return the wrong type if\n        the user has requested a DOM object rather than a string */ IS_EMPTY_INPUT = !dirty;\n            if (IS_EMPTY_INPUT) dirty = '<!-->';\n            /* Stringify, in case dirty is an object */ if (typeof dirty !== 'string' && !_isNode(dirty)) {\n                if (typeof dirty.toString === 'function') {\n                    dirty = dirty.toString();\n                    if (typeof dirty !== 'string') throw typeErrorCreate('dirty is not a string, aborting');\n                } else throw typeErrorCreate('toString is not a function');\n            }\n            /* Return dirty HTML if DOMPurify cannot run */ if (!DOMPurify.isSupported) return dirty;\n            /* Assign config vars */ if (!SET_CONFIG) _parseConfig(cfg);\n            /* Clean up removed elements */ DOMPurify.removed = [];\n            /* Check if dirty is correctly typed for IN_PLACE */ if (typeof dirty === 'string') IN_PLACE = false;\n            if (IN_PLACE) /* Do some early pre-sanitization to avoid unsafe root nodes */ {\n                if (dirty.nodeName) {\n                    const tagName = transformCaseFunc(dirty.nodeName);\n                    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n                }\n            } else if (dirty instanceof Node) {\n                /* If dirty is a DOM element, append to an empty document to avoid\n           elements being stripped by the parser */ body = _initDocument('<!---->');\n                importedNode = body.ownerDocument.importNode(dirty, true);\n                if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === 'BODY') /* Node is already a body, use as is */ body = importedNode;\n                else if (importedNode.nodeName === 'HTML') body = importedNode;\n                else // eslint-disable-next-line unicorn/prefer-dom-node-append\n                body.appendChild(importedNode);\n            } else {\n                /* Exit directly if we have nothing to do */ if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes\n                dirty.indexOf('<') === -1) return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n                /* Initialize the document to work on */ body = _initDocument(dirty);\n                /* Check we have a DOM node from the data */ if (!body) return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n            }\n            /* Remove first element node (ours) if FORCE_BODY is set */ if (body && FORCE_BODY) _forceRemove(body.firstChild);\n            /* Get node iterator */ const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n            /* Now start iterating over the created document */ while(currentNode = nodeIterator.nextNode()){\n                /* Sanitize tags and elements */ _sanitizeElements(currentNode);\n                /* Check attributes next */ _sanitizeAttributes(currentNode);\n                /* Shadow DOM detected, sanitize it */ if (currentNode.content instanceof DocumentFragment) _sanitizeShadowDOM(currentNode.content);\n            }\n            /* If we sanitized `dirty` in-place, return it. */ if (IN_PLACE) return dirty;\n            /* Return sanitized string or DOM */ if (RETURN_DOM) {\n                if (RETURN_DOM_FRAGMENT) {\n                    returnNode = createDocumentFragment.call(body.ownerDocument);\n                    while(body.firstChild)// eslint-disable-next-line unicorn/prefer-dom-node-append\n                    returnNode.appendChild(body.firstChild);\n                } else returnNode = body;\n                if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) /*\n            AdoptNode() is not used because internal state is not reset\n            (e.g. the past names map of a HTMLFormElement), this is safe\n            in theory but we would rather not risk another attack vector.\n            The state that is cloned by importNode() is explicitly defined\n            by the specs.\n          */ returnNode = importNode.call(originalDocument, returnNode, true);\n                return returnNode;\n            }\n            let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n            /* Serialize doctype if allowed */ if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n            /* Sanitize final string template-safe */ if (SAFE_FOR_TEMPLATES) arrayForEach([\n                MUSTACHE_EXPR,\n                ERB_EXPR,\n                TMPLIT_EXPR\n            ], (expr)=>{\n                serializedHTML = stringReplace(serializedHTML, expr, ' ');\n            });\n            return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n        };\n        DOMPurify.setConfig = function() {\n            let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            _parseConfig(cfg);\n            SET_CONFIG = true;\n        };\n        DOMPurify.clearConfig = function() {\n            CONFIG = null;\n            SET_CONFIG = false;\n        };\n        DOMPurify.isValidAttribute = function(tag, attr, value) {\n            /* Initialize shared config vars if necessary. */ if (!CONFIG) _parseConfig({});\n            const lcTag = transformCaseFunc(tag);\n            const lcName = transformCaseFunc(attr);\n            return _isValidAttribute(lcTag, lcName, value);\n        };\n        DOMPurify.addHook = function(entryPoint, hookFunction) {\n            if (typeof hookFunction !== 'function') return;\n            arrayPush(hooks[entryPoint], hookFunction);\n        };\n        DOMPurify.removeHook = function(entryPoint, hookFunction) {\n            if (hookFunction !== undefined) {\n                const index = arrayLastIndexOf(hooks[entryPoint], hookFunction);\n                return index === -1 ? undefined : arraySplice(hooks[entryPoint], index, 1)[0];\n            }\n            return arrayPop(hooks[entryPoint]);\n        };\n        DOMPurify.removeHooks = function(entryPoint) {\n            hooks[entryPoint] = [];\n        };\n        DOMPurify.removeAllHooks = function() {\n            hooks = _createHooksMap();\n        };\n        return DOMPurify;\n    }\n    var purify = createDOMPurify();\n    return purify;\n});\n\n\nvar $d55025bea272cdc1$exports = {};\n/**\n * marked v15.0.11 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */ /**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */ (function(global, factory) {\n    factory($d55025bea272cdc1$exports);\n})($d55025bea272cdc1$exports, function(exports1) {\n    'use strict';\n    /**\n     * Gets the original marked default options.\n     */ function _getDefaults() {\n        return {\n            async: false,\n            breaks: false,\n            extensions: null,\n            gfm: true,\n            hooks: null,\n            pedantic: false,\n            renderer: null,\n            silent: false,\n            tokenizer: null,\n            walkTokens: null\n        };\n    }\n    exports1.defaults = _getDefaults();\n    function changeDefaults(newDefaults) {\n        exports1.defaults = newDefaults;\n    }\n    const noopTest = {\n        exec: ()=>null\n    };\n    function edit(regex, opt = '') {\n        let source = typeof regex === 'string' ? regex : regex.source;\n        const obj = {\n            replace: (name, val)=>{\n                let valSource = typeof val === 'string' ? val : val.source;\n                valSource = valSource.replace(other.caret, '$1');\n                source = source.replace(name, valSource);\n                return obj;\n            },\n            getRegex: ()=>{\n                return new RegExp(source, opt);\n            }\n        };\n        return obj;\n    }\n    const other = {\n        codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n        outputLinkReplace: /\\\\([\\[\\]])/g,\n        indentCodeCompensation: /^(\\s+)(?:```)/,\n        beginningSpace: /^\\s+/,\n        endingHash: /#$/,\n        startingSpaceChar: /^ /,\n        endingSpaceChar: / $/,\n        nonSpaceChar: /[^ ]/,\n        newLineCharGlobal: /\\n/g,\n        tabCharGlobal: /\\t/g,\n        multipleSpaceGlobal: /\\s+/g,\n        blankLine: /^[ \\t]*$/,\n        doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n        blockquoteStart: /^ {0,3}>/,\n        blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n        blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n        listReplaceTabs: /^\\t+/,\n        listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n        listIsTask: /^\\[[ xX]\\] /,\n        listReplaceTask: /^\\[[ xX]\\] +/,\n        anyLine: /\\n.*\\n/,\n        hrefBrackets: /^<(.*)>$/,\n        tableDelimiter: /[:|]/,\n        tableAlignChars: /^\\||\\| *$/g,\n        tableRowBlankLine: /\\n[ \\t]*$/,\n        tableAlignRight: /^ *-+: *$/,\n        tableAlignCenter: /^ *:-+: *$/,\n        tableAlignLeft: /^ *:-+ *$/,\n        startATag: /^<a /i,\n        endATag: /^<\\/a>/i,\n        startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n        endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n        startAngleBracket: /^</,\n        endAngleBracket: />$/,\n        pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n        unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n        escapeTest: /[&<>\"']/,\n        escapeReplace: /[&<>\"']/g,\n        escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n        escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n        unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n        caret: /(^|[^\\[])\\^/g,\n        percentDecode: /%25/g,\n        findPipe: /\\|/g,\n        splitPipe: / \\|/,\n        slashPipe: /\\\\\\|/g,\n        carriageReturn: /\\r\\n|\\r/g,\n        spaceLine: /^ +$/gm,\n        notSpaceStart: /^\\S*/,\n        endingNewline: /\\n$/,\n        listItemRegex: (bull)=>new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n        nextBulletRegex: (indent)=>new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n        hrRegex: (indent)=>new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n        fencesBeginRegex: (indent)=>new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n        headingBeginRegex: (indent)=>new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n        htmlBeginRegex: (indent)=>new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i')\n    };\n    /**\n     * Block-Level Grammar\n     */ const newline = /^(?:[ \\t]*(?:\\n|$))+/;\n    const blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\n    const fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\n    const hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\n    const heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\n    const bullet = /(?:[*+-]|\\d{1,9}[.)])/;\n    const lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\n    const lheading = edit(lheadingCore).replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/\\|table/g, '') // table not in commonmark\n    .getRegex();\n    const lheadingGfm = edit(lheadingCore).replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n    .getRegex();\n    const _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\n    const blockText = /^[^\\n]+/;\n    const _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\n    const def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/).replace('label', _blockLabel).replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex();\n    const list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, bullet).getRegex();\n    const _tag = \"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\";\n    const _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\n    const html = edit(\"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$))\", 'i').replace('comment', _comment).replace('tag', _tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\n    const paragraph = edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\n    const blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace('paragraph', paragraph).getRegex();\n    /**\n     * Normal Block Grammar\n     */ const blockNormal = {\n        blockquote: blockquote,\n        code: blockCode,\n        def: def,\n        fences: fences,\n        heading: heading,\n        hr: hr,\n        html: html,\n        lheading: lheading,\n        list: list,\n        newline: newline,\n        paragraph: paragraph,\n        table: noopTest,\n        text: blockText\n    };\n    /**\n     * GFM Block Grammar\n     */ const gfmTable = edit(\"^ *([^\\\\n ].*)\\\\n {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\") // Cells\n    .replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('blockquote', ' {0,3}>').replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\n    const blockGfm = {\n        ...blockNormal,\n        lheading: lheadingGfm,\n        table: gfmTable,\n        paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n    };\n    /**\n     * Pedantic grammar (original John Gruber's loose markdown specification)\n     */ const blockPedantic = {\n        ...blockNormal,\n        html: edit(\"^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\").replace('comment', _comment).replace(/tag/g, \"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),\n        def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n        heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n        fences: noopTest,\n        lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n        paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', lheading).replace('|table', '').replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').replace('|tag', '').getRegex()\n    };\n    /**\n     * Inline-Level Grammar\n     */ const escape$1 = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\n    const inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\n    const br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\n    const inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n    // list of unicode punctuation marks, plus any missing characters from CommonMark spec\n    const _punctuation = /[\\p{P}\\p{S}]/u;\n    const _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\n    const _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\n    const punctuation = edit(/^((?![*_])punctSpace)/, 'u').replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n    // GFM allows ~ inside strong and em for strikethrough\n    const _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\n    const _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\n    const _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n    // sequences em should skip over [title](link), `code`, <html>\n    const blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\n    const emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n    const emStrongLDelim = edit(emStrongLDelimCore, 'u').replace(/punct/g, _punctuation).getRegex();\n    const emStrongLDelimGfm = edit(emStrongLDelimCore, 'u').replace(/punct/g, _punctuationGfmStrongEm).getRegex();\n    const emStrongRDelimAstCore = \"^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)|notPunctSpace(\\\\*+)(?=notPunctSpace)\"; // (6) a***a can be either Left or Right Delimiter\n    const emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu').replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\n    const emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu').replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm).replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm).replace(/punct/g, _punctuationGfmStrongEm).getRegex();\n    // (6) Not allowed for _\n    const emStrongRDelimUnd = edit(\"^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)\", 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\n    const anyPunctuation = edit(/\\\\(punct)/, 'gu').replace(/punct/g, _punctuation).getRegex();\n    const autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();\n    const _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\n    const tag = edit(\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\") // CDATA section\n    .replace('comment', _inlineComment).replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex();\n    const _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n    const link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/).replace('label', _inlineLabel).replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/).replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex();\n    const reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/).replace('label', _inlineLabel).replace('ref', _blockLabel).getRegex();\n    const nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/).replace('ref', _blockLabel).getRegex();\n    const reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g').replace('reflink', reflink).replace('nolink', nolink).getRegex();\n    /**\n     * Normal Inline Grammar\n     */ const inlineNormal = {\n        _backpedal: noopTest,\n        anyPunctuation: anyPunctuation,\n        autolink: autolink,\n        blockSkip: blockSkip,\n        br: br,\n        code: inlineCode,\n        del: noopTest,\n        emStrongLDelim: emStrongLDelim,\n        emStrongRDelimAst: emStrongRDelimAst,\n        emStrongRDelimUnd: emStrongRDelimUnd,\n        escape: escape$1,\n        link: link,\n        nolink: nolink,\n        punctuation: punctuation,\n        reflink: reflink,\n        reflinkSearch: reflinkSearch,\n        tag: tag,\n        text: inlineText,\n        url: noopTest\n    };\n    /**\n     * Pedantic Inline Grammar\n     */ const inlinePedantic = {\n        ...inlineNormal,\n        link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', _inlineLabel).getRegex(),\n        reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', _inlineLabel).getRegex()\n    };\n    /**\n     * GFM Inline Grammar\n     */ const inlineGfm = {\n        ...inlineNormal,\n        emStrongRDelimAst: emStrongRDelimAstGfm,\n        emStrongLDelim: emStrongLDelimGfm,\n        url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i').replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n        _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n        del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n        text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n    };\n    /**\n     * GFM + Line Breaks Inline Grammar\n     */ const inlineBreaks = {\n        ...inlineGfm,\n        br: edit(br).replace('{2,}', '*').getRegex(),\n        text: edit(inlineGfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n    };\n    /**\n     * exports\n     */ const block = {\n        normal: blockNormal,\n        gfm: blockGfm,\n        pedantic: blockPedantic\n    };\n    const inline = {\n        normal: inlineNormal,\n        gfm: inlineGfm,\n        breaks: inlineBreaks,\n        pedantic: inlinePedantic\n    };\n    /**\n     * Helpers\n     */ const escapeReplacements = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;'\n    };\n    const getEscapeReplacement = (ch)=>escapeReplacements[ch];\n    function escape(html, encode) {\n        if (encode) {\n            if (other.escapeTest.test(html)) return html.replace(other.escapeReplace, getEscapeReplacement);\n        } else {\n            if (other.escapeTestNoEncode.test(html)) return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n        return html;\n    }\n    function cleanUrl(href) {\n        try {\n            href = encodeURI(href).replace(other.percentDecode, '%');\n        } catch  {\n            return null;\n        }\n        return href;\n    }\n    function splitCells(tableRow, count) {\n        // ensure that every cell-delimiting pipe has a space\n        // before it to distinguish it from an escaped pipe\n        const row = tableRow.replace(other.findPipe, (match, offset, str)=>{\n            let escaped = false;\n            let curr = offset;\n            while(--curr >= 0 && str[curr] === '\\\\')escaped = !escaped;\n            if (escaped) // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n            else // add space before unescaped |\n            return ' |';\n        }), cells = row.split(other.splitPipe);\n        let i = 0;\n        // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n        if (!cells[0].trim()) cells.shift();\n        if (cells.length > 0 && !cells.at(-1)?.trim()) cells.pop();\n        if (count) {\n            if (cells.length > count) cells.splice(count);\n            else while(cells.length < count)cells.push('');\n        }\n        for(; i < cells.length; i++)// leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n        return cells;\n    }\n    /**\n     * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n     * /c*$/ is vulnerable to REDOS.\n     *\n     * @param str\n     * @param c\n     * @param invert Remove suffix of non-c chars instead. Default falsey.\n     */ function rtrim(str, c, invert) {\n        const l = str.length;\n        if (l === 0) return '';\n        // Length of suffix matching the invert condition.\n        let suffLen = 0;\n        // Step left until we fail to match the invert condition.\n        while(suffLen < l){\n            const currChar = str.charAt(l - suffLen - 1);\n            if (currChar === c && true) suffLen++;\n            else break;\n        }\n        return str.slice(0, l - suffLen);\n    }\n    function findClosingBracket(str, b) {\n        if (str.indexOf(b[1]) === -1) return -1;\n        let level = 0;\n        for(let i = 0; i < str.length; i++){\n            if (str[i] === '\\\\') i++;\n            else if (str[i] === b[0]) level++;\n            else if (str[i] === b[1]) {\n                level--;\n                if (level < 0) return i;\n            }\n        }\n        if (level > 0) return -2;\n        return -1;\n    }\n    function outputLink(cap, link, raw, lexer, rules) {\n        const href = link.href;\n        const title = link.title || null;\n        const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n        lexer.state.inLink = true;\n        const token = {\n            type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n            raw: raw,\n            href: href,\n            title: title,\n            text: text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    function indentCodeCompensation(raw, text, rules) {\n        const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n        if (matchIndentToCode === null) return text;\n        const indentToCode = matchIndentToCode[1];\n        return text.split('\\n').map((node)=>{\n            const matchIndentInNode = node.match(rules.other.beginningSpace);\n            if (matchIndentInNode === null) return node;\n            const [indentInNode] = matchIndentInNode;\n            if (indentInNode.length >= indentToCode.length) return node.slice(indentToCode.length);\n            return node;\n        }).join('\\n');\n    }\n    /**\n     * Tokenizer\n     */ class _Tokenizer {\n        options;\n        rules;\n        lexer;\n        constructor(options){\n            this.options = options || exports1.defaults;\n        }\n        space(src) {\n            const cap = this.rules.block.newline.exec(src);\n            if (cap && cap[0].length > 0) return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n        code(src) {\n            const cap = this.rules.block.code.exec(src);\n            if (cap) {\n                const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n                return {\n                    type: 'code',\n                    raw: cap[0],\n                    codeBlockStyle: 'indented',\n                    text: !this.options.pedantic ? rtrim(text, '\\n') : text\n                };\n            }\n        }\n        fences(src) {\n            const cap = this.rules.block.fences.exec(src);\n            if (cap) {\n                const raw = cap[0];\n                const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n                return {\n                    type: 'code',\n                    raw: raw,\n                    lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                    text: text\n                };\n            }\n        }\n        heading(src) {\n            const cap = this.rules.block.heading.exec(src);\n            if (cap) {\n                let text = cap[2].trim();\n                // remove trailing #s\n                if (this.rules.other.endingHash.test(text)) {\n                    const trimmed = rtrim(text, '#');\n                    if (this.options.pedantic) text = trimmed.trim();\n                    else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n                return {\n                    type: 'heading',\n                    raw: cap[0],\n                    depth: cap[1].length,\n                    text: text,\n                    tokens: this.lexer.inline(text)\n                };\n            }\n        }\n        hr(src) {\n            const cap = this.rules.block.hr.exec(src);\n            if (cap) return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n')\n            };\n        }\n        blockquote(src) {\n            const cap = this.rules.block.blockquote.exec(src);\n            if (cap) {\n                let lines = rtrim(cap[0], '\\n').split('\\n');\n                let raw = '';\n                let text = '';\n                const tokens = [];\n                while(lines.length > 0){\n                    let inBlockquote = false;\n                    const currentLines = [];\n                    let i;\n                    for(i = 0; i < lines.length; i++){\n                        // get lines up to a continuation\n                        if (this.rules.other.blockquoteStart.test(lines[i])) {\n                            currentLines.push(lines[i]);\n                            inBlockquote = true;\n                        } else if (!inBlockquote) currentLines.push(lines[i]);\n                        else break;\n                    }\n                    lines = lines.slice(i);\n                    const currentRaw = currentLines.join('\\n');\n                    const currentText = currentRaw// precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1').replace(this.rules.other.blockquoteSetextReplace2, '');\n                    raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                    text = text ? `${text}\\n${currentText}` : currentText;\n                    // parse blockquote lines as top level tokens\n                    // merge paragraphs if this is a continuation\n                    const top = this.lexer.state.top;\n                    this.lexer.state.top = true;\n                    this.lexer.blockTokens(currentText, tokens, true);\n                    this.lexer.state.top = top;\n                    // if there is no continuation then we are done\n                    if (lines.length === 0) break;\n                    const lastToken = tokens.at(-1);\n                    if (lastToken?.type === 'code') break;\n                    else if (lastToken?.type === 'blockquote') {\n                        // include continuation in nested blockquote\n                        const oldToken = lastToken;\n                        const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                        const newToken = this.blockquote(newText);\n                        tokens[tokens.length - 1] = newToken;\n                        raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                        text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                        break;\n                    } else if (lastToken?.type === 'list') {\n                        // include continuation in nested list\n                        const oldToken = lastToken;\n                        const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                        const newToken = this.list(newText);\n                        tokens[tokens.length - 1] = newToken;\n                        raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                        text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                        lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                        continue;\n                    }\n                }\n                return {\n                    type: 'blockquote',\n                    raw: raw,\n                    tokens: tokens,\n                    text: text\n                };\n            }\n        }\n        list(src) {\n            let cap = this.rules.block.list.exec(src);\n            if (cap) {\n                let bull = cap[1].trim();\n                const isordered = bull.length > 1;\n                const list = {\n                    type: 'list',\n                    raw: '',\n                    ordered: isordered,\n                    start: isordered ? +bull.slice(0, -1) : '',\n                    loose: false,\n                    items: []\n                };\n                bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n                if (this.options.pedantic) bull = isordered ? bull : '[*+-]';\n                // Get next list item\n                const itemRegex = this.rules.other.listItemRegex(bull);\n                let endsWithBlankLine = false;\n                // Check if current bullet point can start a new List Item\n                while(src){\n                    let endEarly = false;\n                    let raw = '';\n                    let itemContents = '';\n                    if (!(cap = itemRegex.exec(src))) break;\n                    if (this.rules.block.hr.test(src)) break;\n                    raw = cap[0];\n                    src = src.substring(raw.length);\n                    let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t)=>' '.repeat(3 * t.length));\n                    let nextLine = src.split('\\n', 1)[0];\n                    let blankLine = !line.trim();\n                    let indent = 0;\n                    if (this.options.pedantic) {\n                        indent = 2;\n                        itemContents = line.trimStart();\n                    } else if (blankLine) indent = cap[1].length + 1;\n                    else {\n                        indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                        indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                        itemContents = line.slice(indent);\n                        indent += cap[1].length;\n                    }\n                    if (blankLine && this.rules.other.blankLine.test(nextLine)) {\n                        raw += nextLine + '\\n';\n                        src = src.substring(nextLine.length + 1);\n                        endEarly = true;\n                    }\n                    if (!endEarly) {\n                        const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                        const hrRegex = this.rules.other.hrRegex(indent);\n                        const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                        const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                        const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                        // Check if following lines should be included in List Item\n                        while(src){\n                            const rawLine = src.split('\\n', 1)[0];\n                            let nextLineWithoutTabs;\n                            nextLine = rawLine;\n                            // Re-align to follow commonmark nesting rules\n                            if (this.options.pedantic) {\n                                nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                                nextLineWithoutTabs = nextLine;\n                            } else nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                            // End list item if found code fences\n                            if (fencesBeginRegex.test(nextLine)) break;\n                            // End list item if found start of new heading\n                            if (headingBeginRegex.test(nextLine)) break;\n                            // End list item if found start of html block\n                            if (htmlBeginRegex.test(nextLine)) break;\n                            // End list item if found start of new bullet\n                            if (nextBulletRegex.test(nextLine)) break;\n                            // Horizontal rule found\n                            if (hrRegex.test(nextLine)) break;\n                            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                            else {\n                                // not enough indentation\n                                if (blankLine) break;\n                                // paragraph continuation unless last line was a different block level element\n                                if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) break;\n                                if (fencesBeginRegex.test(line)) break;\n                                if (headingBeginRegex.test(line)) break;\n                                if (hrRegex.test(line)) break;\n                                itemContents += '\\n' + nextLine;\n                            }\n                            if (!blankLine && !nextLine.trim()) blankLine = true;\n                            raw += rawLine + '\\n';\n                            src = src.substring(rawLine.length + 1);\n                            line = nextLineWithoutTabs.slice(indent);\n                        }\n                    }\n                    if (!list.loose) {\n                        // If the previous item ended with a blank line, the list is loose\n                        if (endsWithBlankLine) list.loose = true;\n                        else if (this.rules.other.doubleBlankLine.test(raw)) endsWithBlankLine = true;\n                    }\n                    let istask = null;\n                    let ischecked;\n                    // Check for task list items\n                    if (this.options.gfm) {\n                        istask = this.rules.other.listIsTask.exec(itemContents);\n                        if (istask) {\n                            ischecked = istask[0] !== '[ ] ';\n                            itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                        }\n                    }\n                    list.items.push({\n                        type: 'list_item',\n                        raw: raw,\n                        task: !!istask,\n                        checked: ischecked,\n                        loose: false,\n                        text: itemContents,\n                        tokens: []\n                    });\n                    list.raw += raw;\n                }\n                // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n                const lastItem = list.items.at(-1);\n                if (lastItem) {\n                    lastItem.raw = lastItem.raw.trimEnd();\n                    lastItem.text = lastItem.text.trimEnd();\n                } else // not a list since there were no items\n                return;\n                list.raw = list.raw.trimEnd();\n                // Item child tokens handled here at end because we needed to have the final item to trim it first\n                for(let i = 0; i < list.items.length; i++){\n                    this.lexer.state.top = false;\n                    list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                    if (!list.loose) {\n                        // Check if list should be loose\n                        const spacers = list.items[i].tokens.filter((t)=>t.type === 'space');\n                        const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t)=>this.rules.other.anyLine.test(t.raw));\n                        list.loose = hasMultipleLineBreaks;\n                    }\n                }\n                // Set all items to loose if list is loose\n                if (list.loose) for(let i = 0; i < list.items.length; i++)list.items[i].loose = true;\n                return list;\n            }\n        }\n        html(src) {\n            const cap = this.rules.block.html.exec(src);\n            if (cap) {\n                const token = {\n                    type: 'html',\n                    block: true,\n                    raw: cap[0],\n                    pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                    text: cap[0]\n                };\n                return token;\n            }\n        }\n        def(src) {\n            const cap = this.rules.block.def.exec(src);\n            if (cap) {\n                const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n                const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n                const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n                return {\n                    type: 'def',\n                    tag: tag,\n                    raw: cap[0],\n                    href: href,\n                    title: title\n                };\n            }\n        }\n        table(src) {\n            const cap = this.rules.block.table.exec(src);\n            if (!cap) return;\n            if (!this.rules.other.tableDelimiter.test(cap[2])) // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n            const headers = splitCells(cap[1]);\n            const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n            const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n            const item = {\n                type: 'table',\n                raw: cap[0],\n                header: [],\n                align: [],\n                rows: []\n            };\n            if (headers.length !== aligns.length) // header and align columns must be equal, rows can be different.\n            return;\n            for (const align of aligns){\n                if (this.rules.other.tableAlignRight.test(align)) item.align.push('right');\n                else if (this.rules.other.tableAlignCenter.test(align)) item.align.push('center');\n                else if (this.rules.other.tableAlignLeft.test(align)) item.align.push('left');\n                else item.align.push(null);\n            }\n            for(let i = 0; i < headers.length; i++)item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i]\n            });\n            for (const row of rows)item.rows.push(splitCells(row, item.header.length).map((cell, i)=>{\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i]\n                };\n            }));\n            return item;\n        }\n        lheading(src) {\n            const cap = this.rules.block.lheading.exec(src);\n            if (cap) return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n        paragraph(src) {\n            const cap = this.rules.block.paragraph.exec(src);\n            if (cap) {\n                const text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n                return {\n                    type: 'paragraph',\n                    raw: cap[0],\n                    text: text,\n                    tokens: this.lexer.inline(text)\n                };\n            }\n        }\n        text(src) {\n            const cap = this.rules.block.text.exec(src);\n            if (cap) return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n        escape(src) {\n            const cap = this.rules.inline.escape.exec(src);\n            if (cap) return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1]\n            };\n        }\n        tag(src) {\n            const cap = this.rules.inline.tag.exec(src);\n            if (cap) {\n                if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) this.lexer.state.inLink = true;\n                else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) this.lexer.state.inLink = false;\n                if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) this.lexer.state.inRawBlock = true;\n                else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) this.lexer.state.inRawBlock = false;\n                return {\n                    type: 'html',\n                    raw: cap[0],\n                    inLink: this.lexer.state.inLink,\n                    inRawBlock: this.lexer.state.inRawBlock,\n                    block: false,\n                    text: cap[0]\n                };\n            }\n        }\n        link(src) {\n            const cap = this.rules.inline.link.exec(src);\n            if (cap) {\n                const trimmedUrl = cap[2].trim();\n                if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                    // commonmark requires matching angle brackets\n                    if (!this.rules.other.endAngleBracket.test(trimmedUrl)) return;\n                    // ending angle bracket cannot be escaped\n                    const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                    if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) return;\n                } else {\n                    // find closing parenthesis\n                    const lastParenIndex = findClosingBracket(cap[2], '()');\n                    if (lastParenIndex === -2) // more open parens than closed\n                    return;\n                    if (lastParenIndex > -1) {\n                        const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                        const linkLen = start + cap[1].length + lastParenIndex;\n                        cap[2] = cap[2].substring(0, lastParenIndex);\n                        cap[0] = cap[0].substring(0, linkLen).trim();\n                        cap[3] = '';\n                    }\n                }\n                let href = cap[2];\n                let title = '';\n                if (this.options.pedantic) {\n                    // split pedantic href and title\n                    const link = this.rules.other.pedanticHrefTitle.exec(href);\n                    if (link) {\n                        href = link[1];\n                        title = link[3];\n                    }\n                } else title = cap[3] ? cap[3].slice(1, -1) : '';\n                href = href.trim();\n                if (this.rules.other.startAngleBracket.test(href)) {\n                    if (this.options.pedantic && !this.rules.other.endAngleBracket.test(trimmedUrl)) // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                    else href = href.slice(1, -1);\n                }\n                return outputLink(cap, {\n                    href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                    title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n                }, cap[0], this.lexer, this.rules);\n            }\n        }\n        reflink(src, links) {\n            let cap;\n            if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n                const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n                const link = links[linkString.toLowerCase()];\n                if (!link) {\n                    const text = cap[0].charAt(0);\n                    return {\n                        type: 'text',\n                        raw: text,\n                        text: text\n                    };\n                }\n                return outputLink(cap, link, cap[0], this.lexer, this.rules);\n            }\n        }\n        emStrong(src, maskedSrc, prevChar = '') {\n            let match = this.rules.inline.emStrongLDelim.exec(src);\n            if (!match) return;\n            // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n            if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n            const nextChar = match[1] || match[2] || '';\n            if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n                // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n                const lLength = [\n                    ...match[0]\n                ].length - 1;\n                let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n                const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n                endReg.lastIndex = 0;\n                // Clip maskedSrc to same section of string as src (move to lexer?)\n                maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n                while((match = endReg.exec(maskedSrc)) != null){\n                    rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                    if (!rDelim) continue; // skip single * in __abc*abc__\n                    rLength = [\n                        ...rDelim\n                    ].length;\n                    if (match[3] || match[4]) {\n                        delimTotal += rLength;\n                        continue;\n                    } else if (match[5] || match[6]) {\n                        if (lLength % 3 && !((lLength + rLength) % 3)) {\n                            midDelimTotal += rLength;\n                            continue; // CommonMark Emphasis Rules 9-10\n                        }\n                    }\n                    delimTotal -= rLength;\n                    if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n                    // Remove extra characters. *a*** -> *a*\n                    rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                    // char length can be >1 for unicode characters;\n                    const lastCharLength = [\n                        ...match[0]\n                    ][0].length;\n                    const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                    // Create `em` if smallest delimiter has odd char count. *a***\n                    if (Math.min(lLength, rLength) % 2) {\n                        const text = raw.slice(1, -1);\n                        return {\n                            type: 'em',\n                            raw: raw,\n                            text: text,\n                            tokens: this.lexer.inlineTokens(text)\n                        };\n                    }\n                    // Create 'strong' if smallest delimiter has even char count. **a***\n                    const text = raw.slice(2, -2);\n                    return {\n                        type: 'strong',\n                        raw: raw,\n                        text: text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n            }\n        }\n        codespan(src) {\n            const cap = this.rules.inline.code.exec(src);\n            if (cap) {\n                let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n                const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n                const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n                if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) text = text.substring(1, text.length - 1);\n                return {\n                    type: 'codespan',\n                    raw: cap[0],\n                    text: text\n                };\n            }\n        }\n        br(src) {\n            const cap = this.rules.inline.br.exec(src);\n            if (cap) return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n        del(src) {\n            const cap = this.rules.inline.del.exec(src);\n            if (cap) return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n        autolink(src) {\n            const cap = this.rules.inline.autolink.exec(src);\n            if (cap) {\n                let text, href;\n                if (cap[2] === '@') {\n                    text = cap[1];\n                    href = 'mailto:' + text;\n                } else {\n                    text = cap[1];\n                    href = text;\n                }\n                return {\n                    type: 'link',\n                    raw: cap[0],\n                    text: text,\n                    href: href,\n                    tokens: [\n                        {\n                            type: 'text',\n                            raw: text,\n                            text: text\n                        }\n                    ]\n                };\n            }\n        }\n        url(src) {\n            let cap;\n            if (cap = this.rules.inline.url.exec(src)) {\n                let text, href;\n                if (cap[2] === '@') {\n                    text = cap[0];\n                    href = 'mailto:' + text;\n                } else {\n                    // do extended autolink path validation\n                    let prevCapZero;\n                    do {\n                        prevCapZero = cap[0];\n                        cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                    }while (prevCapZero !== cap[0]);\n                    text = cap[0];\n                    if (cap[1] === 'www.') href = 'http://' + cap[0];\n                    else href = cap[0];\n                }\n                return {\n                    type: 'link',\n                    raw: cap[0],\n                    text: text,\n                    href: href,\n                    tokens: [\n                        {\n                            type: 'text',\n                            raw: text,\n                            text: text\n                        }\n                    ]\n                };\n            }\n        }\n        inlineText(src) {\n            const cap = this.rules.inline.text.exec(src);\n            if (cap) {\n                const escaped = this.lexer.state.inRawBlock;\n                return {\n                    type: 'text',\n                    raw: cap[0],\n                    text: cap[0],\n                    escaped: escaped\n                };\n            }\n        }\n    }\n    /**\n     * Block Lexer\n     */ class _Lexer {\n        tokens;\n        options;\n        state;\n        tokenizer;\n        inlineQueue;\n        constructor(options){\n            // TokenList cannot be created in one go\n            this.tokens = [];\n            this.tokens.links = Object.create(null);\n            this.options = options || exports1.defaults;\n            this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n            this.tokenizer = this.options.tokenizer;\n            this.tokenizer.options = this.options;\n            this.tokenizer.lexer = this;\n            this.inlineQueue = [];\n            this.state = {\n                inLink: false,\n                inRawBlock: false,\n                top: true\n            };\n            const rules = {\n                other: other,\n                block: block.normal,\n                inline: inline.normal\n            };\n            if (this.options.pedantic) {\n                rules.block = block.pedantic;\n                rules.inline = inline.pedantic;\n            } else if (this.options.gfm) {\n                rules.block = block.gfm;\n                if (this.options.breaks) rules.inline = inline.breaks;\n                else rules.inline = inline.gfm;\n            }\n            this.tokenizer.rules = rules;\n        }\n        /**\n         * Expose Rules\n         */ static get rules() {\n            return {\n                block: block,\n                inline: inline\n            };\n        }\n        /**\n         * Static Lex Method\n         */ static lex(src, options) {\n            const lexer = new _Lexer(options);\n            return lexer.lex(src);\n        }\n        /**\n         * Static Lex Inline Method\n         */ static lexInline(src, options) {\n            const lexer = new _Lexer(options);\n            return lexer.inlineTokens(src);\n        }\n        /**\n         * Preprocessing\n         */ lex(src) {\n            src = src.replace(other.carriageReturn, '\\n');\n            this.blockTokens(src, this.tokens);\n            for(let i = 0; i < this.inlineQueue.length; i++){\n                const next = this.inlineQueue[i];\n                this.inlineTokens(next.src, next.tokens);\n            }\n            this.inlineQueue = [];\n            return this.tokens;\n        }\n        blockTokens(src, tokens = [], lastParagraphClipped = false) {\n            if (this.options.pedantic) src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n            while(src){\n                let token;\n                if (this.options.extensions?.block?.some((extTokenizer)=>{\n                    if (token = extTokenizer.call({\n                        lexer: this\n                    }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) continue;\n                // newline\n                if (token = this.tokenizer.space(src)) {\n                    src = src.substring(token.raw.length);\n                    const lastToken = tokens.at(-1);\n                    if (token.raw.length === 1 && lastToken !== undefined) // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                    else tokens.push(token);\n                    continue;\n                }\n                // code\n                if (token = this.tokenizer.code(src)) {\n                    src = src.substring(token.raw.length);\n                    const lastToken = tokens.at(-1);\n                    // An indented code block cannot interrupt a paragraph.\n                    if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.text;\n                        this.inlineQueue.at(-1).src = lastToken.text;\n                    } else tokens.push(token);\n                    continue;\n                }\n                // fences\n                if (token = this.tokenizer.fences(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // heading\n                if (token = this.tokenizer.heading(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // hr\n                if (token = this.tokenizer.hr(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // blockquote\n                if (token = this.tokenizer.blockquote(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // list\n                if (token = this.tokenizer.list(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // html\n                if (token = this.tokenizer.html(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // def\n                if (token = this.tokenizer.def(src)) {\n                    src = src.substring(token.raw.length);\n                    const lastToken = tokens.at(-1);\n                    if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.raw;\n                        this.inlineQueue.at(-1).src = lastToken.text;\n                    } else if (!this.tokens.links[token.tag]) this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                    continue;\n                }\n                // table (gfm)\n                if (token = this.tokenizer.table(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // lheading\n                if (token = this.tokenizer.lheading(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // top-level paragraph\n                // prevent paragraph consuming extensions by clipping 'src' to extension start\n                let cutSrc = src;\n                if (this.options.extensions?.startBlock) {\n                    let startIndex = Infinity;\n                    const tempSrc = src.slice(1);\n                    let tempStart;\n                    this.options.extensions.startBlock.forEach((getStartIndex)=>{\n                        tempStart = getStartIndex.call({\n                            lexer: this\n                        }, tempSrc);\n                        if (typeof tempStart === 'number' && tempStart >= 0) startIndex = Math.min(startIndex, tempStart);\n                    });\n                    if (startIndex < Infinity && startIndex >= 0) cutSrc = src.substring(0, startIndex + 1);\n                }\n                if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                    const lastToken = tokens.at(-1);\n                    if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.text;\n                        this.inlineQueue.pop();\n                        this.inlineQueue.at(-1).src = lastToken.text;\n                    } else tokens.push(token);\n                    lastParagraphClipped = cutSrc.length !== src.length;\n                    src = src.substring(token.raw.length);\n                    continue;\n                }\n                // text\n                if (token = this.tokenizer.text(src)) {\n                    src = src.substring(token.raw.length);\n                    const lastToken = tokens.at(-1);\n                    if (lastToken?.type === 'text') {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.text;\n                        this.inlineQueue.pop();\n                        this.inlineQueue.at(-1).src = lastToken.text;\n                    } else tokens.push(token);\n                    continue;\n                }\n                if (src) {\n                    const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        break;\n                    } else throw new Error(errMsg);\n                }\n            }\n            this.state.top = true;\n            return tokens;\n        }\n        inline(src, tokens = []) {\n            this.inlineQueue.push({\n                src: src,\n                tokens: tokens\n            });\n            return tokens;\n        }\n        /**\n         * Lexing/Compiling\n         */ inlineTokens(src, tokens = []) {\n            // String with links masked to avoid interference with em and strong\n            let maskedSrc = src;\n            let match = null;\n            // Mask out reflinks\n            if (this.tokens.links) {\n                const links = Object.keys(this.tokens.links);\n                if (links.length > 0) {\n                    while((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null)if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                }\n            }\n            // Mask out escaped characters\n            while((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null)maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n            // Mask out other blocks\n            while((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null)maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n            let keepPrevChar = false;\n            let prevChar = '';\n            while(src){\n                if (!keepPrevChar) prevChar = '';\n                keepPrevChar = false;\n                let token;\n                // extensions\n                if (this.options.extensions?.inline?.some((extTokenizer)=>{\n                    if (token = extTokenizer.call({\n                        lexer: this\n                    }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) continue;\n                // escape\n                if (token = this.tokenizer.escape(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // tag\n                if (token = this.tokenizer.tag(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // link\n                if (token = this.tokenizer.link(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // reflink, nolink\n                if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                    src = src.substring(token.raw.length);\n                    const lastToken = tokens.at(-1);\n                    if (token.type === 'text' && lastToken?.type === 'text') {\n                        lastToken.raw += token.raw;\n                        lastToken.text += token.text;\n                    } else tokens.push(token);\n                    continue;\n                }\n                // em & strong\n                if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // code\n                if (token = this.tokenizer.codespan(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // br\n                if (token = this.tokenizer.br(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // del (gfm)\n                if (token = this.tokenizer.del(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // autolink\n                if (token = this.tokenizer.autolink(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // url (gfm)\n                if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // text\n                // prevent inlineText consuming extensions by clipping 'src' to extension start\n                let cutSrc = src;\n                if (this.options.extensions?.startInline) {\n                    let startIndex = Infinity;\n                    const tempSrc = src.slice(1);\n                    let tempStart;\n                    this.options.extensions.startInline.forEach((getStartIndex)=>{\n                        tempStart = getStartIndex.call({\n                            lexer: this\n                        }, tempSrc);\n                        if (typeof tempStart === 'number' && tempStart >= 0) startIndex = Math.min(startIndex, tempStart);\n                    });\n                    if (startIndex < Infinity && startIndex >= 0) cutSrc = src.substring(0, startIndex + 1);\n                }\n                if (token = this.tokenizer.inlineText(cutSrc)) {\n                    src = src.substring(token.raw.length);\n                    if (token.raw.slice(-1) !== '_') prevChar = token.raw.slice(-1);\n                    keepPrevChar = true;\n                    const lastToken = tokens.at(-1);\n                    if (lastToken?.type === 'text') {\n                        lastToken.raw += token.raw;\n                        lastToken.text += token.text;\n                    } else tokens.push(token);\n                    continue;\n                }\n                if (src) {\n                    const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        break;\n                    } else throw new Error(errMsg);\n                }\n            }\n            return tokens;\n        }\n    }\n    /**\n     * Renderer\n     */ class _Renderer {\n        options;\n        parser;\n        constructor(options){\n            this.options = options || exports1.defaults;\n        }\n        space(token) {\n            return '';\n        }\n        code({ text: text, lang: lang, escaped: escaped }) {\n            const langString = (lang || '').match(other.notSpaceStart)?.[0];\n            const code = text.replace(other.endingNewline, '') + '\\n';\n            if (!langString) return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n            return '<pre><code class=\"language-' + escape(langString) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n        }\n        blockquote({ tokens: tokens }) {\n            const body = this.parser.parse(tokens);\n            return `<blockquote>\\n${body}</blockquote>\\n`;\n        }\n        html({ text: text }) {\n            return text;\n        }\n        heading({ tokens: tokens, depth: depth }) {\n            return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n        }\n        hr(token) {\n            return '<hr>\\n';\n        }\n        list(token) {\n            const ordered = token.ordered;\n            const start = token.start;\n            let body = '';\n            for(let j = 0; j < token.items.length; j++){\n                const item = token.items[j];\n                body += this.listitem(item);\n            }\n            const type = ordered ? 'ol' : 'ul';\n            const startAttr = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n            return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n        }\n        listitem(item) {\n            let itemBody = '';\n            if (item.task) {\n                const checkbox = this.checkbox({\n                    checked: !!item.checked\n                });\n                if (item.loose) {\n                    if (item.tokens[0]?.type === 'paragraph') {\n                        item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                        if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                            item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                            item.tokens[0].tokens[0].escaped = true;\n                        }\n                    } else item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true\n                    });\n                } else itemBody += checkbox + ' ';\n            }\n            itemBody += this.parser.parse(item.tokens, !!item.loose);\n            return `<li>${itemBody}</li>\\n`;\n        }\n        checkbox({ checked: checked }) {\n            return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\">';\n        }\n        paragraph({ tokens: tokens }) {\n            return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n        }\n        table(token) {\n            let header = '';\n            // header\n            let cell = '';\n            for(let j = 0; j < token.header.length; j++)cell += this.tablecell(token.header[j]);\n            header += this.tablerow({\n                text: cell\n            });\n            let body = '';\n            for(let j = 0; j < token.rows.length; j++){\n                const row = token.rows[j];\n                cell = '';\n                for(let k = 0; k < row.length; k++)cell += this.tablecell(row[k]);\n                body += this.tablerow({\n                    text: cell\n                });\n            }\n            if (body) body = `<tbody>${body}</tbody>`;\n            return \"<table>\\n<thead>\\n\" + header + '</thead>\\n' + body + '</table>\\n';\n        }\n        tablerow({ text: text }) {\n            return `<tr>\\n${text}</tr>\\n`;\n        }\n        tablecell(token) {\n            const content = this.parser.parseInline(token.tokens);\n            const type = token.header ? 'th' : 'td';\n            const tag = token.align ? `<${type} align=\"${token.align}\">` : `<${type}>`;\n            return tag + content + `</${type}>\\n`;\n        }\n        /**\n         * span level renderer\n         */ strong({ tokens: tokens }) {\n            return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n        }\n        em({ tokens: tokens }) {\n            return `<em>${this.parser.parseInline(tokens)}</em>`;\n        }\n        codespan({ text: text }) {\n            return `<code>${escape(text, true)}</code>`;\n        }\n        br(token) {\n            return '<br>';\n        }\n        del({ tokens: tokens }) {\n            return `<del>${this.parser.parseInline(tokens)}</del>`;\n        }\n        link({ href: href, title: title, tokens: tokens }) {\n            const text = this.parser.parseInline(tokens);\n            const cleanHref = cleanUrl(href);\n            if (cleanHref === null) return text;\n            href = cleanHref;\n            let out = '<a href=\"' + href + '\"';\n            if (title) out += ' title=\"' + escape(title) + '\"';\n            out += '>' + text + '</a>';\n            return out;\n        }\n        image({ href: href, title: title, text: text, tokens: tokens }) {\n            if (tokens) text = this.parser.parseInline(tokens, this.parser.textRenderer);\n            const cleanHref = cleanUrl(href);\n            if (cleanHref === null) return escape(text);\n            href = cleanHref;\n            let out = `<img src=\"${href}\" alt=\"${text}\"`;\n            if (title) out += ` title=\"${escape(title)}\"`;\n            out += '>';\n            return out;\n        }\n        text(token) {\n            return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : 'escaped' in token && token.escaped ? token.text : escape(token.text);\n        }\n    }\n    /**\n     * TextRenderer\n     * returns only the textual part of the token\n     */ class _TextRenderer {\n        // no need for block level renderers\n        strong({ text: text }) {\n            return text;\n        }\n        em({ text: text }) {\n            return text;\n        }\n        codespan({ text: text }) {\n            return text;\n        }\n        del({ text: text }) {\n            return text;\n        }\n        html({ text: text }) {\n            return text;\n        }\n        text({ text: text }) {\n            return text;\n        }\n        link({ text: text }) {\n            return '' + text;\n        }\n        image({ text: text }) {\n            return '' + text;\n        }\n        br() {\n            return '';\n        }\n    }\n    /**\n     * Parsing & Compiling\n     */ class _Parser {\n        options;\n        renderer;\n        textRenderer;\n        constructor(options){\n            this.options = options || exports1.defaults;\n            this.options.renderer = this.options.renderer || new _Renderer();\n            this.renderer = this.options.renderer;\n            this.renderer.options = this.options;\n            this.renderer.parser = this;\n            this.textRenderer = new _TextRenderer();\n        }\n        /**\n         * Static Parse Method\n         */ static parse(tokens, options) {\n            const parser = new _Parser(options);\n            return parser.parse(tokens);\n        }\n        /**\n         * Static Parse Inline Method\n         */ static parseInline(tokens, options) {\n            const parser = new _Parser(options);\n            return parser.parseInline(tokens);\n        }\n        /**\n         * Parse Loop\n         */ parse(tokens, top = true) {\n            let out = '';\n            for(let i = 0; i < tokens.length; i++){\n                const anyToken = tokens[i];\n                // Run any renderer extensions\n                if (this.options.extensions?.renderers?.[anyToken.type]) {\n                    const genericToken = anyToken;\n                    const ret = this.options.extensions.renderers[genericToken.type].call({\n                        parser: this\n                    }, genericToken);\n                    if (ret !== false || ![\n                        'space',\n                        'hr',\n                        'heading',\n                        'code',\n                        'table',\n                        'blockquote',\n                        'list',\n                        'html',\n                        'paragraph',\n                        'text'\n                    ].includes(genericToken.type)) {\n                        out += ret || '';\n                        continue;\n                    }\n                }\n                const token = anyToken;\n                switch(token.type){\n                    case 'space':\n                        out += this.renderer.space(token);\n                        continue;\n                    case 'hr':\n                        out += this.renderer.hr(token);\n                        continue;\n                    case 'heading':\n                        out += this.renderer.heading(token);\n                        continue;\n                    case 'code':\n                        out += this.renderer.code(token);\n                        continue;\n                    case 'table':\n                        out += this.renderer.table(token);\n                        continue;\n                    case 'blockquote':\n                        out += this.renderer.blockquote(token);\n                        continue;\n                    case 'list':\n                        out += this.renderer.list(token);\n                        continue;\n                    case 'html':\n                        out += this.renderer.html(token);\n                        continue;\n                    case 'paragraph':\n                        out += this.renderer.paragraph(token);\n                        continue;\n                    case 'text':\n                        {\n                            let textToken = token;\n                            let body = this.renderer.text(textToken);\n                            while(i + 1 < tokens.length && tokens[i + 1].type === 'text'){\n                                textToken = tokens[++i];\n                                body += '\\n' + this.renderer.text(textToken);\n                            }\n                            if (top) out += this.renderer.paragraph({\n                                type: 'paragraph',\n                                raw: body,\n                                text: body,\n                                tokens: [\n                                    {\n                                        type: 'text',\n                                        raw: body,\n                                        text: body,\n                                        escaped: true\n                                    }\n                                ]\n                            });\n                            else out += body;\n                            continue;\n                        }\n                    default:\n                        {\n                            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                            if (this.options.silent) {\n                                console.error(errMsg);\n                                return '';\n                            } else throw new Error(errMsg);\n                        }\n                }\n            }\n            return out;\n        }\n        /**\n         * Parse Inline Tokens\n         */ parseInline(tokens, renderer = this.renderer) {\n            let out = '';\n            for(let i = 0; i < tokens.length; i++){\n                const anyToken = tokens[i];\n                // Run any renderer extensions\n                if (this.options.extensions?.renderers?.[anyToken.type]) {\n                    const ret = this.options.extensions.renderers[anyToken.type].call({\n                        parser: this\n                    }, anyToken);\n                    if (ret !== false || ![\n                        'escape',\n                        'html',\n                        'link',\n                        'image',\n                        'strong',\n                        'em',\n                        'codespan',\n                        'br',\n                        'del',\n                        'text'\n                    ].includes(anyToken.type)) {\n                        out += ret || '';\n                        continue;\n                    }\n                }\n                const token = anyToken;\n                switch(token.type){\n                    case 'escape':\n                        out += renderer.text(token);\n                        break;\n                    case 'html':\n                        out += renderer.html(token);\n                        break;\n                    case 'link':\n                        out += renderer.link(token);\n                        break;\n                    case 'image':\n                        out += renderer.image(token);\n                        break;\n                    case 'strong':\n                        out += renderer.strong(token);\n                        break;\n                    case 'em':\n                        out += renderer.em(token);\n                        break;\n                    case 'codespan':\n                        out += renderer.codespan(token);\n                        break;\n                    case 'br':\n                        out += renderer.br(token);\n                        break;\n                    case 'del':\n                        out += renderer.del(token);\n                        break;\n                    case 'text':\n                        out += renderer.text(token);\n                        break;\n                    default:\n                        {\n                            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                            if (this.options.silent) {\n                                console.error(errMsg);\n                                return '';\n                            } else throw new Error(errMsg);\n                        }\n                }\n            }\n            return out;\n        }\n    }\n    class _Hooks {\n        options;\n        block;\n        constructor(options){\n            this.options = options || exports1.defaults;\n        }\n        static passThroughHooks = new Set([\n            'preprocess',\n            'postprocess',\n            'processAllTokens'\n        ]);\n        /**\n         * Process markdown before marked\n         */ preprocess(markdown) {\n            return markdown;\n        }\n        /**\n         * Process HTML after marked is finished\n         */ postprocess(html) {\n            return html;\n        }\n        /**\n         * Process all tokens before walk tokens\n         */ processAllTokens(tokens) {\n            return tokens;\n        }\n        /**\n         * Provide function to tokenize markdown\n         */ provideLexer() {\n            return this.block ? _Lexer.lex : _Lexer.lexInline;\n        }\n        /**\n         * Provide function to parse tokens\n         */ provideParser() {\n            return this.block ? _Parser.parse : _Parser.parseInline;\n        }\n    }\n    class Marked {\n        defaults = _getDefaults();\n        options = this.setOptions;\n        parse = this.parseMarkdown(true);\n        parseInline = this.parseMarkdown(false);\n        Parser = _Parser;\n        Renderer = _Renderer;\n        TextRenderer = _TextRenderer;\n        Lexer = _Lexer;\n        Tokenizer = _Tokenizer;\n        Hooks = _Hooks;\n        constructor(...args){\n            this.use(...args);\n        }\n        /**\n         * Run callback for every token\n         */ walkTokens(tokens, callback) {\n            let values = [];\n            for (const token of tokens){\n                values = values.concat(callback.call(this, token));\n                switch(token.type){\n                    case 'table':\n                        {\n                            const tableToken = token;\n                            for (const cell of tableToken.header)values = values.concat(this.walkTokens(cell.tokens, callback));\n                            for (const row of tableToken.rows)for (const cell of row)values = values.concat(this.walkTokens(cell.tokens, callback));\n                            break;\n                        }\n                    case 'list':\n                        {\n                            const listToken = token;\n                            values = values.concat(this.walkTokens(listToken.items, callback));\n                            break;\n                        }\n                    default:\n                        {\n                            const genericToken = token;\n                            if (this.defaults.extensions?.childTokens?.[genericToken.type]) this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens)=>{\n                                const tokens = genericToken[childTokens].flat(Infinity);\n                                values = values.concat(this.walkTokens(tokens, callback));\n                            });\n                            else if (genericToken.tokens) values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                        }\n                }\n            }\n            return values;\n        }\n        use(...args) {\n            const extensions = this.defaults.extensions || {\n                renderers: {},\n                childTokens: {}\n            };\n            args.forEach((pack)=>{\n                // copy options to new object\n                const opts = {\n                    ...pack\n                };\n                // set async to true if it was set to true before\n                opts.async = this.defaults.async || opts.async || false;\n                // ==-- Parse \"addon\" extensions --== //\n                if (pack.extensions) {\n                    pack.extensions.forEach((ext)=>{\n                        if (!ext.name) throw new Error('extension name required');\n                        if ('renderer' in ext) {\n                            const prevRenderer = extensions.renderers[ext.name];\n                            if (prevRenderer) // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function(...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) ret = prevRenderer.apply(this, args);\n                                return ret;\n                            };\n                            else extensions.renderers[ext.name] = ext.renderer;\n                        }\n                        if ('tokenizer' in ext) {\n                            if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') throw new Error(\"extension level must be 'block' or 'inline'\");\n                            const extLevel = extensions[ext.level];\n                            if (extLevel) extLevel.unshift(ext.tokenizer);\n                            else extensions[ext.level] = [\n                                ext.tokenizer\n                            ];\n                            if (ext.start) {\n                                if (ext.level === 'block') {\n                                    if (extensions.startBlock) extensions.startBlock.push(ext.start);\n                                    else extensions.startBlock = [\n                                        ext.start\n                                    ];\n                                } else if (ext.level === 'inline') {\n                                    if (extensions.startInline) extensions.startInline.push(ext.start);\n                                    else extensions.startInline = [\n                                        ext.start\n                                    ];\n                                }\n                            }\n                        }\n                        if ('childTokens' in ext && ext.childTokens) extensions.childTokens[ext.name] = ext.childTokens;\n                    });\n                    opts.extensions = extensions;\n                }\n                // ==-- Parse \"overwrite\" extensions --== //\n                if (pack.renderer) {\n                    const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                    for(const prop in pack.renderer){\n                        if (!(prop in renderer)) throw new Error(`renderer '${prop}' does not exist`);\n                        if ([\n                            'options',\n                            'parser'\n                        ].includes(prop)) continue;\n                        const rendererProp = prop;\n                        const rendererFunc = pack.renderer[rendererProp];\n                        const prevRenderer = renderer[rendererProp];\n                        // Replace renderer with func to run extension, but fall back if false\n                        renderer[rendererProp] = (...args)=>{\n                            let ret = rendererFunc.apply(renderer, args);\n                            if (ret === false) ret = prevRenderer.apply(renderer, args);\n                            return ret || '';\n                        };\n                    }\n                    opts.renderer = renderer;\n                }\n                if (pack.tokenizer) {\n                    const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                    for(const prop in pack.tokenizer){\n                        if (!(prop in tokenizer)) throw new Error(`tokenizer '${prop}' does not exist`);\n                        if ([\n                            'options',\n                            'rules',\n                            'lexer'\n                        ].includes(prop)) continue;\n                        const tokenizerProp = prop;\n                        const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                        const prevTokenizer = tokenizer[tokenizerProp];\n                        // Replace tokenizer with func to run extension, but fall back if false\n                        // @ts-expect-error cannot type tokenizer function dynamically\n                        tokenizer[tokenizerProp] = (...args)=>{\n                            let ret = tokenizerFunc.apply(tokenizer, args);\n                            if (ret === false) ret = prevTokenizer.apply(tokenizer, args);\n                            return ret;\n                        };\n                    }\n                    opts.tokenizer = tokenizer;\n                }\n                // ==-- Parse Hooks extensions --== //\n                if (pack.hooks) {\n                    const hooks = this.defaults.hooks || new _Hooks();\n                    for(const prop in pack.hooks){\n                        if (!(prop in hooks)) throw new Error(`hook '${prop}' does not exist`);\n                        if ([\n                            'options',\n                            'block'\n                        ].includes(prop)) continue;\n                        const hooksProp = prop;\n                        const hooksFunc = pack.hooks[hooksProp];\n                        const prevHook = hooks[hooksProp];\n                        if (_Hooks.passThroughHooks.has(prop)) // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg)=>{\n                            if (this.defaults.async) return Promise.resolve(hooksFunc.call(hooks, arg)).then((ret)=>{\n                                return prevHook.call(hooks, ret);\n                            });\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                        else // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args)=>{\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) ret = prevHook.apply(hooks, args);\n                            return ret;\n                        };\n                    }\n                    opts.hooks = hooks;\n                }\n                // ==-- Parse WalkTokens extensions --== //\n                if (pack.walkTokens) {\n                    const walkTokens = this.defaults.walkTokens;\n                    const packWalktokens = pack.walkTokens;\n                    opts.walkTokens = function(token) {\n                        let values = [];\n                        values.push(packWalktokens.call(this, token));\n                        if (walkTokens) values = values.concat(walkTokens.call(this, token));\n                        return values;\n                    };\n                }\n                this.defaults = {\n                    ...this.defaults,\n                    ...opts\n                };\n            });\n            return this;\n        }\n        setOptions(opt) {\n            this.defaults = {\n                ...this.defaults,\n                ...opt\n            };\n            return this;\n        }\n        lexer(src, options) {\n            return _Lexer.lex(src, options ?? this.defaults);\n        }\n        parser(tokens, options) {\n            return _Parser.parse(tokens, options ?? this.defaults);\n        }\n        parseMarkdown(blockType) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const parse = (src, options)=>{\n                const origOpt = {\n                    ...options\n                };\n                const opt = {\n                    ...this.defaults,\n                    ...origOpt\n                };\n                const throwError = this.onError(!!opt.silent, !!opt.async);\n                // throw error if an extension set async to true but parse was called with async: false\n                if (this.defaults.async === true && origOpt.async === false) return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n                // throw error in case of non string input\n                if (typeof src === 'undefined' || src === null) return throwError(new Error('marked(): input parameter is undefined or null'));\n                if (typeof src !== 'string') return throwError(new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected'));\n                if (opt.hooks) {\n                    opt.hooks.options = opt;\n                    opt.hooks.block = blockType;\n                }\n                const lexer = opt.hooks ? opt.hooks.provideLexer() : blockType ? _Lexer.lex : _Lexer.lexInline;\n                const parser = opt.hooks ? opt.hooks.provideParser() : blockType ? _Parser.parse : _Parser.parseInline;\n                if (opt.async) return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src)=>lexer(src, opt)).then((tokens)=>opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens).then((tokens)=>opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(()=>tokens) : tokens).then((tokens)=>parser(tokens, opt)).then((html)=>opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);\n                try {\n                    if (opt.hooks) src = opt.hooks.preprocess(src);\n                    let tokens = lexer(src, opt);\n                    if (opt.hooks) tokens = opt.hooks.processAllTokens(tokens);\n                    if (opt.walkTokens) this.walkTokens(tokens, opt.walkTokens);\n                    let html = parser(tokens, opt);\n                    if (opt.hooks) html = opt.hooks.postprocess(html);\n                    return html;\n                } catch (e) {\n                    return throwError(e);\n                }\n            };\n            return parse;\n        }\n        onError(silent, async) {\n            return (e)=>{\n                e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n                if (silent) {\n                    const msg = '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n                    if (async) return Promise.resolve(msg);\n                    return msg;\n                }\n                if (async) return Promise.reject(e);\n                throw e;\n            };\n        }\n    }\n    const markedInstance = new Marked();\n    function marked(src, opt) {\n        return markedInstance.parse(src, opt);\n    }\n    /**\n     * Sets the default options.\n     *\n     * @param options Hash of options\n     */ marked.options = marked.setOptions = function(options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n    /**\n     * Gets the original marked default options.\n     */ marked.getDefaults = _getDefaults;\n    marked.defaults = exports1.defaults;\n    /**\n     * Use Extension\n     */ marked.use = function(...args) {\n        markedInstance.use(...args);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n    /**\n     * Run callback for every token\n     */ marked.walkTokens = function(tokens, callback) {\n        return markedInstance.walkTokens(tokens, callback);\n    };\n    /**\n     * Compiles markdown to HTML without enclosing `p` tag.\n     *\n     * @param src String of markdown source to be compiled\n     * @param options Hash of options\n     * @return String of compiled HTML\n     */ marked.parseInline = markedInstance.parseInline;\n    /**\n     * Expose\n     */ marked.Parser = _Parser;\n    marked.parser = _Parser.parse;\n    marked.Renderer = _Renderer;\n    marked.TextRenderer = _TextRenderer;\n    marked.Lexer = _Lexer;\n    marked.lexer = _Lexer.lex;\n    marked.Tokenizer = _Tokenizer;\n    marked.Hooks = _Hooks;\n    marked.parse = marked;\n    const options = marked.options;\n    const setOptions = marked.setOptions;\n    const use = marked.use;\n    const walkTokens = marked.walkTokens;\n    const parseInline = marked.parseInline;\n    const parse = marked;\n    const parser = _Parser.parse;\n    const lexer = _Lexer.lex;\n    exports1.Hooks = _Hooks;\n    exports1.Lexer = _Lexer;\n    exports1.Marked = Marked;\n    exports1.Parser = _Parser;\n    exports1.Renderer = _Renderer;\n    exports1.TextRenderer = _TextRenderer;\n    exports1.Tokenizer = _Tokenizer;\n    exports1.getDefaults = _getDefaults;\n    exports1.lexer = lexer;\n    exports1.marked = marked;\n    exports1.options = options;\n    exports1.parse = parse;\n    exports1.parseInline = parseInline;\n    exports1.parser = parser;\n    exports1.setOptions = setOptions;\n    exports1.use = use;\n    exports1.walkTokens = walkTokens;\n});\n\n\nfunction $adcf363a09f534a1$var$e(e, t) {\n    for(var o = 0; o < t.length; o++){\n        var n = t[o];\n        n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n    }\n}\nfunction $adcf363a09f534a1$var$t(e) {\n    return function(e) {\n        if (Array.isArray(e)) return $adcf363a09f534a1$var$o(e);\n    }(e) || function(e) {\n        if (\"undefined\" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e);\n    }(e) || function(e, t) {\n        if (!e) return;\n        if (\"string\" == typeof e) return $adcf363a09f534a1$var$o(e, t);\n        var n = Object.prototype.toString.call(e).slice(8, -1);\n        \"Object\" === n && e.constructor && (n = e.constructor.name);\n        if (\"Map\" === n || \"Set\" === n) return Array.from(e);\n        if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return $adcf363a09f534a1$var$o(e, t);\n    }(e) || function() {\n        throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }();\n}\nfunction $adcf363a09f534a1$var$o(e, t) {\n    (null == t || t > e.length) && (t = e.length);\n    for(var o = 0, n = new Array(t); o < t; o++)n[o] = e[o];\n    return n;\n}\nvar $adcf363a09f534a1$var$n, $adcf363a09f534a1$var$i, $adcf363a09f534a1$var$a, $adcf363a09f534a1$var$r, $adcf363a09f534a1$var$s, $adcf363a09f534a1$var$l = ($adcf363a09f534a1$var$n = [\n    \"a[href]\",\n    \"area[href]\",\n    'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])',\n    \"select:not([disabled]):not([aria-hidden])\",\n    \"textarea:not([disabled]):not([aria-hidden])\",\n    \"button:not([disabled]):not([aria-hidden])\",\n    \"iframe\",\n    \"object\",\n    \"embed\",\n    \"[contenteditable]\",\n    '[tabindex]:not([tabindex^=\"-\"])'\n], $adcf363a09f534a1$var$i = function() {\n    function o(e) {\n        var n = e.targetModal, i = e.triggers, a = void 0 === i ? [] : i, r = e.onShow, s = void 0 === r ? function() {} : r, l = e.onClose, c = void 0 === l ? function() {} : l, d = e.openTrigger, u = void 0 === d ? \"data-micromodal-trigger\" : d, f = e.closeTrigger, h = void 0 === f ? \"data-micromodal-close\" : f, v = e.openClass, g = void 0 === v ? \"is-open\" : v, m = e.disableScroll, b = void 0 !== m && m, y = e.disableFocus, p = void 0 !== y && y, w = e.awaitCloseAnimation, E = void 0 !== w && w, k = e.awaitOpenAnimation, M = void 0 !== k && k, A = e.debugMode, C = void 0 !== A && A;\n        !function(e, t) {\n            if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, o), this.modal = \"string\" == typeof n ? document.getElementById(n) : n, this.config = {\n            debugMode: C,\n            disableScroll: b,\n            openTrigger: u,\n            closeTrigger: h,\n            openClass: g,\n            onShow: s,\n            onClose: c,\n            awaitCloseAnimation: E,\n            awaitOpenAnimation: M,\n            disableFocus: p\n        }, a.length > 0 && this.registerTriggers.apply(this, $adcf363a09f534a1$var$t(a)), this.onClick = this.onClick.bind(this), this.onKeydown = this.onKeydown.bind(this);\n    }\n    var i, a, r;\n    return i = o, a = [\n        {\n            key: \"registerTriggers\",\n            value: function() {\n                for(var e = this, t = arguments.length, o = new Array(t), n = 0; n < t; n++)o[n] = arguments[n];\n                o.filter(Boolean).forEach(function(t) {\n                    t.addEventListener(\"click\", function(t) {\n                        return e.showModal(t);\n                    });\n                });\n            }\n        },\n        {\n            key: \"showModal\",\n            value: function() {\n                var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n                if (this.activeElement = document.activeElement, this.modal.setAttribute(\"aria-hidden\", \"false\"), this.modal.classList.add(this.config.openClass), this.scrollBehaviour(\"disable\"), this.addEventListeners(), this.config.awaitOpenAnimation) {\n                    var o = function t() {\n                        e.modal.removeEventListener(\"animationend\", t, !1), e.setFocusToFirstNode();\n                    };\n                    this.modal.addEventListener(\"animationend\", o, !1);\n                } else this.setFocusToFirstNode();\n                this.config.onShow(this.modal, this.activeElement, t);\n            }\n        },\n        {\n            key: \"closeModal\",\n            value: function() {\n                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, t = this.modal;\n                if (this.modal.setAttribute(\"aria-hidden\", \"true\"), this.removeEventListeners(), this.scrollBehaviour(\"enable\"), this.activeElement && this.activeElement.focus && this.activeElement.focus(), this.config.onClose(this.modal, this.activeElement, e), this.config.awaitCloseAnimation) {\n                    var o = this.config.openClass;\n                    this.modal.addEventListener(\"animationend\", function e() {\n                        t.classList.remove(o), t.removeEventListener(\"animationend\", e, !1);\n                    }, !1);\n                } else t.classList.remove(this.config.openClass);\n            }\n        },\n        {\n            key: \"closeModalByIdOrElement\",\n            value: function(e) {\n                this.modal = \"string\" == typeof e ? document.getElementById(e) : e, this.modal && this.closeModal();\n            }\n        },\n        {\n            key: \"scrollBehaviour\",\n            value: function(e) {\n                if (this.config.disableScroll) {\n                    var t = document.querySelector(\"body\");\n                    switch(e){\n                        case \"enable\":\n                            Object.assign(t.style, {\n                                overflow: \"\"\n                            });\n                            break;\n                        case \"disable\":\n                            Object.assign(t.style, {\n                                overflow: \"hidden\"\n                            });\n                    }\n                }\n            }\n        },\n        {\n            key: \"addEventListeners\",\n            value: function() {\n                this.modal.addEventListener(\"touchstart\", this.onClick), this.modal.addEventListener(\"click\", this.onClick), document.addEventListener(\"keydown\", this.onKeydown);\n            }\n        },\n        {\n            key: \"removeEventListeners\",\n            value: function() {\n                this.modal.removeEventListener(\"touchstart\", this.onClick), this.modal.removeEventListener(\"click\", this.onClick), document.removeEventListener(\"keydown\", this.onKeydown);\n            }\n        },\n        {\n            key: \"onClick\",\n            value: function(e) {\n                (e.target.hasAttribute(this.config.closeTrigger) || e.target.parentNode.hasAttribute(this.config.closeTrigger)) && (e.preventDefault(), e.stopPropagation(), this.closeModal(e));\n            }\n        },\n        {\n            key: \"onKeydown\",\n            value: function(e) {\n                27 === e.keyCode && this.closeModal(e), 9 === e.keyCode && this.retainFocus(e);\n            }\n        },\n        {\n            key: \"getFocusableNodes\",\n            value: function() {\n                var e = this.modal.querySelectorAll($adcf363a09f534a1$var$n);\n                return Array.apply(void 0, $adcf363a09f534a1$var$t(e));\n            }\n        },\n        {\n            key: \"setFocusToFirstNode\",\n            value: function() {\n                var e = this;\n                if (!this.config.disableFocus) {\n                    var t = this.getFocusableNodes();\n                    if (0 !== t.length) {\n                        var o = t.filter(function(t) {\n                            return !t.hasAttribute(e.config.closeTrigger);\n                        });\n                        o.length > 0 && o[0].focus(), 0 === o.length && t[0].focus();\n                    }\n                }\n            }\n        },\n        {\n            key: \"retainFocus\",\n            value: function(e) {\n                var t = this.getFocusableNodes();\n                if (0 !== t.length) {\n                    if (t = t.filter(function(e) {\n                        return null !== e.offsetParent;\n                    }), this.modal.contains(document.activeElement)) {\n                        var o = t.indexOf(document.activeElement);\n                        e.shiftKey && 0 === o && (t[t.length - 1].focus(), e.preventDefault()), !e.shiftKey && t.length > 0 && o === t.length - 1 && (t[0].focus(), e.preventDefault());\n                    } else t[0].focus();\n                }\n            }\n        }\n    ], $adcf363a09f534a1$var$e(i.prototype, a), r && $adcf363a09f534a1$var$e(i, r), o;\n}(), $adcf363a09f534a1$var$a = null, $adcf363a09f534a1$var$r = function(e) {\n    if (\"string\" == typeof id ? !document.getElementById(e) : !e) return console.warn(\"MicroModal: \\u2757Seems like you have missed %c'\".concat(e, \"'\"), \"background-color: #f8f9fa;color: #50596c;font-weight: bold;\", \"ID somewhere in your code. Refer example below to resolve it.\"), console.warn(\"%cExample:\", \"background-color: #f8f9fa;color: #50596c;font-weight: bold;\", '<div class=\"modal\" id=\"'.concat(e, '\"></div>')), !1;\n}, $adcf363a09f534a1$var$s = function(e, t) {\n    if (function(e) {\n        e.length <= 0 && (console.warn(\"MicroModal: \\u2757Please specify at least one %c'micromodal-trigger'\", \"background-color: #f8f9fa;color: #50596c;font-weight: bold;\", \"data attribute.\"), console.warn(\"%cExample:\", \"background-color: #f8f9fa;color: #50596c;font-weight: bold;\", '<a href=\"#\" data-micromodal-trigger=\"my-modal\"></a>'));\n    }(e), !t) return !0;\n    for(var o in t)$adcf363a09f534a1$var$r(o);\n    return !0;\n}, {\n    init: function(e) {\n        var o = Object.assign({}, {\n            openTrigger: \"data-micromodal-trigger\"\n        }, e), n = $adcf363a09f534a1$var$t(document.querySelectorAll(\"[\".concat(o.openTrigger, \"]\"))), r = function(e, t) {\n            var o = [];\n            return e.forEach(function(e) {\n                var n = e.attributes[t].value;\n                void 0 === o[n] && (o[n] = []), o[n].push(e);\n            }), o;\n        }(n, o.openTrigger);\n        if (!0 !== o.debugMode || !1 !== $adcf363a09f534a1$var$s(n, r)) for(var l in r){\n            var c = r[l];\n            o.targetModal = l, o.triggers = $adcf363a09f534a1$var$t(c), $adcf363a09f534a1$var$a = new $adcf363a09f534a1$var$i(o);\n        }\n    },\n    show: function(e, t) {\n        var o = t || {};\n        o.targetModal = e, !0 === o.debugMode && !1 === $adcf363a09f534a1$var$r(e) || ($adcf363a09f534a1$var$a && $adcf363a09f534a1$var$a.removeEventListeners(), ($adcf363a09f534a1$var$a = new $adcf363a09f534a1$var$i(o)).showModal());\n    },\n    close: function(e) {\n        e ? $adcf363a09f534a1$var$a.closeModalByIdOrElement(e) : $adcf363a09f534a1$var$a.closeModal();\n    }\n});\n\"undefined\" != typeof window && (window.MicroModal = $adcf363a09f534a1$var$l);\nvar $adcf363a09f534a1$export$2e2bcd8739ae039 = $adcf363a09f534a1$var$l;\n\n\n// --- グローバル変数・定数 ---\nlet $b63be9b0371e788c$var$JINA_API_KEY = \"\";\nlet $b63be9b0371e788c$var$GEMINI_API_KEY = \"\";\nconst $b63be9b0371e788c$var$DEFAULT_SUMMARY_PROMPT = \"\\u4EE5\\u4E0B\\u306E\\u30E6\\u30FC\\u30B6\\u30FC\\u30EC\\u30D9\\u30EB\\u3068\\u6307\\u793A\\u306B\\u5F93\\u3044\\u3001\\u30DE\\u30FC\\u30AF\\u30C0\\u30A6\\u30F3\\u5F62\\u5F0F\\u3067\\u56DE\\u7B54\\u306E\\u307F\\u3092\\u751F\\u6210\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\\u524D\\u7F6E\\u304D\\u3084\\u5B9A\\u578B\\u7684\\u306A\\u6328\\u62F6\\u306F\\u4E0D\\u8981\\u3067\\u3059\\u3002\";\nconst $b63be9b0371e788c$var$GEMINI_MODEL = \"gemini-2.5-flash-preview-04-17\";\nconst $b63be9b0371e788c$var$SETTINGS_STORAGE_KEY = \"explaInfySettings\";\n// --- DOM要素のキャッシュ (ページロード時に一度だけ取得) ---\n// 主要なセクション\nconst $b63be9b0371e788c$var$urlInputSection = document.getElementById(\"url-input-section\");\nconst $b63be9b0371e788c$var$responseSection = document.getElementById(\"response-section\");\n// const settingsSection = document.getElementById(\"settings-section\"); // メインページ内の設定セクションは不要になったのでコメントアウト\n// URL入力関連\nconst $b63be9b0371e788c$var$urlTextarea = document.getElementById(\"url-input\");\nconst $b63be9b0371e788c$var$submitButton = document.getElementById(\"submit-button\");\n// 応答関連\nconst $b63be9b0371e788c$var$responseOutput = document.getElementById(\"response-output\");\nconst $b63be9b0371e788c$var$additionalQuestionTextarea = document.getElementById(\"additional-question-input\");\nconst $b63be9b0371e788c$var$submitAdditionalQuestionButton = document.getElementById(\"submit-additional-question-button\");\n// ヘッダー関連\nconst $b63be9b0371e788c$var$logoLink = document.getElementById(\"logo-link\");\nconst $b63be9b0371e788c$var$settingButton = document.getElementById(\"setting-button\");\n// モーダル関連\nconst $b63be9b0371e788c$var$modalGeminiApiKeyInput = document.getElementById(\"modal-gemini-api-key-input\");\nconst $b63be9b0371e788c$var$modalJinaApiKeyInput = document.getElementById(\"modal-jina-api-key-input\");\nconst $b63be9b0371e788c$var$saveModalSettingsButton = document.getElementById(\"save-modal-settings-button\");\nconst $b63be9b0371e788c$var$userLevelRadios = document.querySelectorAll('input[name=\"user-level-radio\"]');\nconst $b63be9b0371e788c$var$userLevelText = document.getElementById(\"user-level-text\");\nconst $b63be9b0371e788c$var$modalAdditionalPromptInput = document.getElementById(// IDを変更 (追加質問とモーダル内のものとを区別)\n\"modal-additional-prompt-input\");\nconst $b63be9b0371e788c$var$modalTabs = document.querySelectorAll(\".modal-tabs .tab-item\");\nconst $b63be9b0371e788c$var$tabContents = document.querySelectorAll(\".modal__content .tab-content\");\n// 履歴関連 (まだ本格的には使わないが、要素だけ取得しておく)\nconst $b63be9b0371e788c$var$historySidebar = document.getElementById(\"history-sidebar\");\nconst $b63be9b0371e788c$var$historyList = document.getElementById(\"history-list\");\n// --- 初期化処理 ---\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    $b63be9b0371e788c$var$loadSettings();\n    $b63be9b0371e788c$var$initializeModal();\n    $b63be9b0371e788c$var$initializeTextareaAutoHeight($b63be9b0371e788c$var$urlTextarea, 1);\n    $b63be9b0371e788c$var$initializeTextareaAutoHeight($b63be9b0371e788c$var$additionalQuestionTextarea, 1);\n    $b63be9b0371e788c$var$setupEventListeners();\n    $b63be9b0371e788c$var$showPage($b63be9b0371e788c$var$urlInputSection); // 初期表示\n});\n// --- 関数定義 ---\nfunction $b63be9b0371e788c$var$initializeModal() {\n    (0, $adcf363a09f534a1$export$2e2bcd8739ae039).init({\n        onShow: (modal)=>console.info(`${modal.id} is shown`),\n        onClose: (modal)=>console.info(`${modal.id} is hidden`),\n        disableScroll: true,\n        disableFocus: false,\n        awaitCloseAnimation: true\n    });\n}\nfunction $b63be9b0371e788c$var$initializeTextareaAutoHeight(textareaElement, initialRows) {\n    if (!textareaElement) return;\n    const lineHeight = parseFloat(getComputedStyle(textareaElement).lineHeight);\n    const initialHeight = lineHeight * initialRows;\n    textareaElement.style.height = `${initialHeight}px`;\n    textareaElement.addEventListener(\"input\", ()=>{\n        textareaElement.style.height = \"auto\";\n        let newHeight = textareaElement.scrollHeight;\n        if (newHeight > initialHeight) textareaElement.classList.add(\"expanded\");\n        else textareaElement.classList.remove(\"expanded\");\n        textareaElement.style.height = `${newHeight}px`;\n    });\n}\nfunction $b63be9b0371e788c$var$setupEventListeners() {\n    if ($b63be9b0371e788c$var$settingButton) $b63be9b0371e788c$var$settingButton.addEventListener(\"click\", ()=>{\n        $b63be9b0371e788c$var$loadSettingsToModal();\n        (0, $adcf363a09f534a1$export$2e2bcd8739ae039).show(\"modal-settings\");\n    });\n    if ($b63be9b0371e788c$var$saveModalSettingsButton) $b63be9b0371e788c$var$saveModalSettingsButton.addEventListener(\"click\", ()=>{\n        $b63be9b0371e788c$var$saveSettingsFromModal();\n    });\n    if ($b63be9b0371e788c$var$logoLink) $b63be9b0371e788c$var$logoLink.addEventListener(\"click\", (event)=>{\n        event.preventDefault();\n        $b63be9b0371e788c$var$showPage($b63be9b0371e788c$var$urlInputSection);\n    });\n    if ($b63be9b0371e788c$var$submitButton && $b63be9b0371e788c$var$urlTextarea) {\n        $b63be9b0371e788c$var$submitButton.addEventListener(\"click\", $b63be9b0371e788c$var$handleSubmit);\n        $b63be9b0371e788c$var$urlTextarea.addEventListener(\"keydown\", (event)=>{\n            // Ctrl + Enter (または Meta + Enter for Mac) で送信\n            if (event.key === \"Enter\" && (event.ctrlKey || event.metaKey)) {\n                event.preventDefault(); // デフォルトのEnterキーの動作（改行）をキャンセル\n                $b63be9b0371e788c$var$submitButton.click(); // 送信ボタンのクリックイベントを発火\n            }\n        // Enterキー単独の場合は、デフォルトの改行動作を許可するため、ここでは何もしない\n        });\n    }\n    if ($b63be9b0371e788c$var$submitAdditionalQuestionButton && $b63be9b0371e788c$var$additionalQuestionTextarea) $b63be9b0371e788c$var$additionalQuestionTextarea.addEventListener(\"keydown\", (event)=>{\n        // Ctrl + Enter (または Meta + Enter for Mac) で送信\n        if (event.key === \"Enter\" && (event.ctrlKey || event.metaKey)) {\n            event.preventDefault();\n            // submitAdditionalQuestionButton.click(); // 追加質問の送信処理 (後で実装)\n            console.log(\"\\u8FFD\\u52A0\\u8CEA\\u554F\\u9001\\u4FE1 (Ctrl+Enter):\", $b63be9b0371e788c$var$additionalQuestionTextarea.value); // 仮の処理\n        // ここで handleAdditionalQuestion() のような関数を呼び出す\n        }\n    // Enterキー単独の場合は、デフォルトの改行動作を許可\n    });\n    $b63be9b0371e788c$var$modalTabs.forEach((tab)=>{\n        tab.addEventListener(\"click\", ()=>{\n            $b63be9b0371e788c$var$modalTabs.forEach((t)=>t.classList.remove(\"active-tab\"));\n            $b63be9b0371e788c$var$tabContents.forEach((c)=>c.classList.remove(\"active-tab-content\"));\n            tab.classList.add(\"active-tab\");\n            const targetContentId = tab.dataset.tabTarget;\n            document.querySelector(targetContentId).classList.add(\"active-tab-content\");\n        });\n    });\n}\nfunction $b63be9b0371e788c$var$showPage(pageToShow) {\n    // まず全てのメインページセクションを非表示にする\n    $b63be9b0371e788c$var$urlInputSection.classList.remove(\"active\");\n    $b63be9b0371e788c$var$responseSection.classList.remove(\"active\");\n    // 指定されたページセクションを表示\n    if (pageToShow) pageToShow.classList.add(\"active\");\n    if ($b63be9b0371e788c$var$logoLink) {\n        if (pageToShow && pageToShow.id === \"url-input-section\") $b63be9b0371e788c$var$logoLink.classList.add(\"hidden-on-main\");\n        else $b63be9b0371e788c$var$logoLink.classList.remove(\"hidden-on-main\");\n    }\n}\nasync function $b63be9b0371e788c$var$handleSubmit() {\n    // submitButtonの処理を関数に分離\n    const urlToProcess = $b63be9b0371e788c$var$urlTextarea.value.trim();\n    if (!urlToProcess) {\n        alert(\"URL\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\");\n        return;\n    }\n    $b63be9b0371e788c$var$responseOutput.innerHTML = \"<p>\\u51E6\\u7406\\u4E2D...</p>\";\n    $b63be9b0371e788c$var$showPage($b63be9b0371e788c$var$responseSection);\n    try {\n        const articleData = await $b63be9b0371e788c$var$fetchArticleContent(urlToProcess);\n        if (!articleData || !articleData.content) {\n            $b63be9b0371e788c$var$responseOutput.innerHTML = \"<p>\\u8A18\\u4E8B\\u306E\\u672C\\u6587\\u3092\\u53D6\\u5F97\\u3067\\u304D\\u307E\\u305B\\u3093\\u3067\\u3057\\u305F\\u3002</p>\";\n            return;\n        }\n        const articleContent = articleData.content;\n        const articleTitle = articleData.title || \"\\u8AAC\\u660E\\u7D50\\u679C\"; // titleがなければデフォルト\n        document.querySelector(\"#response-section h2\").textContent = articleTitle; // タイトルを設定\n        const markdownSummary = await $b63be9b0371e788c$var$summarizeTextWithGemini(articleContent);\n        if (markdownSummary) {\n            const dirtyHtml = (0, $d55025bea272cdc1$exports.marked).parse(markdownSummary);\n            const cleanHtml = (0, (/*@__PURE__*/$parcel$interopDefault($d349326c2b62c55f$exports))).sanitize(dirtyHtml);\n            $b63be9b0371e788c$var$responseOutput.innerHTML = cleanHtml;\n        } else $b63be9b0371e788c$var$responseOutput.innerHTML = \"<p>\\u8981\\u7D04\\u3092\\u53D6\\u5F97\\u3067\\u304D\\u307E\\u305B\\u3093\\u3067\\u3057\\u305F\\u3002</p>\";\n    } catch (error) {\n        console.error(\"\\u51E6\\u7406\\u4E2D\\u306B\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F:\", error);\n        $b63be9b0371e788c$var$responseOutput.innerHTML = `<p>\\u{30A8}\\u{30E9}\\u{30FC}\\u{304C}\\u{767A}\\u{751F}\\u{3057}\\u{307E}\\u{3057}\\u{305F}: ${error.message}</p>`;\n    }\n}\nasync function $b63be9b0371e788c$var$fetchArticleContent(url) {\n    // Jina AI Reader API (jina.ai/reader) は GET リクエストで URL を `https://r.jina.ai/` の後に続ける\n    // ヘッダーに Authorization: Bearer YOUR_JINA_API_KEY が必要\n    const readerApiUrl = `https://r.jina.ai/${url}`;\n    console.log(`Fetching content from: ${readerApiUrl}`); // デバッグ用\n    const response = await fetch(readerApiUrl, {\n        method: \"GET\",\n        headers: {\n            Authorization: `Bearer ${$b63be9b0371e788c$var$JINA_API_KEY}`,\n            Accept: \"application/json\"\n        }\n    });\n    if (!response.ok) {\n        const errorData = await response.json().catch(()=>({\n                message: response.statusText\n            }));\n        console.error(\"Jina API Error:\", errorData); // デバッグ用\n        throw new Error(`Jina API\\u{304B}\\u{3089}\\u{306E}\\u{30B3}\\u{30F3}\\u{30C6}\\u{30F3}\\u{30C4}\\u{53D6}\\u{5F97}\\u{306B}\\u{5931}\\u{6557}\\u{3057}\\u{307E}\\u{3057}\\u{305F}: ${errorData.message || response.status}`);\n    }\n    const data = await response.json();\n    console.log(\"Jina API Response Data:\", data); // デバッグ用\n    // Jina Reader APIのレスポンス構造に合わせて本文を取得する\n    // 通常、data.data.content や data.content などに本文が含まれるはず\n    // ここでは仮に data.data.content とする\n    if (data && data.data && data.data.content) return data.data;\n    else {\n        console.warn(\"Jina API did not return expected content structure.\");\n        return null; // または適切なエラー処理\n    }\n}\nasync function $b63be9b0371e788c$var$summarizeTextWithGemini(textToSummarize) {\n    const savedSettings = JSON.parse(localStorage.getItem($b63be9b0371e788c$var$SETTINGS_STORAGE_KEY) || \"{}\");\n    let finalPrompt = $b63be9b0371e788c$var$DEFAULT_SUMMARY_PROMPT; // 基本プロンプト\n    // ユーザーレベルに応じたプロンプト調整\n    if (savedSettings.userLevel) {\n        let levelDescription = \"\";\n        switch(savedSettings.userLevel){\n            case 1:\n                levelDescription = \"\\u79C1\\u306F\\u30D7\\u30ED\\u30B0\\u30E9\\u30DF\\u30F3\\u30B0\\u5B8C\\u5168\\u521D\\u5B66\\u8005\\u3067\\u3059\\u3002\";\n                break;\n            case 2:\n                levelDescription = \"\\u79C1\\u306F\\u30D7\\u30ED\\u30B0\\u30E9\\u30DF\\u30F3\\u30B0\\u521D\\u5B66\\u8005\\u3067\\u3059\\u3002\";\n                break;\n            case 3:\n                levelDescription = \"\\u79C1\\u306F\\u30D7\\u30ED\\u30B0\\u30E9\\u30DF\\u30F3\\u30B0\\u4E2D\\u7D1A\\u8005\\u3067\\u3059\\u3002\";\n                break;\n            case 4:\n                levelDescription = \"\\u79C1\\u306F\\u30D7\\u30ED\\u30B0\\u30E9\\u30DF\\u30F3\\u30B0\\u4E0A\\u7D1A\\u8005\\u3067\\u3059\\u3002\";\n                break;\n            case 5:\n                levelDescription = \"\\u79C1\\u306F\\u975E\\u5E38\\u306B\\u7D4C\\u9A13\\u8C4A\\u5BCC\\u306A\\u30D7\\u30ED\\u30B0\\u30E9\\u30DF\\u30F3\\u30B0\\u30A8\\u30AD\\u30B9\\u30D1\\u30FC\\u30C8\\u3067\\u3059\\u3002\";\n                break;\n        }\n        if (levelDescription) finalPrompt += `\\n${levelDescription}`;\n    }\n    if (savedSettings.userLevelText) finalPrompt += `\n\\u{30E6}\\u{30FC}\\u{30B6}\\u{30FC}\\u{306E}\\u{81EA}\\u{5DF1}\\u{7533}\\u{544A}\\u{30EC}\\u{30D9}\\u{30EB}: ${savedSettings.userLevelText}`;\n    // 追加プロンプト\n    if (savedSettings.additionalPrompt) finalPrompt += `\n\\u{8FFD}\\u{52A0}\\u{306E}\\u{6307}\\u{793A}: ${savedSettings.additionalPrompt}`;\n    const geminiApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${$b63be9b0371e788c$var$GEMINI_MODEL}:generateContent?key=${$b63be9b0371e788c$var$GEMINI_API_KEY}`;\n    const requestBody = {\n        contents: [\n            {\n                parts: [\n                    {\n                        text: `${finalPrompt}\\n\\n${textToSummarize}`\n                    }\n                ]\n            }\n        ]\n    };\n    const response = await fetch(geminiApiUrl, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestBody)\n    });\n    if (!response.ok) {\n        const errorData = await response.json().catch(()=>({\n                message: response.statusText\n            }));\n        console.error(\"Gemini API Error:\", errorData);\n        throw new Error(`Gemini API\\u{304B}\\u{3089}\\u{306E}\\u{8981}\\u{7D04}\\u{53D6}\\u{5F97}\\u{306B}\\u{5931}\\u{6557}\\u{3057}\\u{307E}\\u{3057}\\u{305F}: ${errorData.error ? errorData.error.message : response.status}`);\n    }\n    const data = await response.json();\n    console.log(\"Gemini API Response Data:\", data); // デバッグ用\n    // Gemini APIのレスポンス構造に合わせて要約テキストを取得\n    // 通常、data.candidates[0].content.parts[0].text に含まれるっぽい。\n    if (data.candidates && data.candidates.length > 0 && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts.length > 0) return data.candidates[0].content.parts[0].text;\n    else {\n        console.warn(\"Gemini API did not return expected summary structure.\");\n        return \"\\u8981\\u7D04\\u3092\\u53D6\\u5F97\\u3067\\u304D\\u307E\\u305B\\u3093\\u3067\\u3057\\u305F\\u3002\";\n    }\n}\n// --- 設定関連の関数 ---\nfunction $b63be9b0371e788c$var$loadSettings() {\n    const savedSettings = localStorage.getItem($b63be9b0371e788c$var$SETTINGS_STORAGE_KEY);\n    if (savedSettings) {\n        const settings = JSON.parse(savedSettings);\n        $b63be9b0371e788c$var$JINA_API_KEY = settings.jinaApiKey || \"\"; // デフォルト値\n        $b63be9b0371e788c$var$GEMINI_API_KEY = settings.geminiApiKey || \"\"; // デフォルト値\n        console.log(\"\\u8A2D\\u5B9A\\u3092\\u8AAD\\u307F\\u8FBC\\u307F\\u307E\\u3057\\u305F:\", settings);\n    } else console.log(\"\\u4FDD\\u5B58\\u3055\\u308C\\u305F\\u8A2D\\u5B9A\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093\\u3002\\u30C7\\u30D5\\u30A9\\u30EB\\u30C8\\u5024\\u3092\\u4F7F\\u7528\\u3057\\u307E\\u3059\\u3002\");\n    // APIキーが空の場合のハンドリングをAPI呼び出し前に追加する方が良いかも\n    if (!$b63be9b0371e788c$var$JINA_API_KEY || !$b63be9b0371e788c$var$GEMINI_API_KEY) console.warn(\"API\\u30AD\\u30FC\\u304C\\u8A2D\\u5B9A\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\\u3002\\u8A2D\\u5B9A\\u753B\\u9762\\u304B\\u3089\\u8A2D\\u5B9A\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\");\n}\nfunction $b63be9b0371e788c$var$loadSettingsToModal() {\n    const savedSettings = localStorage.getItem($b63be9b0371e788c$var$SETTINGS_STORAGE_KEY);\n    if (savedSettings) {\n        const settings = JSON.parse(savedSettings);\n        $b63be9b0371e788c$var$modalGeminiApiKeyInput.value = settings.geminiApiKey || \"\";\n        $b63be9b0371e788c$var$modalJinaApiKeyInput.value = settings.jinaApiKey || \"\";\n        const savedLevelRadio = Array.from($b63be9b0371e788c$var$userLevelRadios).find((radio)=>radio.value === String(settings.userLevel));\n        if (savedLevelRadio) savedLevelRadio.checked = true;\n        else $b63be9b0371e788c$var$userLevelRadios[0].checked = true;\n        $b63be9b0371e788c$var$userLevelText.value = settings.userLevelText || \"\";\n        if ($b63be9b0371e788c$var$modalAdditionalPromptInput) // 要素が存在するか確認\n        $b63be9b0371e788c$var$modalAdditionalPromptInput.value = settings.additionalPrompt || \"\";\n    } else {\n        $b63be9b0371e788c$var$modalGeminiApiKeyInput.value = $b63be9b0371e788c$var$GEMINI_API_KEY;\n        $b63be9b0371e788c$var$modalJinaApiKeyInput.value = $b63be9b0371e788c$var$JINA_API_KEY;\n        $b63be9b0371e788c$var$userLevelRadios[0].checked = true;\n        $b63be9b0371e788c$var$userLevelText.value = \"\";\n        if ($b63be9b0371e788c$var$modalAdditionalPromptInput) $b63be9b0371e788c$var$modalAdditionalPromptInput.value = \"\";\n    }\n}\nfunction $b63be9b0371e788c$var$saveSettingsFromModal() {\n    let selectedLevel = \"1\"; // デフォルト\n    $b63be9b0371e788c$var$userLevelRadios.forEach((radio)=>{\n        if (radio.checked) selectedLevel = radio.value;\n    });\n    const settings = {\n        geminiApiKey: $b63be9b0371e788c$var$modalGeminiApiKeyInput.value.trim(),\n        jinaApiKey: $b63be9b0371e788c$var$modalJinaApiKeyInput.value.trim(),\n        userLevel: parseInt(selectedLevel, 10),\n        userLevelText: $b63be9b0371e788c$var$userLevelText.value.trim(),\n        additionalPrompt: $b63be9b0371e788c$var$modalAdditionalPromptInput.value.trim()\n    };\n    localStorage.setItem($b63be9b0371e788c$var$SETTINGS_STORAGE_KEY, JSON.stringify(settings));\n    console.log(\"\\u8A2D\\u5B9A\\u3092\\u4FDD\\u5B58\\u3057\\u307E\\u3057\\u305F:\", settings);\n    $b63be9b0371e788c$var$loadSettings(); // 保存後すぐに設定を再読み込みして適用\n    alert(\"\\u8A2D\\u5B9A\\u3092\\u4FDD\\u5B58\\u3057\\u307E\\u3057\\u305F\\u3002\"); // ユーザーへのフィードバック\n}\n\n\n//# sourceMappingURL=explainfy-project.32ac7697.js.map\n","import DOMPurify from \"dompurify\";\nimport { marked } from \"marked\";\nimport MicroModal from \"micromodal\";\n\n// --- グローバル変数・定数 ---\nlet JINA_API_KEY = \"\";\nlet GEMINI_API_KEY = \"\";\nconst DEFAULT_SUMMARY_PROMPT =\n  \"以下のユーザーレベルと指示に従い、マークダウン形式で回答のみを生成してください。前置きや定型的な挨拶は不要です。\";\nconst GEMINI_MODEL = \"gemini-2.5-flash-preview-04-17\";\nconst SETTINGS_STORAGE_KEY = \"explaInfySettings\";\n\n// --- DOM要素のキャッシュ (ページロード時に一度だけ取得) ---\n// 主要なセクション\nconst urlInputSection = document.getElementById(\"url-input-section\");\nconst responseSection = document.getElementById(\"response-section\");\n// const settingsSection = document.getElementById(\"settings-section\"); // メインページ内の設定セクションは不要になったのでコメントアウト\n\n// URL入力関連\nconst urlTextarea = document.getElementById(\"url-input\");\nconst submitButton = document.getElementById(\"submit-button\");\n\n// 応答関連\nconst responseOutput = document.getElementById(\"response-output\");\nconst additionalQuestionTextarea = document.getElementById(\n  \"additional-question-input\"\n);\nconst submitAdditionalQuestionButton = document.getElementById(\n  \"submit-additional-question-button\"\n);\n\n// ヘッダー関連\nconst logoLink = document.getElementById(\"logo-link\");\nconst settingButton = document.getElementById(\"setting-button\");\n\n// モーダル関連\nconst modalGeminiApiKeyInput = document.getElementById(\n  \"modal-gemini-api-key-input\"\n);\nconst modalJinaApiKeyInput = document.getElementById(\n  \"modal-jina-api-key-input\"\n);\nconst saveModalSettingsButton = document.getElementById(\n  \"save-modal-settings-button\"\n);\nconst userLevelRadios = document.querySelectorAll(\n  'input[name=\"user-level-radio\"]'\n);\nconst userLevelText = document.getElementById(\"user-level-text\");\nconst modalAdditionalPromptInput = document.getElementById(\n  // IDを変更 (追加質問とモーダル内のものとを区別)\n  \"modal-additional-prompt-input\"\n);\nconst modalTabs = document.querySelectorAll(\".modal-tabs .tab-item\");\nconst tabContents = document.querySelectorAll(\".modal__content .tab-content\");\n\n// 履歴関連 (まだ本格的には使わないが、要素だけ取得しておく)\nconst historySidebar = document.getElementById(\"history-sidebar\");\nconst historyList = document.getElementById(\"history-list\");\n\n// --- 初期化処理 ---\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  loadSettings();\n  initializeModal();\n  initializeTextareaAutoHeight(urlTextarea, 1);\n  initializeTextareaAutoHeight(additionalQuestionTextarea, 1);\n  setupEventListeners();\n  showPage(urlInputSection); // 初期表示\n});\n// --- 関数定義 ---\n\nfunction initializeModal() {\n  MicroModal.init({\n    onShow: (modal) => console.info(`${modal.id} is shown`),\n    onClose: (modal) => console.info(`${modal.id} is hidden`),\n    disableScroll: true,\n    disableFocus: false,\n    awaitCloseAnimation: true,\n  });\n}\n\nfunction initializeTextareaAutoHeight(textareaElement, initialRows) {\n  if (!textareaElement) return;\n\n  const lineHeight = parseFloat(getComputedStyle(textareaElement).lineHeight);\n  const initialHeight = lineHeight * initialRows;\n  textareaElement.style.height = `${initialHeight}px`;\n\n  textareaElement.addEventListener(\"input\", () => {\n    textareaElement.style.height = \"auto\";\n    let newHeight = textareaElement.scrollHeight;\n\n    if (newHeight > initialHeight) {\n      textareaElement.classList.add(\"expanded\");\n    } else {\n      textareaElement.classList.remove(\"expanded\");\n    }\n    textareaElement.style.height = `${newHeight}px`;\n  });\n}\n\nfunction setupEventListeners() {\n  if (settingButton) {\n    settingButton.addEventListener(\"click\", () => {\n      loadSettingsToModal();\n      MicroModal.show(\"modal-settings\");\n    });\n  }\n\n  if (saveModalSettingsButton) {\n    saveModalSettingsButton.addEventListener(\"click\", () => {\n      saveSettingsFromModal();\n    });\n  }\n\n  if (logoLink) {\n    logoLink.addEventListener(\"click\", (event) => {\n      event.preventDefault();\n      showPage(urlInputSection);\n    });\n  }\n\n  if (submitButton && urlTextarea) {\n    submitButton.addEventListener(\"click\", handleSubmit);\n    urlTextarea.addEventListener(\"keydown\", (event) => {\n      // Ctrl + Enter (または Meta + Enter for Mac) で送信\n      if (event.key === \"Enter\" && (event.ctrlKey || event.metaKey)) {\n        event.preventDefault(); // デフォルトのEnterキーの動作（改行）をキャンセル\n        submitButton.click(); // 送信ボタンのクリックイベントを発火\n      }\n      // Enterキー単独の場合は、デフォルトの改行動作を許可するため、ここでは何もしない\n    });\n  }\n\n  if (submitAdditionalQuestionButton && additionalQuestionTextarea) {\n    additionalQuestionTextarea.addEventListener(\"keydown\", (event) => {\n      // Ctrl + Enter (または Meta + Enter for Mac) で送信\n      if (event.key === \"Enter\" && (event.ctrlKey || event.metaKey)) {\n        event.preventDefault();\n        // submitAdditionalQuestionButton.click(); // 追加質問の送信処理 (後で実装)\n        console.log(\n          \"追加質問送信 (Ctrl+Enter):\",\n          additionalQuestionTextarea.value\n        ); // 仮の処理\n        // ここで handleAdditionalQuestion() のような関数を呼び出す\n      }\n      // Enterキー単独の場合は、デフォルトの改行動作を許可\n    });\n    // submitAdditionalQuestionButton.addEventListener('click', handleAdditionalQuestion); // 後で実装\n  }\n\n  modalTabs.forEach((tab) => {\n    tab.addEventListener(\"click\", () => {\n      modalTabs.forEach((t) => t.classList.remove(\"active-tab\"));\n      tabContents.forEach((c) => c.classList.remove(\"active-tab-content\"));\n      tab.classList.add(\"active-tab\");\n      const targetContentId = tab.dataset.tabTarget;\n      document\n        .querySelector(targetContentId)\n        .classList.add(\"active-tab-content\");\n    });\n  });\n}\n\nfunction showPage(pageToShow) {\n  // まず全てのメインページセクションを非表示にする\n  urlInputSection.classList.remove(\"active\");\n  responseSection.classList.remove(\"active\");\n\n  // 指定されたページセクションを表示\n  if (pageToShow) {\n    pageToShow.classList.add(\"active\");\n  }\n\n  if (logoLink) {\n    if (pageToShow && pageToShow.id === \"url-input-section\") {\n      logoLink.classList.add(\"hidden-on-main\");\n    } else {\n      logoLink.classList.remove(\"hidden-on-main\");\n    }\n  }\n}\n\nasync function handleSubmit() {\n  // submitButtonの処理を関数に分離\n  const urlToProcess = urlTextarea.value.trim();\n  if (!urlToProcess) {\n    alert(\"URLを入力してください。\");\n    return;\n  }\n\n  responseOutput.innerHTML = \"<p>処理中...</p>\";\n  showPage(responseSection);\n\n  try {\n    const articleData = await fetchArticleContent(urlToProcess);\n    if (!articleData || !articleData.content) {\n      responseOutput.innerHTML = \"<p>記事の本文を取得できませんでした。</p>\";\n      return;\n    }\n    const articleContent = articleData.content;\n    const articleTitle = articleData.title || \"説明結果\"; // titleがなければデフォルト\n\n    document.querySelector(\"#response-section h2\").textContent = articleTitle; // タイトルを設定\n    const markdownSummary = await summarizeTextWithGemini(articleContent);\n    if (markdownSummary) {\n      const dirtyHtml = marked.parse(markdownSummary);\n      const cleanHtml = DOMPurify.sanitize(dirtyHtml);\n      responseOutput.innerHTML = cleanHtml;\n    } else {\n      responseOutput.innerHTML = \"<p>要約を取得できませんでした。</p>\";\n    }\n  } catch (error) {\n    console.error(\"処理中にエラーが発生しました:\", error);\n    responseOutput.innerHTML = `<p>エラーが発生しました: ${error.message}</p>`;\n  }\n}\n\nasync function fetchArticleContent(url) {\n  // Jina AI Reader API (jina.ai/reader) は GET リクエストで URL を `https://r.jina.ai/` の後に続ける\n  // ヘッダーに Authorization: Bearer YOUR_JINA_API_KEY が必要\n  const readerApiUrl = `https://r.jina.ai/${url}`;\n  console.log(`Fetching content from: ${readerApiUrl}`); // デバッグ用\n\n  const response = await fetch(readerApiUrl, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${JINA_API_KEY}`,\n      Accept: \"application/json\", // JSON形式で結果を受け取ることを期待 (API仕様的に多分行ける)\n    },\n  });\n\n  if (!response.ok) {\n    const errorData = await response\n      .json()\n      .catch(() => ({ message: response.statusText }));\n    console.error(\"Jina API Error:\", errorData); // デバッグ用\n    throw new Error(\n      `Jina APIからのコンテンツ取得に失敗しました: ${errorData.message || response.status}`\n    );\n  }\n\n  const data = await response.json();\n  console.log(\"Jina API Response Data:\", data); // デバッグ用\n  // Jina Reader APIのレスポンス構造に合わせて本文を取得する\n  // 通常、data.data.content や data.content などに本文が含まれるはず\n  // ここでは仮に data.data.content とする\n  if (data && data.data && data.data.content) {\n    return data.data;\n  } else {\n    console.warn(\"Jina API did not return expected content structure.\");\n    return null; // または適切なエラー処理\n  }\n}\n\nasync function summarizeTextWithGemini(textToSummarize) {\n  const savedSettings = JSON.parse(\n    localStorage.getItem(SETTINGS_STORAGE_KEY) || \"{}\"\n  );\n  let finalPrompt = DEFAULT_SUMMARY_PROMPT; // 基本プロンプト\n\n  // ユーザーレベルに応じたプロンプト調整\n  if (savedSettings.userLevel) {\n    let levelDescription = \"\";\n    switch (savedSettings.userLevel) {\n      case 1:\n        levelDescription = \"私はプログラミング完全初学者です。\";\n        break;\n      case 2:\n        levelDescription = \"私はプログラミング初学者です。\";\n        break;\n      case 3:\n        levelDescription = \"私はプログラミング中級者です。\";\n        break;\n      case 4:\n        levelDescription = \"私はプログラミング上級者です。\";\n        break;\n      case 5:\n        levelDescription =\n          \"私は非常に経験豊富なプログラミングエキスパートです。\";\n        break;\n    }\n    if (levelDescription) {\n      finalPrompt += `\\n${levelDescription}`;\n    }\n  }\n  if (savedSettings.userLevelText) {\n    finalPrompt += `\\nユーザーの自己申告レベル: ${savedSettings.userLevelText}`;\n  }\n  // 追加プロンプト\n  if (savedSettings.additionalPrompt) {\n    finalPrompt += `\\n追加の指示: ${savedSettings.additionalPrompt}`;\n  }\n\n  const geminiApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent?key=${GEMINI_API_KEY}`;\n\n  const requestBody = {\n    contents: [\n      {\n        parts: [\n          {\n            text: `${finalPrompt}\\n\\n${textToSummarize}`, // プロンプトと本文を結合\n          },\n        ],\n      },\n    ],\n    // generationConfig や safetySettings も必要に応じて追加➝多分期間内には無理\n  };\n\n  const response = await fetch(geminiApiUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(requestBody),\n  });\n\n  if (!response.ok) {\n    const errorData = await response\n      .json()\n      .catch(() => ({ message: response.statusText }));\n    console.error(\"Gemini API Error:\", errorData);\n    throw new Error(\n      `Gemini APIからの要約取得に失敗しました: ${errorData.error ? errorData.error.message : response.status}`\n    );\n  }\n\n  const data = await response.json();\n  console.log(\"Gemini API Response Data:\", data); // デバッグ用\n\n  // Gemini APIのレスポンス構造に合わせて要約テキストを取得\n  // 通常、data.candidates[0].content.parts[0].text に含まれるっぽい。\n  if (\n    data.candidates &&\n    data.candidates.length > 0 &&\n    data.candidates[0].content &&\n    data.candidates[0].content.parts &&\n    data.candidates[0].content.parts.length > 0\n  ) {\n    return data.candidates[0].content.parts[0].text;\n  } else {\n    console.warn(\"Gemini API did not return expected summary structure.\");\n    return \"要約を取得できませんでした。\";\n  }\n}\n// --- 設定関連の関数 ---\nfunction loadSettings() {\n  const savedSettings = localStorage.getItem(SETTINGS_STORAGE_KEY);\n  if (savedSettings) {\n    const settings = JSON.parse(savedSettings);\n    JINA_API_KEY = settings.jinaApiKey || \"\"; // デフォルト値\n    GEMINI_API_KEY = settings.geminiApiKey || \"\"; // デフォルト値\n    console.log(\"設定を読み込みました:\", settings);\n  } else {\n    console.log(\"保存された設定はありません。デフォルト値を使用します。\");\n  }\n  // APIキーが空の場合のハンドリングをAPI呼び出し前に追加する方が良いかも\n  if (!JINA_API_KEY || !GEMINI_API_KEY) {\n    console.warn(\"APIキーが設定されていません。設定画面から設定してください。\");\n    // 必要であれば、ユーザーに通知するUIを表示\n  }\n}\n\nfunction loadSettingsToModal() {\n  const savedSettings = localStorage.getItem(SETTINGS_STORAGE_KEY);\n  if (savedSettings) {\n    const settings = JSON.parse(savedSettings);\n    modalGeminiApiKeyInput.value = settings.geminiApiKey || \"\";\n    modalJinaApiKeyInput.value = settings.jinaApiKey || \"\";\n    const savedLevelRadio = Array.from(userLevelRadios).find(\n      (radio) => radio.value === String(settings.userLevel)\n    );\n    if (savedLevelRadio) savedLevelRadio.checked = true;\n    else userLevelRadios[0].checked = true;\n    userLevelText.value = settings.userLevelText || \"\";\n    if (modalAdditionalPromptInput) {\n      // 要素が存在するか確認\n      modalAdditionalPromptInput.value = settings.additionalPrompt || \"\";\n    }\n  } else {\n    modalGeminiApiKeyInput.value = GEMINI_API_KEY;\n    modalJinaApiKeyInput.value = JINA_API_KEY;\n    userLevelRadios[0].checked = true;\n    userLevelText.value = \"\";\n    if (modalAdditionalPromptInput) modalAdditionalPromptInput.value = \"\";\n  }\n}\n\nfunction saveSettingsFromModal() {\n  let selectedLevel = \"1\"; // デフォルト\n  userLevelRadios.forEach((radio) => {\n    if (radio.checked) {\n      selectedLevel = radio.value;\n    }\n  });\n\n  const settings = {\n    geminiApiKey: modalGeminiApiKeyInput.value.trim(),\n    jinaApiKey: modalJinaApiKeyInput.value.trim(),\n    userLevel: parseInt(selectedLevel, 10),\n    userLevelText: userLevelText.value.trim(),\n    additionalPrompt: modalAdditionalPromptInput.value.trim(),\n  };\n  localStorage.setItem(SETTINGS_STORAGE_KEY, JSON.stringify(settings));\n  console.log(\"設定を保存しました:\", settings);\n  loadSettings(); // 保存後すぐに設定を再読み込みして適用\n  alert(\"設定を保存しました。\"); // ユーザーへのフィードバック\n}\n","/*! @license DOMPurify 3.2.5 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.5/LICENSE */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.DOMPurify = factory());\n})(this, (function () { 'use strict';\n\n  const {\n    entries,\n    setPrototypeOf,\n    isFrozen,\n    getPrototypeOf,\n    getOwnPropertyDescriptor\n  } = Object;\n  let {\n    freeze,\n    seal,\n    create\n  } = Object; // eslint-disable-line import/no-mutable-exports\n  let {\n    apply,\n    construct\n  } = typeof Reflect !== 'undefined' && Reflect;\n  if (!freeze) {\n    freeze = function freeze(x) {\n      return x;\n    };\n  }\n  if (!seal) {\n    seal = function seal(x) {\n      return x;\n    };\n  }\n  if (!apply) {\n    apply = function apply(fun, thisValue, args) {\n      return fun.apply(thisValue, args);\n    };\n  }\n  if (!construct) {\n    construct = function construct(Func, args) {\n      return new Func(...args);\n    };\n  }\n  const arrayForEach = unapply(Array.prototype.forEach);\n  const arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);\n  const arrayPop = unapply(Array.prototype.pop);\n  const arrayPush = unapply(Array.prototype.push);\n  const arraySplice = unapply(Array.prototype.splice);\n  const stringToLowerCase = unapply(String.prototype.toLowerCase);\n  const stringToString = unapply(String.prototype.toString);\n  const stringMatch = unapply(String.prototype.match);\n  const stringReplace = unapply(String.prototype.replace);\n  const stringIndexOf = unapply(String.prototype.indexOf);\n  const stringTrim = unapply(String.prototype.trim);\n  const objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);\n  const regExpTest = unapply(RegExp.prototype.test);\n  const typeErrorCreate = unconstruct(TypeError);\n  /**\n   * Creates a new function that calls the given function with a specified thisArg and arguments.\n   *\n   * @param func - The function to be wrapped and called.\n   * @returns A new function that calls the given function with a specified thisArg and arguments.\n   */\n  function unapply(func) {\n    return function (thisArg) {\n      if (thisArg instanceof RegExp) {\n        thisArg.lastIndex = 0;\n      }\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return apply(func, thisArg, args);\n    };\n  }\n  /**\n   * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n   *\n   * @param func - The constructor function to be wrapped and called.\n   * @returns A new function that constructs an instance of the given constructor function with the provided arguments.\n   */\n  function unconstruct(func) {\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return construct(func, args);\n    };\n  }\n  /**\n   * Add properties to a lookup table\n   *\n   * @param set - The set to which elements will be added.\n   * @param array - The array containing elements to be added to the set.\n   * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n   * @returns The modified set with added elements.\n   */\n  function addToSet(set, array) {\n    let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;\n    if (setPrototypeOf) {\n      // Make 'in' and truthy checks like Boolean(set.constructor)\n      // independent of any properties defined on Object.prototype.\n      // Prevent prototype setters from intercepting set as a this value.\n      setPrototypeOf(set, null);\n    }\n    let l = array.length;\n    while (l--) {\n      let element = array[l];\n      if (typeof element === 'string') {\n        const lcElement = transformCaseFunc(element);\n        if (lcElement !== element) {\n          // Config presets (e.g. tags.js, attrs.js) are immutable.\n          if (!isFrozen(array)) {\n            array[l] = lcElement;\n          }\n          element = lcElement;\n        }\n      }\n      set[element] = true;\n    }\n    return set;\n  }\n  /**\n   * Clean up an array to harden against CSPP\n   *\n   * @param array - The array to be cleaned.\n   * @returns The cleaned version of the array\n   */\n  function cleanArray(array) {\n    for (let index = 0; index < array.length; index++) {\n      const isPropertyExist = objectHasOwnProperty(array, index);\n      if (!isPropertyExist) {\n        array[index] = null;\n      }\n    }\n    return array;\n  }\n  /**\n   * Shallow clone an object\n   *\n   * @param object - The object to be cloned.\n   * @returns A new object that copies the original.\n   */\n  function clone(object) {\n    const newObject = create(null);\n    for (const [property, value] of entries(object)) {\n      const isPropertyExist = objectHasOwnProperty(object, property);\n      if (isPropertyExist) {\n        if (Array.isArray(value)) {\n          newObject[property] = cleanArray(value);\n        } else if (value && typeof value === 'object' && value.constructor === Object) {\n          newObject[property] = clone(value);\n        } else {\n          newObject[property] = value;\n        }\n      }\n    }\n    return newObject;\n  }\n  /**\n   * This method automatically checks if the prop is function or getter and behaves accordingly.\n   *\n   * @param object - The object to look up the getter function in its prototype chain.\n   * @param prop - The property name for which to find the getter function.\n   * @returns The getter function found in the prototype chain or a fallback function.\n   */\n  function lookupGetter(object, prop) {\n    while (object !== null) {\n      const desc = getOwnPropertyDescriptor(object, prop);\n      if (desc) {\n        if (desc.get) {\n          return unapply(desc.get);\n        }\n        if (typeof desc.value === 'function') {\n          return unapply(desc.value);\n        }\n      }\n      object = getPrototypeOf(object);\n    }\n    function fallbackValue() {\n      return null;\n    }\n    return fallbackValue;\n  }\n\n  const html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);\n  const svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\n  const svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);\n  // List of SVG elements that are disallowed by default.\n  // We still need to know them so that we can do namespace\n  // checks properly in case one wants to add them to\n  // allow-list.\n  const svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\n  const mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']);\n  // Similarly to SVG, we want to know all MathML elements,\n  // even those that we disallow by default.\n  const mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\n  const text = freeze(['#text']);\n\n  const html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'popover', 'popovertarget', 'popovertargetaction', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'wrap', 'xmlns', 'slot']);\n  const svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'amplitude', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'exponent', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'slope', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'tablevalues', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\n  const mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\n  const xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\n  // eslint-disable-next-line unicorn/better-regex\n  const MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n  const ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\n  const TMPLIT_EXPR = seal(/\\$\\{[\\w\\W]*/gm); // eslint-disable-line unicorn/better-regex\n  const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]+$/); // eslint-disable-line no-useless-escape\n  const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n  const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n  );\n  const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\n  const ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n  );\n  const DOCTYPE_NAME = seal(/^html$/i);\n  const CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n\n  var EXPRESSIONS = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ARIA_ATTR: ARIA_ATTR,\n    ATTR_WHITESPACE: ATTR_WHITESPACE,\n    CUSTOM_ELEMENT: CUSTOM_ELEMENT,\n    DATA_ATTR: DATA_ATTR,\n    DOCTYPE_NAME: DOCTYPE_NAME,\n    ERB_EXPR: ERB_EXPR,\n    IS_ALLOWED_URI: IS_ALLOWED_URI,\n    IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,\n    MUSTACHE_EXPR: MUSTACHE_EXPR,\n    TMPLIT_EXPR: TMPLIT_EXPR\n  });\n\n  /* eslint-disable @typescript-eslint/indent */\n  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\n  const NODE_TYPE = {\n    element: 1,\n    attribute: 2,\n    text: 3,\n    cdataSection: 4,\n    entityReference: 5,\n    // Deprecated\n    entityNode: 6,\n    // Deprecated\n    progressingInstruction: 7,\n    comment: 8,\n    document: 9,\n    documentType: 10,\n    documentFragment: 11,\n    notation: 12 // Deprecated\n  };\n  const getGlobal = function getGlobal() {\n    return typeof window === 'undefined' ? null : window;\n  };\n  /**\n   * Creates a no-op policy for internal use only.\n   * Don't export this function outside this module!\n   * @param trustedTypes The policy factory.\n   * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n   * @return The policy created (or null, if Trusted Types\n   * are not supported or creating the policy failed).\n   */\n  const _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {\n    if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n      return null;\n    }\n    // Allow the callers to control the unique policy name\n    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n    // Policy creation with duplicate names throws in Trusted Types.\n    let suffix = null;\n    const ATTR_NAME = 'data-tt-policy-suffix';\n    if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n      suffix = purifyHostElement.getAttribute(ATTR_NAME);\n    }\n    const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n    try {\n      return trustedTypes.createPolicy(policyName, {\n        createHTML(html) {\n          return html;\n        },\n        createScriptURL(scriptUrl) {\n          return scriptUrl;\n        }\n      });\n    } catch (_) {\n      // Policy creation failed (most likely another DOMPurify script has\n      // already run). Skip creating the policy, as this will only cause errors\n      // if TT are enforced.\n      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n      return null;\n    }\n  };\n  const _createHooksMap = function _createHooksMap() {\n    return {\n      afterSanitizeAttributes: [],\n      afterSanitizeElements: [],\n      afterSanitizeShadowDOM: [],\n      beforeSanitizeAttributes: [],\n      beforeSanitizeElements: [],\n      beforeSanitizeShadowDOM: [],\n      uponSanitizeAttribute: [],\n      uponSanitizeElement: [],\n      uponSanitizeShadowNode: []\n    };\n  };\n  function createDOMPurify() {\n    let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n    const DOMPurify = root => createDOMPurify(root);\n    DOMPurify.version = '3.2.5';\n    DOMPurify.removed = [];\n    if (!window || !window.document || window.document.nodeType !== NODE_TYPE.document || !window.Element) {\n      // Not running in a browser, provide a factory function\n      // so that you can pass your own Window\n      DOMPurify.isSupported = false;\n      return DOMPurify;\n    }\n    let {\n      document\n    } = window;\n    const originalDocument = document;\n    const currentScript = originalDocument.currentScript;\n    const {\n      DocumentFragment,\n      HTMLTemplateElement,\n      Node,\n      Element,\n      NodeFilter,\n      NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n      HTMLFormElement,\n      DOMParser,\n      trustedTypes\n    } = window;\n    const ElementPrototype = Element.prototype;\n    const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n    const remove = lookupGetter(ElementPrototype, 'remove');\n    const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n    const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n    const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n    // As per issue #47, the web-components registry is inherited by a\n    // new document created via createHTMLDocument. As per the spec\n    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n    // a new empty registry is used when creating a template contents owner\n    // document, so we use that as our parent document to ensure nothing\n    // is inherited.\n    if (typeof HTMLTemplateElement === 'function') {\n      const template = document.createElement('template');\n      if (template.content && template.content.ownerDocument) {\n        document = template.content.ownerDocument;\n      }\n    }\n    let trustedTypesPolicy;\n    let emptyHTML = '';\n    const {\n      implementation,\n      createNodeIterator,\n      createDocumentFragment,\n      getElementsByTagName\n    } = document;\n    const {\n      importNode\n    } = originalDocument;\n    let hooks = _createHooksMap();\n    /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */\n    DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;\n    const {\n      MUSTACHE_EXPR,\n      ERB_EXPR,\n      TMPLIT_EXPR,\n      DATA_ATTR,\n      ARIA_ATTR,\n      IS_SCRIPT_OR_DATA,\n      ATTR_WHITESPACE,\n      CUSTOM_ELEMENT\n    } = EXPRESSIONS;\n    let {\n      IS_ALLOWED_URI: IS_ALLOWED_URI$1\n    } = EXPRESSIONS;\n    /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */\n    /* allowed element names */\n    let ALLOWED_TAGS = null;\n    const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);\n    /* Allowed attribute names */\n    let ALLOWED_ATTR = null;\n    const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);\n    /*\n     * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.\n     * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n     * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n     * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n     */\n    let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {\n      tagNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null\n      },\n      attributeNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null\n      },\n      allowCustomizedBuiltInElements: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: false\n      }\n    }));\n    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n    let FORBID_TAGS = null;\n    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n    let FORBID_ATTR = null;\n    /* Decide if ARIA attributes are okay */\n    let ALLOW_ARIA_ATTR = true;\n    /* Decide if custom data attributes are okay */\n    let ALLOW_DATA_ATTR = true;\n    /* Decide if unknown protocols are okay */\n    let ALLOW_UNKNOWN_PROTOCOLS = false;\n    /* Decide if self-closing tags in attributes are allowed.\n     * Usually removed due to a mXSS issue in jQuery 3.0 */\n    let ALLOW_SELF_CLOSE_IN_ATTR = true;\n    /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */\n    let SAFE_FOR_TEMPLATES = false;\n    /* Output should be safe even for XML used within HTML and alike.\n     * This means, DOMPurify removes comments when containing risky content.\n     */\n    let SAFE_FOR_XML = true;\n    /* Decide if document with <html>... should be returned */\n    let WHOLE_DOCUMENT = false;\n    /* Track whether config is already set on this instance of DOMPurify. */\n    let SET_CONFIG = false;\n    /* Decide if all elements (e.g. style, script) must be children of\n     * document.body. By default, browsers might move them to document.head */\n    let FORCE_BODY = false;\n    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n     * string (or a TrustedHTML object if Trusted Types are supported).\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */\n    let RETURN_DOM = false;\n    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n     * string  (or a TrustedHTML object if Trusted Types are supported) */\n    let RETURN_DOM_FRAGMENT = false;\n    /* Try to return a Trusted Type object instead of a string, return a string in\n     * case Trusted Types are not supported  */\n    let RETURN_TRUSTED_TYPE = false;\n    /* Output should be free from DOM clobbering attacks?\n     * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n     */\n    let SANITIZE_DOM = true;\n    /* Achieve full DOM Clobbering protection by isolating the namespace of named\n     * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n     *\n     * HTML/DOM spec rules that enable DOM Clobbering:\n     *   - Named Access on Window (§7.3.3)\n     *   - DOM Tree Accessors (§3.1.5)\n     *   - Form Element Parent-Child Relations (§4.10.3)\n     *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n     *   - HTMLCollection (§4.2.10.2)\n     *\n     * Namespace isolation is implemented by prefixing `id` and `name` attributes\n     * with a constant string, i.e., `user-content-`\n     */\n    let SANITIZE_NAMED_PROPS = false;\n    const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n    /* Keep element content when removing element? */\n    let KEEP_CONTENT = true;\n    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n     * of importing it into a new Document and returning a sanitized copy */\n    let IN_PLACE = false;\n    /* Allow usage of profiles like html, svg and mathMl */\n    let USE_PROFILES = {};\n    /* Tags to ignore content of when KEEP_CONTENT is true */\n    let FORBID_CONTENTS = null;\n    const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n    /* Tags that are safe for data: URIs */\n    let DATA_URI_TAGS = null;\n    const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n    /* Attributes safe for values like \"javascript:\" */\n    let URI_SAFE_ATTRIBUTES = null;\n    const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\n    const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n    const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n    const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n    /* Document namespace */\n    let NAMESPACE = HTML_NAMESPACE;\n    let IS_EMPTY_INPUT = false;\n    /* Allowed XHTML+XML namespaces */\n    let ALLOWED_NAMESPACES = null;\n    const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);\n    let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n    let HTML_INTEGRATION_POINTS = addToSet({}, ['annotation-xml']);\n    // Certain elements are allowed in both SVG and HTML\n    // namespace. We need to specify them explicitly\n    // so that they don't get erroneously deleted from\n    // HTML namespace.\n    const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\n    /* Parsing of strict XHTML documents */\n    let PARSER_MEDIA_TYPE = null;\n    const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n    const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n    let transformCaseFunc = null;\n    /* Keep a reference to config to pass to hooks */\n    let CONFIG = null;\n    /* Ideally, do not touch anything below this line */\n    /* ______________________________________________ */\n    const formElement = document.createElement('form');\n    const isRegexOrFunction = function isRegexOrFunction(testValue) {\n      return testValue instanceof RegExp || testValue instanceof Function;\n    };\n    /**\n     * _parseConfig\n     *\n     * @param cfg optional config literal\n     */\n    // eslint-disable-next-line complexity\n    const _parseConfig = function _parseConfig() {\n      let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (CONFIG && CONFIG === cfg) {\n        return;\n      }\n      /* Shield configuration object from tampering */\n      if (!cfg || typeof cfg !== 'object') {\n        cfg = {};\n      }\n      /* Shield configuration object from prototype pollution */\n      cfg = clone(cfg);\n      PARSER_MEDIA_TYPE =\n      // eslint-disable-next-line unicorn/prefer-includes\n      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;\n      // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n      transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n      /* Set configuration parameters */\n      ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS') ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n      ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR') ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n      ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES') ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n      URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR') ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;\n      DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS') ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;\n      FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS') ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n      FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS') ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n      FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR') ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n      USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES') ? cfg.USE_PROFILES : false;\n      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n      ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n      SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true\n      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n      RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n      FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n      SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n      IN_PLACE = cfg.IN_PLACE || false; // Default false\n      IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n      NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n      MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;\n      HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;\n      CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\n        CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n      }\n      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\n        CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n      }\n      if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {\n        CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n      }\n      if (SAFE_FOR_TEMPLATES) {\n        ALLOW_DATA_ATTR = false;\n      }\n      if (RETURN_DOM_FRAGMENT) {\n        RETURN_DOM = true;\n      }\n      /* Parse profile info */\n      if (USE_PROFILES) {\n        ALLOWED_TAGS = addToSet({}, text);\n        ALLOWED_ATTR = [];\n        if (USE_PROFILES.html === true) {\n          addToSet(ALLOWED_TAGS, html$1);\n          addToSet(ALLOWED_ATTR, html);\n        }\n        if (USE_PROFILES.svg === true) {\n          addToSet(ALLOWED_TAGS, svg$1);\n          addToSet(ALLOWED_ATTR, svg);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n        if (USE_PROFILES.svgFilters === true) {\n          addToSet(ALLOWED_TAGS, svgFilters);\n          addToSet(ALLOWED_ATTR, svg);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n        if (USE_PROFILES.mathMl === true) {\n          addToSet(ALLOWED_TAGS, mathMl$1);\n          addToSet(ALLOWED_ATTR, mathMl);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n      }\n      /* Merge configuration parameters */\n      if (cfg.ADD_TAGS) {\n        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n          ALLOWED_TAGS = clone(ALLOWED_TAGS);\n        }\n        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n      }\n      if (cfg.ADD_ATTR) {\n        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n          ALLOWED_ATTR = clone(ALLOWED_ATTR);\n        }\n        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n      }\n      if (cfg.ADD_URI_SAFE_ATTR) {\n        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n      }\n      if (cfg.FORBID_CONTENTS) {\n        if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n          FORBID_CONTENTS = clone(FORBID_CONTENTS);\n        }\n        addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n      }\n      /* Add #text in case KEEP_CONTENT is set to true */\n      if (KEEP_CONTENT) {\n        ALLOWED_TAGS['#text'] = true;\n      }\n      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n      if (WHOLE_DOCUMENT) {\n        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n      }\n      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n      if (ALLOWED_TAGS.table) {\n        addToSet(ALLOWED_TAGS, ['tbody']);\n        delete FORBID_TAGS.tbody;\n      }\n      if (cfg.TRUSTED_TYPES_POLICY) {\n        if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n          throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.');\n        }\n        if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n          throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.');\n        }\n        // Overwrite existing TrustedTypes policy.\n        trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;\n        // Sign local variables required by `sanitize`.\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      } else {\n        // Uninitialized policy, attempt to initialize the internal dompurify policy.\n        if (trustedTypesPolicy === undefined) {\n          trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);\n        }\n        // If creating the internal policy succeeded sign internal variables.\n        if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n          emptyHTML = trustedTypesPolicy.createHTML('');\n        }\n      }\n      // Prevent further manipulation of configuration.\n      // Not available in IE8, Safari 5, etc.\n      if (freeze) {\n        freeze(cfg);\n      }\n      CONFIG = cfg;\n    };\n    /* Keep track of all possible SVG and MathML tags\n     * so that we can perform the namespace checks\n     * correctly. */\n    const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);\n    const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);\n    /**\n     * @param element a DOM element whose namespace is being checked\n     * @returns Return false if the element has a\n     *  namespace that a spec-compliant parser would never\n     *  return. Return true otherwise.\n     */\n    const _checkValidNamespace = function _checkValidNamespace(element) {\n      let parent = getParentNode(element);\n      // In JSDOM, if we're inside shadow DOM, then parentNode\n      // can be null. We just simulate parent in this case.\n      if (!parent || !parent.tagName) {\n        parent = {\n          namespaceURI: NAMESPACE,\n          tagName: 'template'\n        };\n      }\n      const tagName = stringToLowerCase(element.tagName);\n      const parentTagName = stringToLowerCase(parent.tagName);\n      if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n        return false;\n      }\n      if (element.namespaceURI === SVG_NAMESPACE) {\n        // The only way to switch from HTML namespace to SVG\n        // is via <svg>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'svg';\n        }\n        // The only way to switch from MathML to SVG is via`\n        // svg if parent is either <annotation-xml> or MathML\n        // text integration points.\n        if (parent.namespaceURI === MATHML_NAMESPACE) {\n          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n        }\n        // We only allow elements that are defined in SVG\n        // spec. All others are disallowed in SVG namespace.\n        return Boolean(ALL_SVG_TAGS[tagName]);\n      }\n      if (element.namespaceURI === MATHML_NAMESPACE) {\n        // The only way to switch from HTML namespace to MathML\n        // is via <math>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'math';\n        }\n        // The only way to switch from SVG to MathML is via\n        // <math> and HTML integration points\n        if (parent.namespaceURI === SVG_NAMESPACE) {\n          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n        }\n        // We only allow elements that are defined in MathML\n        // spec. All others are disallowed in MathML namespace.\n        return Boolean(ALL_MATHML_TAGS[tagName]);\n      }\n      if (element.namespaceURI === HTML_NAMESPACE) {\n        // The only way to switch from SVG to HTML is via\n        // HTML integration points, and from MathML to HTML\n        // is via MathML text integration points\n        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        }\n        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        }\n        // We disallow tags that are specific for MathML\n        // or SVG and should never appear in HTML namespace\n        return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n      }\n      // For XHTML and XML documents that support custom namespaces\n      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {\n        return true;\n      }\n      // The code should never reach this place (this means\n      // that the element somehow got namespace that is not\n      // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n      // Return false just in case.\n      return false;\n    };\n    /**\n     * _forceRemove\n     *\n     * @param node a DOM node\n     */\n    const _forceRemove = function _forceRemove(node) {\n      arrayPush(DOMPurify.removed, {\n        element: node\n      });\n      try {\n        // eslint-disable-next-line unicorn/prefer-dom-node-remove\n        getParentNode(node).removeChild(node);\n      } catch (_) {\n        remove(node);\n      }\n    };\n    /**\n     * _removeAttribute\n     *\n     * @param name an Attribute name\n     * @param element a DOM node\n     */\n    const _removeAttribute = function _removeAttribute(name, element) {\n      try {\n        arrayPush(DOMPurify.removed, {\n          attribute: element.getAttributeNode(name),\n          from: element\n        });\n      } catch (_) {\n        arrayPush(DOMPurify.removed, {\n          attribute: null,\n          from: element\n        });\n      }\n      element.removeAttribute(name);\n      // We void attribute values for unremovable \"is\" attributes\n      if (name === 'is') {\n        if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n          try {\n            _forceRemove(element);\n          } catch (_) {}\n        } else {\n          try {\n            element.setAttribute(name, '');\n          } catch (_) {}\n        }\n      }\n    };\n    /**\n     * _initDocument\n     *\n     * @param dirty - a string of dirty markup\n     * @return a DOM, filled with the dirty markup\n     */\n    const _initDocument = function _initDocument(dirty) {\n      /* Create a HTML document */\n      let doc = null;\n      let leadingWhitespace = null;\n      if (FORCE_BODY) {\n        dirty = '<remove></remove>' + dirty;\n      } else {\n        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n        const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n        leadingWhitespace = matches && matches[0];\n      }\n      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {\n        // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n        dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n      }\n      const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      /*\n       * Use the DOMParser API by default, fallback later if needs be\n       * DOMParser not work for svg when has multiple root element.\n       */\n      if (NAMESPACE === HTML_NAMESPACE) {\n        try {\n          doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n        } catch (_) {}\n      }\n      /* Use createHTMLDocument in case DOMParser is not available */\n      if (!doc || !doc.documentElement) {\n        doc = implementation.createDocument(NAMESPACE, 'template', null);\n        try {\n          doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n        } catch (_) {\n          // Syntax error if dirtyPayload is invalid xml\n        }\n      }\n      const body = doc.body || doc.documentElement;\n      if (dirty && leadingWhitespace) {\n        body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n      }\n      /* Work on whole document or just its body */\n      if (NAMESPACE === HTML_NAMESPACE) {\n        return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n      }\n      return WHOLE_DOCUMENT ? doc.documentElement : body;\n    };\n    /**\n     * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n     *\n     * @param root The root element or node to start traversing on.\n     * @return The created NodeIterator\n     */\n    const _createNodeIterator = function _createNodeIterator(root) {\n      return createNodeIterator.call(root.ownerDocument || root, root,\n      // eslint-disable-next-line no-bitwise\n      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null);\n    };\n    /**\n     * _isClobbered\n     *\n     * @param element element to check for clobbering attacks\n     * @return true if clobbered, false if safe\n     */\n    const _isClobbered = function _isClobbered(element) {\n      return element instanceof HTMLFormElement && (typeof element.nodeName !== 'string' || typeof element.textContent !== 'string' || typeof element.removeChild !== 'function' || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== 'function' || typeof element.setAttribute !== 'function' || typeof element.namespaceURI !== 'string' || typeof element.insertBefore !== 'function' || typeof element.hasChildNodes !== 'function');\n    };\n    /**\n     * Checks whether the given object is a DOM node.\n     *\n     * @param value object to check whether it's a DOM node\n     * @return true is object is a DOM node\n     */\n    const _isNode = function _isNode(value) {\n      return typeof Node === 'function' && value instanceof Node;\n    };\n    function _executeHooks(hooks, currentNode, data) {\n      arrayForEach(hooks, hook => {\n        hook.call(DOMPurify, currentNode, data, CONFIG);\n      });\n    }\n    /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     * @param currentNode to check for permission to exist\n     * @return true if node was killed, false if left alive\n     */\n    const _sanitizeElements = function _sanitizeElements(currentNode) {\n      let content = null;\n      /* Execute a hook if present */\n      _executeHooks(hooks.beforeSanitizeElements, currentNode, null);\n      /* Check if element is clobbered or can clobber */\n      if (_isClobbered(currentNode)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Now let's check the element's type and name */\n      const tagName = transformCaseFunc(currentNode.nodeName);\n      /* Execute a hook if present */\n      _executeHooks(hooks.uponSanitizeElement, currentNode, {\n        tagName,\n        allowedTags: ALLOWED_TAGS\n      });\n      /* Detect mXSS attempts abusing namespace confusion */\n      if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\\w!]/g, currentNode.innerHTML) && regExpTest(/<[/\\w!]/g, currentNode.textContent)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Remove any occurrence of processing instructions */\n      if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Remove any kind of possibly harmful comments */\n      if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\\w]/g, currentNode.data)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Remove element if anything forbids its presence */\n      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n        /* Check if we have a custom element to handle */\n        if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {\n            return false;\n          }\n          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {\n            return false;\n          }\n        }\n        /* Keep content except for bad-listed elements */\n        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n          const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n          const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n          if (childNodes && parentNode) {\n            const childCount = childNodes.length;\n            for (let i = childCount - 1; i >= 0; --i) {\n              const childClone = cloneNode(childNodes[i], true);\n              childClone.__removalCount = (currentNode.__removalCount || 0) + 1;\n              parentNode.insertBefore(childClone, getNextSibling(currentNode));\n            }\n          }\n        }\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Check whether element has a valid namespace */\n      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Make sure that older browsers don't get fallback-tag mXSS */\n      if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Sanitize element content to be template-safe */\n      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {\n        /* Get the element's text content */\n        content = currentNode.textContent;\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n          content = stringReplace(content, expr, ' ');\n        });\n        if (currentNode.textContent !== content) {\n          arrayPush(DOMPurify.removed, {\n            element: currentNode.cloneNode()\n          });\n          currentNode.textContent = content;\n        }\n      }\n      /* Execute a hook if present */\n      _executeHooks(hooks.afterSanitizeElements, currentNode, null);\n      return false;\n    };\n    /**\n     * _isValidAttribute\n     *\n     * @param lcTag Lowercase tag name of containing element.\n     * @param lcName Lowercase attribute name.\n     * @param value Attribute value.\n     * @return Returns true if `value` is valid, otherwise false.\n     */\n    // eslint-disable-next-line complexity\n    const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n      /* Make sure attribute cannot clobber */\n      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n        return false;\n      }\n      /* Allow valid data-* attributes: At least one character after \"-\"\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n          We don't need to check the value; it's always URI safe. */\n      if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n        if (\n        // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n        _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||\n        // Alternative, second condition checks if it's an `is`-attribute, AND\n        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {\n          return false;\n        }\n        /* Check value is safe. First, is attr inert? If so, is safe */\n      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {\n        return false;\n      } else ;\n      return true;\n    };\n    /**\n     * _isBasicCustomElement\n     * checks if at least one dash is included in tagName, and it's not the first char\n     * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n     *\n     * @param tagName name of the tag of the node to sanitize\n     * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n     */\n    const _isBasicCustomElement = function _isBasicCustomElement(tagName) {\n      return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);\n    };\n    /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param currentNode to sanitize\n     */\n    const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n      /* Execute a hook if present */\n      _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);\n      const {\n        attributes\n      } = currentNode;\n      /* Check if we have attributes; if not we might have a text node */\n      if (!attributes || _isClobbered(currentNode)) {\n        return;\n      }\n      const hookEvent = {\n        attrName: '',\n        attrValue: '',\n        keepAttr: true,\n        allowedAttributes: ALLOWED_ATTR,\n        forceKeepAttr: undefined\n      };\n      let l = attributes.length;\n      /* Go backwards over all attributes; safely remove bad ones */\n      while (l--) {\n        const attr = attributes[l];\n        const {\n          name,\n          namespaceURI,\n          value: attrValue\n        } = attr;\n        const lcName = transformCaseFunc(name);\n        let value = name === 'value' ? attrValue : stringTrim(attrValue);\n        /* Execute a hook if present */\n        hookEvent.attrName = lcName;\n        hookEvent.attrValue = value;\n        hookEvent.keepAttr = true;\n        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n        _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);\n        value = hookEvent.attrValue;\n        /* Full DOM Clobbering protection via namespace isolation,\n         * Prefix id and name attributes with `user-content-`\n         */\n        if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n          // Remove the attribute with this value\n          _removeAttribute(name, currentNode);\n          // Prefix the value and later re-create the attribute with the sanitized value\n          value = SANITIZE_NAMED_PROPS_PREFIX + value;\n        }\n        /* Work around a security issue with comments inside attributes */\n        if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\\/(style|title)/i, value)) {\n          _removeAttribute(name, currentNode);\n          continue;\n        }\n        /* Did the hooks approve of the attribute? */\n        if (hookEvent.forceKeepAttr) {\n          continue;\n        }\n        /* Remove attribute */\n        _removeAttribute(name, currentNode);\n        /* Did the hooks approve of the attribute? */\n        if (!hookEvent.keepAttr) {\n          continue;\n        }\n        /* Work around a security issue in jQuery 3.0 */\n        if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n          _removeAttribute(name, currentNode);\n          continue;\n        }\n        /* Sanitize attribute content to be template-safe */\n        if (SAFE_FOR_TEMPLATES) {\n          arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n            value = stringReplace(value, expr, ' ');\n          });\n        }\n        /* Is `value` valid for this attribute? */\n        const lcTag = transformCaseFunc(currentNode.nodeName);\n        if (!_isValidAttribute(lcTag, lcName, value)) {\n          continue;\n        }\n        /* Handle attributes that require Trusted Types */\n        if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n          if (namespaceURI) ; else {\n            switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n              case 'TrustedHTML':\n                {\n                  value = trustedTypesPolicy.createHTML(value);\n                  break;\n                }\n              case 'TrustedScriptURL':\n                {\n                  value = trustedTypesPolicy.createScriptURL(value);\n                  break;\n                }\n            }\n          }\n        }\n        /* Handle invalid data-* attribute set by try-catching it */\n        try {\n          if (namespaceURI) {\n            currentNode.setAttributeNS(namespaceURI, name, value);\n          } else {\n            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n            currentNode.setAttribute(name, value);\n          }\n          if (_isClobbered(currentNode)) {\n            _forceRemove(currentNode);\n          } else {\n            arrayPop(DOMPurify.removed);\n          }\n        } catch (_) {}\n      }\n      /* Execute a hook if present */\n      _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);\n    };\n    /**\n     * _sanitizeShadowDOM\n     *\n     * @param fragment to iterate over recursively\n     */\n    const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n      let shadowNode = null;\n      const shadowIterator = _createNodeIterator(fragment);\n      /* Execute a hook if present */\n      _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);\n      while (shadowNode = shadowIterator.nextNode()) {\n        /* Execute a hook if present */\n        _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);\n        /* Sanitize tags and elements */\n        _sanitizeElements(shadowNode);\n        /* Check attributes next */\n        _sanitizeAttributes(shadowNode);\n        /* Deep shadow DOM detected */\n        if (shadowNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(shadowNode.content);\n        }\n      }\n      /* Execute a hook if present */\n      _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);\n    };\n    // eslint-disable-next-line complexity\n    DOMPurify.sanitize = function (dirty) {\n      let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let body = null;\n      let importedNode = null;\n      let currentNode = null;\n      let returnNode = null;\n      /* Make sure we have a string to sanitize.\n        DO NOT return early, as this will return the wrong type if\n        the user has requested a DOM object rather than a string */\n      IS_EMPTY_INPUT = !dirty;\n      if (IS_EMPTY_INPUT) {\n        dirty = '<!-->';\n      }\n      /* Stringify, in case dirty is an object */\n      if (typeof dirty !== 'string' && !_isNode(dirty)) {\n        if (typeof dirty.toString === 'function') {\n          dirty = dirty.toString();\n          if (typeof dirty !== 'string') {\n            throw typeErrorCreate('dirty is not a string, aborting');\n          }\n        } else {\n          throw typeErrorCreate('toString is not a function');\n        }\n      }\n      /* Return dirty HTML if DOMPurify cannot run */\n      if (!DOMPurify.isSupported) {\n        return dirty;\n      }\n      /* Assign config vars */\n      if (!SET_CONFIG) {\n        _parseConfig(cfg);\n      }\n      /* Clean up removed elements */\n      DOMPurify.removed = [];\n      /* Check if dirty is correctly typed for IN_PLACE */\n      if (typeof dirty === 'string') {\n        IN_PLACE = false;\n      }\n      if (IN_PLACE) {\n        /* Do some early pre-sanitization to avoid unsafe root nodes */\n        if (dirty.nodeName) {\n          const tagName = transformCaseFunc(dirty.nodeName);\n          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n            throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n          }\n        }\n      } else if (dirty instanceof Node) {\n        /* If dirty is a DOM element, append to an empty document to avoid\n           elements being stripped by the parser */\n        body = _initDocument('<!---->');\n        importedNode = body.ownerDocument.importNode(dirty, true);\n        if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === 'BODY') {\n          /* Node is already a body, use as is */\n          body = importedNode;\n        } else if (importedNode.nodeName === 'HTML') {\n          body = importedNode;\n        } else {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          body.appendChild(importedNode);\n        }\n      } else {\n        /* Exit directly if we have nothing to do */\n        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&\n        // eslint-disable-next-line unicorn/prefer-includes\n        dirty.indexOf('<') === -1) {\n          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n        }\n        /* Initialize the document to work on */\n        body = _initDocument(dirty);\n        /* Check we have a DOM node from the data */\n        if (!body) {\n          return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n        }\n      }\n      /* Remove first element node (ours) if FORCE_BODY is set */\n      if (body && FORCE_BODY) {\n        _forceRemove(body.firstChild);\n      }\n      /* Get node iterator */\n      const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n      /* Now start iterating over the created document */\n      while (currentNode = nodeIterator.nextNode()) {\n        /* Sanitize tags and elements */\n        _sanitizeElements(currentNode);\n        /* Check attributes next */\n        _sanitizeAttributes(currentNode);\n        /* Shadow DOM detected, sanitize it */\n        if (currentNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(currentNode.content);\n        }\n      }\n      /* If we sanitized `dirty` in-place, return it. */\n      if (IN_PLACE) {\n        return dirty;\n      }\n      /* Return sanitized string or DOM */\n      if (RETURN_DOM) {\n        if (RETURN_DOM_FRAGMENT) {\n          returnNode = createDocumentFragment.call(body.ownerDocument);\n          while (body.firstChild) {\n            // eslint-disable-next-line unicorn/prefer-dom-node-append\n            returnNode.appendChild(body.firstChild);\n          }\n        } else {\n          returnNode = body;\n        }\n        if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {\n          /*\n            AdoptNode() is not used because internal state is not reset\n            (e.g. the past names map of a HTMLFormElement), this is safe\n            in theory but we would rather not risk another attack vector.\n            The state that is cloned by importNode() is explicitly defined\n            by the specs.\n          */\n          returnNode = importNode.call(originalDocument, returnNode, true);\n        }\n        return returnNode;\n      }\n      let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n      /* Serialize doctype if allowed */\n      if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {\n        serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n      }\n      /* Sanitize final string template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n          serializedHTML = stringReplace(serializedHTML, expr, ' ');\n        });\n      }\n      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n    };\n    DOMPurify.setConfig = function () {\n      let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _parseConfig(cfg);\n      SET_CONFIG = true;\n    };\n    DOMPurify.clearConfig = function () {\n      CONFIG = null;\n      SET_CONFIG = false;\n    };\n    DOMPurify.isValidAttribute = function (tag, attr, value) {\n      /* Initialize shared config vars if necessary. */\n      if (!CONFIG) {\n        _parseConfig({});\n      }\n      const lcTag = transformCaseFunc(tag);\n      const lcName = transformCaseFunc(attr);\n      return _isValidAttribute(lcTag, lcName, value);\n    };\n    DOMPurify.addHook = function (entryPoint, hookFunction) {\n      if (typeof hookFunction !== 'function') {\n        return;\n      }\n      arrayPush(hooks[entryPoint], hookFunction);\n    };\n    DOMPurify.removeHook = function (entryPoint, hookFunction) {\n      if (hookFunction !== undefined) {\n        const index = arrayLastIndexOf(hooks[entryPoint], hookFunction);\n        return index === -1 ? undefined : arraySplice(hooks[entryPoint], index, 1)[0];\n      }\n      return arrayPop(hooks[entryPoint]);\n    };\n    DOMPurify.removeHooks = function (entryPoint) {\n      hooks[entryPoint] = [];\n    };\n    DOMPurify.removeAllHooks = function () {\n      hooks = _createHooksMap();\n    };\n    return DOMPurify;\n  }\n  var purify = createDOMPurify();\n\n  return purify;\n\n}));\n//# sourceMappingURL=purify.js.map\n","const {\n  entries,\n  setPrototypeOf,\n  isFrozen,\n  getPrototypeOf,\n  getOwnPropertyDescriptor,\n} = Object;\n\nlet { freeze, seal, create } = Object; // eslint-disable-line import/no-mutable-exports\nlet { apply, construct } = typeof Reflect !== 'undefined' && Reflect;\n\nif (!freeze) {\n  freeze = function (x) {\n    return x;\n  };\n}\n\nif (!seal) {\n  seal = function (x) {\n    return x;\n  };\n}\n\nif (!apply) {\n  apply = function (fun, thisValue, args) {\n    return fun.apply(thisValue, args);\n  };\n}\n\nif (!construct) {\n  construct = function (Func, args) {\n    return new Func(...args);\n  };\n}\n\nconst arrayForEach = unapply(Array.prototype.forEach);\nconst arrayIndexOf = unapply(Array.prototype.indexOf);\nconst arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);\nconst arrayPop = unapply(Array.prototype.pop);\nconst arrayPush = unapply(Array.prototype.push);\nconst arraySlice = unapply(Array.prototype.slice);\nconst arraySplice = unapply(Array.prototype.splice);\n\nconst stringToLowerCase = unapply(String.prototype.toLowerCase);\nconst stringToString = unapply(String.prototype.toString);\nconst stringMatch = unapply(String.prototype.match);\nconst stringReplace = unapply(String.prototype.replace);\nconst stringIndexOf = unapply(String.prototype.indexOf);\nconst stringTrim = unapply(String.prototype.trim);\n\nconst objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);\n\nconst regExpTest = unapply(RegExp.prototype.test);\n\nconst typeErrorCreate = unconstruct(TypeError);\n\n/**\n * Creates a new function that calls the given function with a specified thisArg and arguments.\n *\n * @param func - The function to be wrapped and called.\n * @returns A new function that calls the given function with a specified thisArg and arguments.\n */\nfunction unapply<T>(\n  func: (thisArg: any, ...args: any[]) => T\n): (thisArg: any, ...args: any[]) => T {\n  return (thisArg: any, ...args: any[]): T => {\n    if (thisArg instanceof RegExp) {\n      thisArg.lastIndex = 0;\n    }\n\n    return apply(func, thisArg, args);\n  };\n}\n\n/**\n * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n *\n * @param func - The constructor function to be wrapped and called.\n * @returns A new function that constructs an instance of the given constructor function with the provided arguments.\n */\nfunction unconstruct<T>(func: (...args: any[]) => T): (...args: any[]) => T {\n  return (...args: any[]): T => construct(func, args);\n}\n\n/**\n * Add properties to a lookup table\n *\n * @param set - The set to which elements will be added.\n * @param array - The array containing elements to be added to the set.\n * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n * @returns The modified set with added elements.\n */\nfunction addToSet(\n  set: Record<string, any>,\n  array: readonly any[],\n  transformCaseFunc: ReturnType<typeof unapply<string>> = stringToLowerCase\n): Record<string, any> {\n  if (setPrototypeOf) {\n    // Make 'in' and truthy checks like Boolean(set.constructor)\n    // independent of any properties defined on Object.prototype.\n    // Prevent prototype setters from intercepting set as a this value.\n    setPrototypeOf(set, null);\n  }\n\n  let l = array.length;\n  while (l--) {\n    let element = array[l];\n    if (typeof element === 'string') {\n      const lcElement = transformCaseFunc(element);\n      if (lcElement !== element) {\n        // Config presets (e.g. tags.js, attrs.js) are immutable.\n        if (!isFrozen(array)) {\n          (array as any[])[l] = lcElement;\n        }\n\n        element = lcElement;\n      }\n    }\n\n    set[element] = true;\n  }\n\n  return set;\n}\n\n/**\n * Clean up an array to harden against CSPP\n *\n * @param array - The array to be cleaned.\n * @returns The cleaned version of the array\n */\nfunction cleanArray<T>(array: T[]): Array<T | null> {\n  for (let index = 0; index < array.length; index++) {\n    const isPropertyExist = objectHasOwnProperty(array, index);\n\n    if (!isPropertyExist) {\n      array[index] = null;\n    }\n  }\n\n  return array;\n}\n\n/**\n * Shallow clone an object\n *\n * @param object - The object to be cloned.\n * @returns A new object that copies the original.\n */\nfunction clone<T extends Record<string, any>>(object: T): T {\n  const newObject = create(null);\n\n  for (const [property, value] of entries(object)) {\n    const isPropertyExist = objectHasOwnProperty(object, property);\n\n    if (isPropertyExist) {\n      if (Array.isArray(value)) {\n        newObject[property] = cleanArray(value);\n      } else if (\n        value &&\n        typeof value === 'object' &&\n        value.constructor === Object\n      ) {\n        newObject[property] = clone(value);\n      } else {\n        newObject[property] = value;\n      }\n    }\n  }\n\n  return newObject;\n}\n\n/**\n * This method automatically checks if the prop is function or getter and behaves accordingly.\n *\n * @param object - The object to look up the getter function in its prototype chain.\n * @param prop - The property name for which to find the getter function.\n * @returns The getter function found in the prototype chain or a fallback function.\n */\nfunction lookupGetter<T extends Record<string, any>>(\n  object: T,\n  prop: string\n): ReturnType<typeof unapply<any>> | (() => null) {\n  while (object !== null) {\n    const desc = getOwnPropertyDescriptor(object, prop);\n\n    if (desc) {\n      if (desc.get) {\n        return unapply(desc.get);\n      }\n\n      if (typeof desc.value === 'function') {\n        return unapply(desc.value);\n      }\n    }\n\n    object = getPrototypeOf(object);\n  }\n\n  function fallbackValue(): null {\n    return null;\n  }\n\n  return fallbackValue;\n}\n\nexport {\n  // Array\n  arrayForEach,\n  arrayIndexOf,\n  arrayLastIndexOf,\n  arrayPop,\n  arrayPush,\n  arraySlice,\n  arraySplice,\n  // Object\n  entries,\n  freeze,\n  getPrototypeOf,\n  getOwnPropertyDescriptor,\n  isFrozen,\n  setPrototypeOf,\n  seal,\n  clone,\n  create,\n  objectHasOwnProperty,\n  // RegExp\n  regExpTest,\n  // String\n  stringIndexOf,\n  stringMatch,\n  stringReplace,\n  stringToLowerCase,\n  stringToString,\n  stringTrim,\n  // Errors\n  typeErrorCreate,\n  // Other\n  lookupGetter,\n  addToSet,\n  // Reflect\n  unapply,\n  unconstruct,\n};\n","import { freeze } from './utils.js';\n\nexport const html = freeze([\n  'a',\n  'abbr',\n  'acronym',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'bdi',\n  'bdo',\n  'big',\n  'blink',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'center',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'content',\n  'data',\n  'datalist',\n  'dd',\n  'decorator',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'element',\n  'em',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'font',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'label',\n  'legend',\n  'li',\n  'main',\n  'map',\n  'mark',\n  'marquee',\n  'menu',\n  'menuitem',\n  'meter',\n  'nav',\n  'nobr',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'section',\n  'select',\n  'shadow',\n  'small',\n  'source',\n  'spacer',\n  'span',\n  'strike',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'template',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'tr',\n  'track',\n  'tt',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n] as const);\n\nexport const svg = freeze([\n  'svg',\n  'a',\n  'altglyph',\n  'altglyphdef',\n  'altglyphitem',\n  'animatecolor',\n  'animatemotion',\n  'animatetransform',\n  'circle',\n  'clippath',\n  'defs',\n  'desc',\n  'ellipse',\n  'filter',\n  'font',\n  'g',\n  'glyph',\n  'glyphref',\n  'hkern',\n  'image',\n  'line',\n  'lineargradient',\n  'marker',\n  'mask',\n  'metadata',\n  'mpath',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialgradient',\n  'rect',\n  'stop',\n  'style',\n  'switch',\n  'symbol',\n  'text',\n  'textpath',\n  'title',\n  'tref',\n  'tspan',\n  'view',\n  'vkern',\n] as const);\n\nexport const svgFilters = freeze([\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n] as const);\n\n// List of SVG elements that are disallowed by default.\n// We still need to know them so that we can do namespace\n// checks properly in case one wants to add them to\n// allow-list.\nexport const svgDisallowed = freeze([\n  'animate',\n  'color-profile',\n  'cursor',\n  'discard',\n  'font-face',\n  'font-face-format',\n  'font-face-name',\n  'font-face-src',\n  'font-face-uri',\n  'foreignobject',\n  'hatch',\n  'hatchpath',\n  'mesh',\n  'meshgradient',\n  'meshpatch',\n  'meshrow',\n  'missing-glyph',\n  'script',\n  'set',\n  'solidcolor',\n  'unknown',\n  'use',\n] as const);\n\nexport const mathMl = freeze([\n  'math',\n  'menclose',\n  'merror',\n  'mfenced',\n  'mfrac',\n  'mglyph',\n  'mi',\n  'mlabeledtr',\n  'mmultiscripts',\n  'mn',\n  'mo',\n  'mover',\n  'mpadded',\n  'mphantom',\n  'mroot',\n  'mrow',\n  'ms',\n  'mspace',\n  'msqrt',\n  'mstyle',\n  'msub',\n  'msup',\n  'msubsup',\n  'mtable',\n  'mtd',\n  'mtext',\n  'mtr',\n  'munder',\n  'munderover',\n  'mprescripts',\n] as const);\n\n// Similarly to SVG, we want to know all MathML elements,\n// even those that we disallow by default.\nexport const mathMlDisallowed = freeze([\n  'maction',\n  'maligngroup',\n  'malignmark',\n  'mlongdiv',\n  'mscarries',\n  'mscarry',\n  'msgroup',\n  'mstack',\n  'msline',\n  'msrow',\n  'semantics',\n  'annotation',\n  'annotation-xml',\n  'mprescripts',\n  'none',\n] as const);\n\nexport const text = freeze(['#text'] as const);\n","import { freeze } from './utils.js';\n\nexport const html = freeze([\n  'accept',\n  'action',\n  'align',\n  'alt',\n  'autocapitalize',\n  'autocomplete',\n  'autopictureinpicture',\n  'autoplay',\n  'background',\n  'bgcolor',\n  'border',\n  'capture',\n  'cellpadding',\n  'cellspacing',\n  'checked',\n  'cite',\n  'class',\n  'clear',\n  'color',\n  'cols',\n  'colspan',\n  'controls',\n  'controlslist',\n  'coords',\n  'crossorigin',\n  'datetime',\n  'decoding',\n  'default',\n  'dir',\n  'disabled',\n  'disablepictureinpicture',\n  'disableremoteplayback',\n  'download',\n  'draggable',\n  'enctype',\n  'enterkeyhint',\n  'face',\n  'for',\n  'headers',\n  'height',\n  'hidden',\n  'high',\n  'href',\n  'hreflang',\n  'id',\n  'inputmode',\n  'integrity',\n  'ismap',\n  'kind',\n  'label',\n  'lang',\n  'list',\n  'loading',\n  'loop',\n  'low',\n  'max',\n  'maxlength',\n  'media',\n  'method',\n  'min',\n  'minlength',\n  'multiple',\n  'muted',\n  'name',\n  'nonce',\n  'noshade',\n  'novalidate',\n  'nowrap',\n  'open',\n  'optimum',\n  'pattern',\n  'placeholder',\n  'playsinline',\n  'popover',\n  'popovertarget',\n  'popovertargetaction',\n  'poster',\n  'preload',\n  'pubdate',\n  'radiogroup',\n  'readonly',\n  'rel',\n  'required',\n  'rev',\n  'reversed',\n  'role',\n  'rows',\n  'rowspan',\n  'spellcheck',\n  'scope',\n  'selected',\n  'shape',\n  'size',\n  'sizes',\n  'span',\n  'srclang',\n  'start',\n  'src',\n  'srcset',\n  'step',\n  'style',\n  'summary',\n  'tabindex',\n  'title',\n  'translate',\n  'type',\n  'usemap',\n  'valign',\n  'value',\n  'width',\n  'wrap',\n  'xmlns',\n  'slot',\n] as const);\n\nexport const svg = freeze([\n  'accent-height',\n  'accumulate',\n  'additive',\n  'alignment-baseline',\n  'amplitude',\n  'ascent',\n  'attributename',\n  'attributetype',\n  'azimuth',\n  'basefrequency',\n  'baseline-shift',\n  'begin',\n  'bias',\n  'by',\n  'class',\n  'clip',\n  'clippathunits',\n  'clip-path',\n  'clip-rule',\n  'color',\n  'color-interpolation',\n  'color-interpolation-filters',\n  'color-profile',\n  'color-rendering',\n  'cx',\n  'cy',\n  'd',\n  'dx',\n  'dy',\n  'diffuseconstant',\n  'direction',\n  'display',\n  'divisor',\n  'dur',\n  'edgemode',\n  'elevation',\n  'end',\n  'exponent',\n  'fill',\n  'fill-opacity',\n  'fill-rule',\n  'filter',\n  'filterunits',\n  'flood-color',\n  'flood-opacity',\n  'font-family',\n  'font-size',\n  'font-size-adjust',\n  'font-stretch',\n  'font-style',\n  'font-variant',\n  'font-weight',\n  'fx',\n  'fy',\n  'g1',\n  'g2',\n  'glyph-name',\n  'glyphref',\n  'gradientunits',\n  'gradienttransform',\n  'height',\n  'href',\n  'id',\n  'image-rendering',\n  'in',\n  'in2',\n  'intercept',\n  'k',\n  'k1',\n  'k2',\n  'k3',\n  'k4',\n  'kerning',\n  'keypoints',\n  'keysplines',\n  'keytimes',\n  'lang',\n  'lengthadjust',\n  'letter-spacing',\n  'kernelmatrix',\n  'kernelunitlength',\n  'lighting-color',\n  'local',\n  'marker-end',\n  'marker-mid',\n  'marker-start',\n  'markerheight',\n  'markerunits',\n  'markerwidth',\n  'maskcontentunits',\n  'maskunits',\n  'max',\n  'mask',\n  'media',\n  'method',\n  'mode',\n  'min',\n  'name',\n  'numoctaves',\n  'offset',\n  'operator',\n  'opacity',\n  'order',\n  'orient',\n  'orientation',\n  'origin',\n  'overflow',\n  'paint-order',\n  'path',\n  'pathlength',\n  'patterncontentunits',\n  'patterntransform',\n  'patternunits',\n  'points',\n  'preservealpha',\n  'preserveaspectratio',\n  'primitiveunits',\n  'r',\n  'rx',\n  'ry',\n  'radius',\n  'refx',\n  'refy',\n  'repeatcount',\n  'repeatdur',\n  'restart',\n  'result',\n  'rotate',\n  'scale',\n  'seed',\n  'shape-rendering',\n  'slope',\n  'specularconstant',\n  'specularexponent',\n  'spreadmethod',\n  'startoffset',\n  'stddeviation',\n  'stitchtiles',\n  'stop-color',\n  'stop-opacity',\n  'stroke-dasharray',\n  'stroke-dashoffset',\n  'stroke-linecap',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke',\n  'stroke-width',\n  'style',\n  'surfacescale',\n  'systemlanguage',\n  'tabindex',\n  'tablevalues',\n  'targetx',\n  'targety',\n  'transform',\n  'transform-origin',\n  'text-anchor',\n  'text-decoration',\n  'text-rendering',\n  'textlength',\n  'type',\n  'u1',\n  'u2',\n  'unicode',\n  'values',\n  'viewbox',\n  'visibility',\n  'version',\n  'vert-adv-y',\n  'vert-origin-x',\n  'vert-origin-y',\n  'width',\n  'word-spacing',\n  'wrap',\n  'writing-mode',\n  'xchannelselector',\n  'ychannelselector',\n  'x',\n  'x1',\n  'x2',\n  'xmlns',\n  'y',\n  'y1',\n  'y2',\n  'z',\n  'zoomandpan',\n] as const);\n\nexport const mathMl = freeze([\n  'accent',\n  'accentunder',\n  'align',\n  'bevelled',\n  'close',\n  'columnsalign',\n  'columnlines',\n  'columnspan',\n  'denomalign',\n  'depth',\n  'dir',\n  'display',\n  'displaystyle',\n  'encoding',\n  'fence',\n  'frame',\n  'height',\n  'href',\n  'id',\n  'largeop',\n  'length',\n  'linethickness',\n  'lspace',\n  'lquote',\n  'mathbackground',\n  'mathcolor',\n  'mathsize',\n  'mathvariant',\n  'maxsize',\n  'minsize',\n  'movablelimits',\n  'notation',\n  'numalign',\n  'open',\n  'rowalign',\n  'rowlines',\n  'rowspacing',\n  'rowspan',\n  'rspace',\n  'rquote',\n  'scriptlevel',\n  'scriptminsize',\n  'scriptsizemultiplier',\n  'selection',\n  'separator',\n  'separators',\n  'stretchy',\n  'subscriptshift',\n  'supscriptshift',\n  'symmetric',\n  'voffset',\n  'width',\n  'xmlns',\n]);\n\nexport const xml = freeze([\n  'xlink:href',\n  'xml:id',\n  'xlink:title',\n  'xml:space',\n  'xmlns:xlink',\n] as const);\n","import { seal } from './utils.js';\n\n// eslint-disable-next-line unicorn/better-regex\nexport const MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\nexport const ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\nexport const TMPLIT_EXPR = seal(/\\$\\{[\\w\\W]*/gm); // eslint-disable-line unicorn/better-regex\nexport const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]+$/); // eslint-disable-line no-useless-escape\nexport const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\nexport const IS_ALLOWED_URI = seal(\n  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n);\nexport const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\nexport const ATTR_WHITESPACE = seal(\n  /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n);\nexport const DOCTYPE_NAME = seal(/^html$/i);\nexport const CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n","/* eslint-disable @typescript-eslint/indent */\n\nimport type { TrustedHTML, TrustedTypesWindow } from 'trusted-types/lib';\nimport type { Config, UseProfilesConfig } from './config';\nimport * as TAGS from './tags.js';\nimport * as ATTRS from './attrs.js';\nimport * as EXPRESSIONS from './regexp.js';\nimport {\n  addToSet,\n  clone,\n  entries,\n  freeze,\n  arrayForEach,\n  arrayLastIndexOf,\n  arrayPop,\n  arrayPush,\n  arraySplice,\n  stringMatch,\n  stringReplace,\n  stringToLowerCase,\n  stringToString,\n  stringIndexOf,\n  stringTrim,\n  regExpTest,\n  typeErrorCreate,\n  lookupGetter,\n  create,\n  objectHasOwnProperty,\n} from './utils.js';\n\nexport type { Config } from './config';\n\ndeclare const VERSION: string;\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\nconst NODE_TYPE = {\n  element: 1,\n  attribute: 2,\n  text: 3,\n  cdataSection: 4,\n  entityReference: 5, // Deprecated\n  entityNode: 6, // Deprecated\n  progressingInstruction: 7,\n  comment: 8,\n  document: 9,\n  documentType: 10,\n  documentFragment: 11,\n  notation: 12, // Deprecated\n};\n\nconst getGlobal = function (): WindowLike {\n  return typeof window === 'undefined' ? null : window;\n};\n\n/**\n * Creates a no-op policy for internal use only.\n * Don't export this function outside this module!\n * @param trustedTypes The policy factory.\n * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n * @return The policy created (or null, if Trusted Types\n * are not supported or creating the policy failed).\n */\nconst _createTrustedTypesPolicy = function (\n  trustedTypes: TrustedTypePolicyFactory,\n  purifyHostElement: HTMLScriptElement\n) {\n  if (\n    typeof trustedTypes !== 'object' ||\n    typeof trustedTypes.createPolicy !== 'function'\n  ) {\n    return null;\n  }\n\n  // Allow the callers to control the unique policy name\n  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n  // Policy creation with duplicate names throws in Trusted Types.\n  let suffix = null;\n  const ATTR_NAME = 'data-tt-policy-suffix';\n  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n    suffix = purifyHostElement.getAttribute(ATTR_NAME);\n  }\n\n  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n  try {\n    return trustedTypes.createPolicy(policyName, {\n      createHTML(html) {\n        return html;\n      },\n      createScriptURL(scriptUrl) {\n        return scriptUrl;\n      },\n    });\n  } catch (_) {\n    // Policy creation failed (most likely another DOMPurify script has\n    // already run). Skip creating the policy, as this will only cause errors\n    // if TT are enforced.\n    console.warn(\n      'TrustedTypes policy ' + policyName + ' could not be created.'\n    );\n    return null;\n  }\n};\n\nconst _createHooksMap = function (): HooksMap {\n  return {\n    afterSanitizeAttributes: [],\n    afterSanitizeElements: [],\n    afterSanitizeShadowDOM: [],\n    beforeSanitizeAttributes: [],\n    beforeSanitizeElements: [],\n    beforeSanitizeShadowDOM: [],\n    uponSanitizeAttribute: [],\n    uponSanitizeElement: [],\n    uponSanitizeShadowNode: [],\n  };\n};\n\nfunction createDOMPurify(window: WindowLike = getGlobal()): DOMPurify {\n  const DOMPurify: DOMPurify = (root: WindowLike) => createDOMPurify(root);\n\n  DOMPurify.version = VERSION;\n\n  DOMPurify.removed = [];\n\n  if (\n    !window ||\n    !window.document ||\n    window.document.nodeType !== NODE_TYPE.document ||\n    !window.Element\n  ) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n\n    return DOMPurify;\n  }\n\n  let { document } = window;\n\n  const originalDocument = document;\n  const currentScript: HTMLScriptElement =\n    originalDocument.currentScript as HTMLScriptElement;\n  const {\n    DocumentFragment,\n    HTMLTemplateElement,\n    Node,\n    Element,\n    NodeFilter,\n    NamedNodeMap = window.NamedNodeMap || (window as any).MozNamedAttrMap,\n    HTMLFormElement,\n    DOMParser,\n    trustedTypes,\n  } = window;\n\n  const ElementPrototype = Element.prototype;\n\n  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n  const remove = lookupGetter(ElementPrototype, 'remove');\n  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n  if (typeof HTMLTemplateElement === 'function') {\n    const template = document.createElement('template');\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n\n  let trustedTypesPolicy;\n  let emptyHTML = '';\n\n  const {\n    implementation,\n    createNodeIterator,\n    createDocumentFragment,\n    getElementsByTagName,\n  } = document;\n  const { importNode } = originalDocument;\n\n  let hooks = _createHooksMap();\n\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  DOMPurify.isSupported =\n    typeof entries === 'function' &&\n    typeof getParentNode === 'function' &&\n    implementation &&\n    implementation.createHTMLDocument !== undefined;\n\n  const {\n    MUSTACHE_EXPR,\n    ERB_EXPR,\n    TMPLIT_EXPR,\n    DATA_ATTR,\n    ARIA_ATTR,\n    IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE,\n    CUSTOM_ELEMENT,\n  } = EXPRESSIONS;\n\n  let { IS_ALLOWED_URI } = EXPRESSIONS;\n\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n\n  /* allowed element names */\n  let ALLOWED_TAGS = null;\n  const DEFAULT_ALLOWED_TAGS = addToSet({}, [\n    ...TAGS.html,\n    ...TAGS.svg,\n    ...TAGS.svgFilters,\n    ...TAGS.mathMl,\n    ...TAGS.text,\n  ]);\n\n  /* Allowed attribute names */\n  let ALLOWED_ATTR = null;\n  const DEFAULT_ALLOWED_ATTR = addToSet({}, [\n    ...ATTRS.html,\n    ...ATTRS.svg,\n    ...ATTRS.mathMl,\n    ...ATTRS.xml,\n  ]);\n\n  /*\n   * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.\n   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n   */\n  let CUSTOM_ELEMENT_HANDLING = Object.seal(\n    create(null, {\n      tagNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null,\n      },\n      attributeNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null,\n      },\n      allowCustomizedBuiltInElements: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: false,\n      },\n    })\n  );\n\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n  let FORBID_TAGS = null;\n\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n  let FORBID_ATTR = null;\n\n  /* Decide if ARIA attributes are okay */\n  let ALLOW_ARIA_ATTR = true;\n\n  /* Decide if custom data attributes are okay */\n  let ALLOW_DATA_ATTR = true;\n\n  /* Decide if unknown protocols are okay */\n  let ALLOW_UNKNOWN_PROTOCOLS = false;\n\n  /* Decide if self-closing tags in attributes are allowed.\n   * Usually removed due to a mXSS issue in jQuery 3.0 */\n  let ALLOW_SELF_CLOSE_IN_ATTR = true;\n\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n  let SAFE_FOR_TEMPLATES = false;\n\n  /* Output should be safe even for XML used within HTML and alike.\n   * This means, DOMPurify removes comments when containing risky content.\n   */\n  let SAFE_FOR_XML = true;\n\n  /* Decide if document with <html>... should be returned */\n  let WHOLE_DOCUMENT = false;\n\n  /* Track whether config is already set on this instance of DOMPurify. */\n  let SET_CONFIG = false;\n\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n  let FORCE_BODY = false;\n\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n   * string (or a TrustedHTML object if Trusted Types are supported).\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n  let RETURN_DOM = false;\n\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n   * string  (or a TrustedHTML object if Trusted Types are supported) */\n  let RETURN_DOM_FRAGMENT = false;\n\n  /* Try to return a Trusted Type object instead of a string, return a string in\n   * case Trusted Types are not supported  */\n  let RETURN_TRUSTED_TYPE = false;\n\n  /* Output should be free from DOM clobbering attacks?\n   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n   */\n  let SANITIZE_DOM = true;\n\n  /* Achieve full DOM Clobbering protection by isolating the namespace of named\n   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n   *\n   * HTML/DOM spec rules that enable DOM Clobbering:\n   *   - Named Access on Window (§7.3.3)\n   *   - DOM Tree Accessors (§3.1.5)\n   *   - Form Element Parent-Child Relations (§4.10.3)\n   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n   *   - HTMLCollection (§4.2.10.2)\n   *\n   * Namespace isolation is implemented by prefixing `id` and `name` attributes\n   * with a constant string, i.e., `user-content-`\n   */\n  let SANITIZE_NAMED_PROPS = false;\n  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n\n  /* Keep element content when removing element? */\n  let KEEP_CONTENT = true;\n\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n  let IN_PLACE = false;\n\n  /* Allow usage of profiles like html, svg and mathMl */\n  let USE_PROFILES: UseProfilesConfig | false = {};\n\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n  let FORBID_CONTENTS = null;\n  const DEFAULT_FORBID_CONTENTS = addToSet({}, [\n    'annotation-xml',\n    'audio',\n    'colgroup',\n    'desc',\n    'foreignobject',\n    'head',\n    'iframe',\n    'math',\n    'mi',\n    'mn',\n    'mo',\n    'ms',\n    'mtext',\n    'noembed',\n    'noframes',\n    'noscript',\n    'plaintext',\n    'script',\n    'style',\n    'svg',\n    'template',\n    'thead',\n    'title',\n    'video',\n    'xmp',\n  ]);\n\n  /* Tags that are safe for data: URIs */\n  let DATA_URI_TAGS = null;\n  const DEFAULT_DATA_URI_TAGS = addToSet({}, [\n    'audio',\n    'video',\n    'img',\n    'source',\n    'image',\n    'track',\n  ]);\n\n  /* Attributes safe for values like \"javascript:\" */\n  let URI_SAFE_ATTRIBUTES = null;\n  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, [\n    'alt',\n    'class',\n    'for',\n    'id',\n    'label',\n    'name',\n    'pattern',\n    'placeholder',\n    'role',\n    'summary',\n    'title',\n    'value',\n    'style',\n    'xmlns',\n  ]);\n\n  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n  /* Document namespace */\n  let NAMESPACE = HTML_NAMESPACE;\n  let IS_EMPTY_INPUT = false;\n\n  /* Allowed XHTML+XML namespaces */\n  let ALLOWED_NAMESPACES = null;\n  const DEFAULT_ALLOWED_NAMESPACES = addToSet(\n    {},\n    [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE],\n    stringToString\n  );\n\n  let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, [\n    'mi',\n    'mo',\n    'mn',\n    'ms',\n    'mtext',\n  ]);\n\n  let HTML_INTEGRATION_POINTS = addToSet({}, ['annotation-xml']);\n\n  // Certain elements are allowed in both SVG and HTML\n  // namespace. We need to specify them explicitly\n  // so that they don't get erroneously deleted from\n  // HTML namespace.\n  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, [\n    'title',\n    'style',\n    'font',\n    'a',\n    'script',\n  ]);\n\n  /* Parsing of strict XHTML documents */\n  let PARSER_MEDIA_TYPE: null | DOMParserSupportedType = null;\n  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n  let transformCaseFunc: null | Parameters<typeof addToSet>[2] = null;\n\n  /* Keep a reference to config to pass to hooks */\n  let CONFIG: Config | null = null;\n\n  /* Ideally, do not touch anything below this line */\n  /* ______________________________________________ */\n\n  const formElement = document.createElement('form');\n\n  const isRegexOrFunction = function (\n    testValue: unknown\n  ): testValue is Function | RegExp {\n    return testValue instanceof RegExp || testValue instanceof Function;\n  };\n\n  /**\n   * _parseConfig\n   *\n   * @param cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n  const _parseConfig = function (cfg: Config = {}): void {\n    if (CONFIG && CONFIG === cfg) {\n      return;\n    }\n\n    /* Shield configuration object from tampering */\n    if (!cfg || typeof cfg !== 'object') {\n      cfg = {};\n    }\n\n    /* Shield configuration object from prototype pollution */\n    cfg = clone(cfg);\n\n    PARSER_MEDIA_TYPE =\n      // eslint-disable-next-line unicorn/prefer-includes\n      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1\n        ? DEFAULT_PARSER_MEDIA_TYPE\n        : cfg.PARSER_MEDIA_TYPE;\n\n    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n    transformCaseFunc =\n      PARSER_MEDIA_TYPE === 'application/xhtml+xml'\n        ? stringToString\n        : stringToLowerCase;\n\n    /* Set configuration parameters */\n    ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS')\n      ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc)\n      : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR')\n      ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc)\n      : DEFAULT_ALLOWED_ATTR;\n    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES')\n      ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString)\n      : DEFAULT_ALLOWED_NAMESPACES;\n    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR')\n      ? addToSet(\n          clone(DEFAULT_URI_SAFE_ATTRIBUTES),\n          cfg.ADD_URI_SAFE_ATTR,\n          transformCaseFunc\n        )\n      : DEFAULT_URI_SAFE_ATTRIBUTES;\n    DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS')\n      ? addToSet(\n          clone(DEFAULT_DATA_URI_TAGS),\n          cfg.ADD_DATA_URI_TAGS,\n          transformCaseFunc\n        )\n      : DEFAULT_DATA_URI_TAGS;\n    FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS')\n      ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc)\n      : DEFAULT_FORBID_CONTENTS;\n    FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS')\n      ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc)\n      : {};\n    FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR')\n      ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc)\n      : {};\n    USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES')\n      ? cfg.USE_PROFILES\n      : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n    IS_ALLOWED_URI = cfg.ALLOWED_URI_REGEXP || EXPRESSIONS.IS_ALLOWED_URI;\n    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n    MATHML_TEXT_INTEGRATION_POINTS =\n      cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;\n    HTML_INTEGRATION_POINTS =\n      cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;\n\n    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n    if (\n      cfg.CUSTOM_ELEMENT_HANDLING &&\n      isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)\n    ) {\n      CUSTOM_ELEMENT_HANDLING.tagNameCheck =\n        cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n    }\n\n    if (\n      cfg.CUSTOM_ELEMENT_HANDLING &&\n      isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)\n    ) {\n      CUSTOM_ELEMENT_HANDLING.attributeNameCheck =\n        cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n    }\n\n    if (\n      cfg.CUSTOM_ELEMENT_HANDLING &&\n      typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements ===\n        'boolean'\n    ) {\n      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements =\n        cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n    }\n\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n\n    /* Parse profile info */\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, TAGS.text);\n      ALLOWED_ATTR = [];\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, TAGS.html);\n        addToSet(ALLOWED_ATTR, ATTRS.html);\n      }\n\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, TAGS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, TAGS.svgFilters);\n        addToSet(ALLOWED_ATTR, ATTRS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, TAGS.mathMl);\n        addToSet(ALLOWED_ATTR, ATTRS.mathMl);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n    }\n\n    /* Merge configuration parameters */\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n    }\n\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n    }\n\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n    }\n\n    if (cfg.FORBID_CONTENTS) {\n      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n        FORBID_CONTENTS = clone(FORBID_CONTENTS);\n      }\n\n      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n    }\n\n    /* Add #text in case KEEP_CONTENT is set to true */\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n      delete FORBID_TAGS.tbody;\n    }\n\n    if (cfg.TRUSTED_TYPES_POLICY) {\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n        throw typeErrorCreate(\n          'TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.'\n        );\n      }\n\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n        throw typeErrorCreate(\n          'TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.'\n        );\n      }\n\n      // Overwrite existing TrustedTypes policy.\n      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;\n\n      // Sign local variables required by `sanitize`.\n      emptyHTML = trustedTypesPolicy.createHTML('');\n    } else {\n      // Uninitialized policy, attempt to initialize the internal dompurify policy.\n      if (trustedTypesPolicy === undefined) {\n        trustedTypesPolicy = _createTrustedTypesPolicy(\n          trustedTypes,\n          currentScript\n        );\n      }\n\n      // If creating the internal policy succeeded sign internal variables.\n      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      }\n    }\n\n    // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n    if (freeze) {\n      freeze(cfg);\n    }\n\n    CONFIG = cfg;\n  };\n\n  /* Keep track of all possible SVG and MathML tags\n   * so that we can perform the namespace checks\n   * correctly. */\n  const ALL_SVG_TAGS = addToSet({}, [\n    ...TAGS.svg,\n    ...TAGS.svgFilters,\n    ...TAGS.svgDisallowed,\n  ]);\n  const ALL_MATHML_TAGS = addToSet({}, [\n    ...TAGS.mathMl,\n    ...TAGS.mathMlDisallowed,\n  ]);\n\n  /**\n   * @param element a DOM element whose namespace is being checked\n   * @returns Return false if the element has a\n   *  namespace that a spec-compliant parser would never\n   *  return. Return true otherwise.\n   */\n  const _checkValidNamespace = function (element: Element): boolean {\n    let parent = getParentNode(element);\n\n    // In JSDOM, if we're inside shadow DOM, then parentNode\n    // can be null. We just simulate parent in this case.\n    if (!parent || !parent.tagName) {\n      parent = {\n        namespaceURI: NAMESPACE,\n        tagName: 'template',\n      };\n    }\n\n    const tagName = stringToLowerCase(element.tagName);\n    const parentTagName = stringToLowerCase(parent.tagName);\n\n    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return false;\n    }\n\n    if (element.namespaceURI === SVG_NAMESPACE) {\n      // The only way to switch from HTML namespace to SVG\n      // is via <svg>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'svg';\n      }\n\n      // The only way to switch from MathML to SVG is via`\n      // svg if parent is either <annotation-xml> or MathML\n      // text integration points.\n      if (parent.namespaceURI === MATHML_NAMESPACE) {\n        return (\n          tagName === 'svg' &&\n          (parentTagName === 'annotation-xml' ||\n            MATHML_TEXT_INTEGRATION_POINTS[parentTagName])\n        );\n      }\n\n      // We only allow elements that are defined in SVG\n      // spec. All others are disallowed in SVG namespace.\n      return Boolean(ALL_SVG_TAGS[tagName]);\n    }\n\n    if (element.namespaceURI === MATHML_NAMESPACE) {\n      // The only way to switch from HTML namespace to MathML\n      // is via <math>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'math';\n      }\n\n      // The only way to switch from SVG to MathML is via\n      // <math> and HTML integration points\n      if (parent.namespaceURI === SVG_NAMESPACE) {\n        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n      }\n\n      // We only allow elements that are defined in MathML\n      // spec. All others are disallowed in MathML namespace.\n      return Boolean(ALL_MATHML_TAGS[tagName]);\n    }\n\n    if (element.namespaceURI === HTML_NAMESPACE) {\n      // The only way to switch from SVG to HTML is via\n      // HTML integration points, and from MathML to HTML\n      // is via MathML text integration points\n      if (\n        parent.namespaceURI === SVG_NAMESPACE &&\n        !HTML_INTEGRATION_POINTS[parentTagName]\n      ) {\n        return false;\n      }\n\n      if (\n        parent.namespaceURI === MATHML_NAMESPACE &&\n        !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]\n      ) {\n        return false;\n      }\n\n      // We disallow tags that are specific for MathML\n      // or SVG and should never appear in HTML namespace\n      return (\n        !ALL_MATHML_TAGS[tagName] &&\n        (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName])\n      );\n    }\n\n    // For XHTML and XML documents that support custom namespaces\n    if (\n      PARSER_MEDIA_TYPE === 'application/xhtml+xml' &&\n      ALLOWED_NAMESPACES[element.namespaceURI]\n    ) {\n      return true;\n    }\n\n    // The code should never reach this place (this means\n    // that the element somehow got namespace that is not\n    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n    // Return false just in case.\n    return false;\n  };\n\n  /**\n   * _forceRemove\n   *\n   * @param node a DOM node\n   */\n  const _forceRemove = function (node: Node): void {\n    arrayPush(DOMPurify.removed, { element: node });\n\n    try {\n      // eslint-disable-next-line unicorn/prefer-dom-node-remove\n      getParentNode(node).removeChild(node);\n    } catch (_) {\n      remove(node);\n    }\n  };\n\n  /**\n   * _removeAttribute\n   *\n   * @param name an Attribute name\n   * @param element a DOM node\n   */\n  const _removeAttribute = function (name: string, element: Element): void {\n    try {\n      arrayPush(DOMPurify.removed, {\n        attribute: element.getAttributeNode(name),\n        from: element,\n      });\n    } catch (_) {\n      arrayPush(DOMPurify.removed, {\n        attribute: null,\n        from: element,\n      });\n    }\n\n    element.removeAttribute(name);\n\n    // We void attribute values for unremovable \"is\" attributes\n    if (name === 'is') {\n      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n        try {\n          _forceRemove(element);\n        } catch (_) {}\n      } else {\n        try {\n          element.setAttribute(name, '');\n        } catch (_) {}\n      }\n    }\n  };\n\n  /**\n   * _initDocument\n   *\n   * @param dirty - a string of dirty markup\n   * @return a DOM, filled with the dirty markup\n   */\n  const _initDocument = function (dirty: string): Document {\n    /* Create a HTML document */\n    let doc = null;\n    let leadingWhitespace = null;\n\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    } else {\n      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n      const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n      leadingWhitespace = matches && matches[0];\n    }\n\n    if (\n      PARSER_MEDIA_TYPE === 'application/xhtml+xml' &&\n      NAMESPACE === HTML_NAMESPACE\n    ) {\n      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n      dirty =\n        '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' +\n        dirty +\n        '</body></html>';\n    }\n\n    const dirtyPayload = trustedTypesPolicy\n      ? trustedTypesPolicy.createHTML(dirty)\n      : dirty;\n    /*\n     * Use the DOMParser API by default, fallback later if needs be\n     * DOMParser not work for svg when has multiple root element.\n     */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      try {\n        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n      } catch (_) {}\n    }\n\n    /* Use createHTMLDocument in case DOMParser is not available */\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createDocument(NAMESPACE, 'template', null);\n      try {\n        doc.documentElement.innerHTML = IS_EMPTY_INPUT\n          ? emptyHTML\n          : dirtyPayload;\n      } catch (_) {\n        // Syntax error if dirtyPayload is invalid xml\n      }\n    }\n\n    const body = doc.body || doc.documentElement;\n\n    if (dirty && leadingWhitespace) {\n      body.insertBefore(\n        document.createTextNode(leadingWhitespace),\n        body.childNodes[0] || null\n      );\n    }\n\n    /* Work on whole document or just its body */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      return getElementsByTagName.call(\n        doc,\n        WHOLE_DOCUMENT ? 'html' : 'body'\n      )[0];\n    }\n\n    return WHOLE_DOCUMENT ? doc.documentElement : body;\n  };\n\n  /**\n   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n   *\n   * @param root The root element or node to start traversing on.\n   * @return The created NodeIterator\n   */\n  const _createNodeIterator = function (root: Node): NodeIterator {\n    return createNodeIterator.call(\n      root.ownerDocument || root,\n      root,\n      // eslint-disable-next-line no-bitwise\n      NodeFilter.SHOW_ELEMENT |\n        NodeFilter.SHOW_COMMENT |\n        NodeFilter.SHOW_TEXT |\n        NodeFilter.SHOW_PROCESSING_INSTRUCTION |\n        NodeFilter.SHOW_CDATA_SECTION,\n      null\n    );\n  };\n\n  /**\n   * _isClobbered\n   *\n   * @param element element to check for clobbering attacks\n   * @return true if clobbered, false if safe\n   */\n  const _isClobbered = function (element: Element): boolean {\n    return (\n      element instanceof HTMLFormElement &&\n      (typeof element.nodeName !== 'string' ||\n        typeof element.textContent !== 'string' ||\n        typeof element.removeChild !== 'function' ||\n        !(element.attributes instanceof NamedNodeMap) ||\n        typeof element.removeAttribute !== 'function' ||\n        typeof element.setAttribute !== 'function' ||\n        typeof element.namespaceURI !== 'string' ||\n        typeof element.insertBefore !== 'function' ||\n        typeof element.hasChildNodes !== 'function')\n    );\n  };\n\n  /**\n   * Checks whether the given object is a DOM node.\n   *\n   * @param value object to check whether it's a DOM node\n   * @return true is object is a DOM node\n   */\n  const _isNode = function (value: unknown): value is Node {\n    return typeof Node === 'function' && value instanceof Node;\n  };\n\n  function _executeHooks<\n    T extends\n      | NodeHook\n      | ElementHook\n      | DocumentFragmentHook\n      | UponSanitizeElementHook\n      | UponSanitizeAttributeHook\n  >(hooks: T[], currentNode: Parameters<T>[0], data: Parameters<T>[1]): void {\n    arrayForEach(hooks, (hook) => {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  }\n\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   * @param currentNode to check for permission to exist\n   * @return true if node was killed, false if left alive\n   */\n  const _sanitizeElements = function (currentNode: any): boolean {\n    let content = null;\n\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeElements, currentNode, null);\n\n    /* Check if element is clobbered or can clobber */\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Now let's check the element's type and name */\n    const tagName = transformCaseFunc(currentNode.nodeName);\n\n    /* Execute a hook if present */\n    _executeHooks(hooks.uponSanitizeElement, currentNode, {\n      tagName,\n      allowedTags: ALLOWED_TAGS,\n    });\n\n    /* Detect mXSS attempts abusing namespace confusion */\n    if (\n      currentNode.hasChildNodes() &&\n      !_isNode(currentNode.firstElementChild) &&\n      regExpTest(/<[/\\w!]/g, currentNode.innerHTML) &&\n      regExpTest(/<[/\\w!]/g, currentNode.textContent)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove any occurrence of processing instructions */\n    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove any kind of possibly harmful comments */\n    if (\n      SAFE_FOR_XML &&\n      currentNode.nodeType === NODE_TYPE.comment &&\n      regExpTest(/<[/\\w]/g, currentNode.data)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove element if anything forbids its presence */\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Check if we have a custom element to handle */\n      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n        if (\n          CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp &&\n          regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)\n        ) {\n          return false;\n        }\n\n        if (\n          CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function &&\n          CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)\n        ) {\n          return false;\n        }\n      }\n\n      /* Keep content except for bad-listed elements */\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n        const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n\n        if (childNodes && parentNode) {\n          const childCount = childNodes.length;\n\n          for (let i = childCount - 1; i >= 0; --i) {\n            const childClone = cloneNode(childNodes[i], true);\n            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;\n            parentNode.insertBefore(childClone, getNextSibling(currentNode));\n          }\n        }\n      }\n\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Check whether element has a valid namespace */\n    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Make sure that older browsers don't get fallback-tag mXSS */\n    if (\n      (tagName === 'noscript' ||\n        tagName === 'noembed' ||\n        tagName === 'noframes') &&\n      regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Sanitize element content to be template-safe */\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], (expr) => {\n        content = stringReplace(content, expr, ' ');\n      });\n\n      if (currentNode.textContent !== content) {\n        arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });\n        currentNode.textContent = content;\n      }\n    }\n\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeElements, currentNode, null);\n\n    return false;\n  };\n\n  /**\n   * _isValidAttribute\n   *\n   * @param lcTag Lowercase tag name of containing element.\n   * @param lcName Lowercase attribute name.\n   * @param value Attribute value.\n   * @return Returns true if `value` is valid, otherwise false.\n   */\n  // eslint-disable-next-line complexity\n  const _isValidAttribute = function (\n    lcTag: string,\n    lcName: string,\n    value: string\n  ): boolean {\n    /* Make sure attribute cannot clobber */\n    if (\n      SANITIZE_DOM &&\n      (lcName === 'id' || lcName === 'name') &&\n      (value in document || value in formElement)\n    ) {\n      return false;\n    }\n\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n    if (\n      ALLOW_DATA_ATTR &&\n      !FORBID_ATTR[lcName] &&\n      regExpTest(DATA_ATTR, lcName)\n    ) {\n      // This attribute is safe\n    } else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) {\n      // This attribute is safe\n      /* Otherwise, check the name is permitted */\n    } else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      if (\n        // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n        (_isBasicCustomElement(lcTag) &&\n          ((CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp &&\n            regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag)) ||\n            (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function &&\n              CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag))) &&\n          ((CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp &&\n            regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName)) ||\n            (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function &&\n              CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)))) ||\n        // Alternative, second condition checks if it's an `is`-attribute, AND\n        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        (lcName === 'is' &&\n          CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements &&\n          ((CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp &&\n            regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value)) ||\n            (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function &&\n              CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))))\n      ) {\n        // If user has supplied a regexp or function in CUSTOM_ELEMENT_HANDLING.tagNameCheck, we need to also allow derived custom elements using the same tagName test.\n        // Additionally, we need to allow attributes passing the CUSTOM_ELEMENT_HANDLING.attributeNameCheck user has configured, as custom elements can define these at their own discretion.\n      } else {\n        return false;\n      }\n      /* Check value is safe. First, is attr inert? If so, is safe */\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) {\n      // This attribute is safe\n      /* Check no script, data or unknown possibly unsafe URI\n        unless we know URI values are safe for that attribute */\n    } else if (\n      regExpTest(IS_ALLOWED_URI, stringReplace(value, ATTR_WHITESPACE, ''))\n    ) {\n      // This attribute is safe\n      /* Keep image data URIs alive if src/xlink:href is allowed */\n      /* Further prevent gadget XSS for dynamically built script tags */\n    } else if (\n      (lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') &&\n      lcTag !== 'script' &&\n      stringIndexOf(value, 'data:') === 0 &&\n      DATA_URI_TAGS[lcTag]\n    ) {\n      // This attribute is safe\n      /* Allow unknown protocols: This provides support for links that\n        are handled by protocol handlers which may be unknown ahead of\n        time, e.g. fb:, spotify: */\n    } else if (\n      ALLOW_UNKNOWN_PROTOCOLS &&\n      !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))\n    ) {\n      // This attribute is safe\n      /* Check for binary attributes */\n    } else if (value) {\n      return false;\n    } else {\n      // Binary attributes are safe at this point\n      /* Anything else, presume unsafe, do not add it back */\n    }\n\n    return true;\n  };\n\n  /**\n   * _isBasicCustomElement\n   * checks if at least one dash is included in tagName, and it's not the first char\n   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n   *\n   * @param tagName name of the tag of the node to sanitize\n   * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n   */\n  const _isBasicCustomElement = function (tagName: string): RegExpMatchArray {\n    return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);\n  };\n\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param currentNode to sanitize\n   */\n  const _sanitizeAttributes = function (currentNode: Element): void {\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);\n\n    const { attributes } = currentNode;\n\n    /* Check if we have attributes; if not we might have a text node */\n    if (!attributes || _isClobbered(currentNode)) {\n      return;\n    }\n\n    const hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR,\n      forceKeepAttr: undefined,\n    };\n    let l = attributes.length;\n\n    /* Go backwards over all attributes; safely remove bad ones */\n    while (l--) {\n      const attr = attributes[l];\n      const { name, namespaceURI, value: attrValue } = attr;\n      const lcName = transformCaseFunc(name);\n\n      let value = name === 'value' ? attrValue : stringTrim(attrValue);\n\n      /* Execute a hook if present */\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n      _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);\n      value = hookEvent.attrValue;\n\n      /* Full DOM Clobbering protection via namespace isolation,\n       * Prefix id and name attributes with `user-content-`\n       */\n      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n        // Remove the attribute with this value\n        _removeAttribute(name, currentNode);\n\n        // Prefix the value and later re-create the attribute with the sanitized value\n        value = SANITIZE_NAMED_PROPS_PREFIX + value;\n      }\n\n      /* Work around a security issue with comments inside attributes */\n      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\\/(style|title)/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Did the hooks approve of the attribute? */\n      if (hookEvent.forceKeepAttr) {\n        continue;\n      }\n\n      /* Remove attribute */\n      _removeAttribute(name, currentNode);\n\n      /* Did the hooks approve of the attribute? */\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n\n      /* Work around a security issue in jQuery 3.0 */\n      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Sanitize attribute content to be template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], (expr) => {\n          value = stringReplace(value, expr, ' ');\n        });\n      }\n\n      /* Is `value` valid for this attribute? */\n      const lcTag = transformCaseFunc(currentNode.nodeName);\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        continue;\n      }\n\n      /* Handle attributes that require Trusted Types */\n      if (\n        trustedTypesPolicy &&\n        typeof trustedTypes === 'object' &&\n        typeof trustedTypes.getAttributeType === 'function'\n      ) {\n        if (namespaceURI) {\n          /* Namespaces are not yet supported, see https://bugs.chromium.org/p/chromium/issues/detail?id=1305293 */\n        } else {\n          switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n            case 'TrustedHTML': {\n              value = trustedTypesPolicy.createHTML(value);\n              break;\n            }\n\n            case 'TrustedScriptURL': {\n              value = trustedTypesPolicy.createScriptURL(value);\n              break;\n            }\n\n            default: {\n              break;\n            }\n          }\n        }\n      }\n\n      /* Handle invalid data-* attribute set by try-catching it */\n      try {\n        if (namespaceURI) {\n          currentNode.setAttributeNS(namespaceURI, name, value);\n        } else {\n          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n          currentNode.setAttribute(name, value);\n        }\n\n        if (_isClobbered(currentNode)) {\n          _forceRemove(currentNode);\n        } else {\n          arrayPop(DOMPurify.removed);\n        }\n      } catch (_) {}\n    }\n\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);\n  };\n\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param fragment to iterate over recursively\n   */\n  const _sanitizeShadowDOM = function (fragment: DocumentFragment): void {\n    let shadowNode = null;\n    const shadowIterator = _createNodeIterator(fragment);\n\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);\n\n    while ((shadowNode = shadowIterator.nextNode())) {\n      /* Execute a hook if present */\n      _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);\n\n      /* Sanitize tags and elements */\n      _sanitizeElements(shadowNode);\n\n      /* Check attributes next */\n      _sanitizeAttributes(shadowNode);\n\n      /* Deep shadow DOM detected */\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n    }\n\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);\n  };\n\n  // eslint-disable-next-line complexity\n  DOMPurify.sanitize = function (dirty, cfg = {}) {\n    let body = null;\n    let importedNode = null;\n    let currentNode = null;\n    let returnNode = null;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n    IS_EMPTY_INPUT = !dirty;\n    if (IS_EMPTY_INPUT) {\n      dirty = '<!-->';\n    }\n\n    /* Stringify, in case dirty is an object */\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      if (typeof dirty.toString === 'function') {\n        dirty = dirty.toString();\n        if (typeof dirty !== 'string') {\n          throw typeErrorCreate('dirty is not a string, aborting');\n        }\n      } else {\n        throw typeErrorCreate('toString is not a function');\n      }\n    }\n\n    /* Return dirty HTML if DOMPurify cannot run */\n    if (!DOMPurify.isSupported) {\n      return dirty;\n    }\n\n    /* Assign config vars */\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n\n    /* Clean up removed elements */\n    DOMPurify.removed = [];\n\n    /* Check if dirty is correctly typed for IN_PLACE */\n    if (typeof dirty === 'string') {\n      IN_PLACE = false;\n    }\n\n    if (IN_PLACE) {\n      /* Do some early pre-sanitization to avoid unsafe root nodes */\n      if ((dirty as Node).nodeName) {\n        const tagName = transformCaseFunc((dirty as Node).nodeName);\n        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n          throw typeErrorCreate(\n            'root node is forbidden and cannot be sanitized in-place'\n          );\n        }\n      }\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!---->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n      if (\n        importedNode.nodeType === NODE_TYPE.element &&\n        importedNode.nodeName === 'BODY'\n      ) {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else if (importedNode.nodeName === 'HTML') {\n        body = importedNode;\n      } else {\n        // eslint-disable-next-line unicorn/prefer-dom-node-append\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (\n        !RETURN_DOM &&\n        !SAFE_FOR_TEMPLATES &&\n        !WHOLE_DOCUMENT &&\n        // eslint-disable-next-line unicorn/prefer-includes\n        dirty.indexOf('<') === -1\n      ) {\n        return trustedTypesPolicy && RETURN_TRUSTED_TYPE\n          ? trustedTypesPolicy.createHTML(dirty)\n          : dirty;\n      }\n\n      /* Initialize the document to work on */\n      body = _initDocument(dirty);\n\n      /* Check we have a DOM node from the data */\n      if (!body) {\n        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n      }\n    }\n\n    /* Remove first element node (ours) if FORCE_BODY is set */\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n\n    /* Get node iterator */\n    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n\n    /* Now start iterating over the created document */\n    while ((currentNode = nodeIterator.nextNode())) {\n      /* Sanitize tags and elements */\n      _sanitizeElements(currentNode);\n\n      /* Check attributes next */\n      _sanitizeAttributes(currentNode);\n\n      /* Shadow DOM detected, sanitize it */\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n    }\n\n    /* If we sanitized `dirty` in-place, return it. */\n    if (IN_PLACE) {\n      return dirty;\n    }\n\n    /* Return sanitized string or DOM */\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n\n        while (body.firstChild) {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n\n      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {\n        /*\n          AdoptNode() is not used because internal state is not reset\n          (e.g. the past names map of a HTMLFormElement), this is safe\n          in theory but we would rather not risk another attack vector.\n          The state that is cloned by importNode() is explicitly defined\n          by the specs.\n        */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n\n      return returnNode;\n    }\n\n    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n\n    /* Serialize doctype if allowed */\n    if (\n      WHOLE_DOCUMENT &&\n      ALLOWED_TAGS['!doctype'] &&\n      body.ownerDocument &&\n      body.ownerDocument.doctype &&\n      body.ownerDocument.doctype.name &&\n      regExpTest(EXPRESSIONS.DOCTYPE_NAME, body.ownerDocument.doctype.name)\n    ) {\n      serializedHTML =\n        '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n    }\n\n    /* Sanitize final string template-safe */\n    if (SAFE_FOR_TEMPLATES) {\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], (expr) => {\n        serializedHTML = stringReplace(serializedHTML, expr, ' ');\n      });\n    }\n\n    return trustedTypesPolicy && RETURN_TRUSTED_TYPE\n      ? trustedTypesPolicy.createHTML(serializedHTML)\n      : serializedHTML;\n  };\n\n  DOMPurify.setConfig = function (cfg = {}) {\n    _parseConfig(cfg);\n    SET_CONFIG = true;\n  };\n\n  DOMPurify.clearConfig = function () {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n\n  DOMPurify.isValidAttribute = function (tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n\n    const lcTag = transformCaseFunc(tag);\n    const lcName = transformCaseFunc(attr);\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n\n    arrayPush(hooks[entryPoint], hookFunction);\n  };\n\n  DOMPurify.removeHook = function (entryPoint, hookFunction) {\n    if (hookFunction !== undefined) {\n      const index = arrayLastIndexOf(hooks[entryPoint], hookFunction);\n\n      return index === -1\n        ? undefined\n        : arraySplice(hooks[entryPoint], index, 1)[0];\n    }\n\n    return arrayPop(hooks[entryPoint]);\n  };\n\n  DOMPurify.removeHooks = function (entryPoint) {\n    hooks[entryPoint] = [];\n  };\n\n  DOMPurify.removeAllHooks = function () {\n    hooks = _createHooksMap();\n  };\n\n  return DOMPurify;\n}\n\nexport default createDOMPurify();\n\nexport interface DOMPurify {\n  /**\n   * Creates a DOMPurify instance using the given window-like object. Defaults to `window`.\n   */\n  (root?: WindowLike): DOMPurify;\n\n  /**\n   * Version label, exposed for easier checks\n   * if DOMPurify is up to date or not\n   */\n  version: string;\n\n  /**\n   * Array of elements that DOMPurify removed during sanitation.\n   * Empty if nothing was removed.\n   */\n  removed: Array<RemovedElement | RemovedAttribute>;\n\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  isSupported: boolean;\n\n  /**\n   * Set the configuration once.\n   *\n   * @param cfg configuration object\n   */\n  setConfig(cfg?: Config): void;\n\n  /**\n   * Removes the configuration.\n   */\n  clearConfig(): void;\n\n  /**\n   * Provides core sanitation functionality.\n   *\n   * @param dirty string or DOM node\n   * @param cfg object\n   * @returns Sanitized TrustedHTML.\n   */\n  sanitize(\n    dirty: string | Node,\n    cfg: Config & { RETURN_TRUSTED_TYPE: true }\n  ): TrustedHTML;\n\n  /**\n   * Provides core sanitation functionality.\n   *\n   * @param dirty DOM node\n   * @param cfg object\n   * @returns Sanitized DOM node.\n   */\n  sanitize(dirty: Node, cfg: Config & { IN_PLACE: true }): Node;\n\n  /**\n   * Provides core sanitation functionality.\n   *\n   * @param dirty string or DOM node\n   * @param cfg object\n   * @returns Sanitized DOM node.\n   */\n  sanitize(dirty: string | Node, cfg: Config & { RETURN_DOM: true }): Node;\n\n  /**\n   * Provides core sanitation functionality.\n   *\n   * @param dirty string or DOM node\n   * @param cfg object\n   * @returns Sanitized document fragment.\n   */\n  sanitize(\n    dirty: string | Node,\n    cfg: Config & { RETURN_DOM_FRAGMENT: true }\n  ): DocumentFragment;\n\n  /**\n   * Provides core sanitation functionality.\n   *\n   * @param dirty string or DOM node\n   * @param cfg object\n   * @returns Sanitized string.\n   */\n  sanitize(dirty: string | Node, cfg?: Config): string;\n\n  /**\n   * Checks if an attribute value is valid.\n   * Uses last set config, if any. Otherwise, uses config defaults.\n   *\n   * @param tag Tag name of containing element.\n   * @param attr Attribute name.\n   * @param value Attribute value.\n   * @returns Returns true if `value` is valid. Otherwise, returns false.\n   */\n  isValidAttribute(tag: string, attr: string, value: string): boolean;\n\n  /**\n   * Adds a DOMPurify hook.\n   *\n   * @param entryPoint entry point for the hook to add\n   * @param hookFunction function to execute\n   */\n  addHook(entryPoint: BasicHookName, hookFunction: NodeHook): void;\n\n  /**\n   * Adds a DOMPurify hook.\n   *\n   * @param entryPoint entry point for the hook to add\n   * @param hookFunction function to execute\n   */\n  addHook(entryPoint: ElementHookName, hookFunction: ElementHook): void;\n\n  /**\n   * Adds a DOMPurify hook.\n   *\n   * @param entryPoint entry point for the hook to add\n   * @param hookFunction function to execute\n   */\n  addHook(\n    entryPoint: DocumentFragmentHookName,\n    hookFunction: DocumentFragmentHook\n  ): void;\n\n  /**\n   * Adds a DOMPurify hook.\n   *\n   * @param entryPoint entry point for the hook to add\n   * @param hookFunction function to execute\n   */\n  addHook(\n    entryPoint: 'uponSanitizeElement',\n    hookFunction: UponSanitizeElementHook\n  ): void;\n\n  /**\n   * Adds a DOMPurify hook.\n   *\n   * @param entryPoint entry point for the hook to add\n   * @param hookFunction function to execute\n   */\n  addHook(\n    entryPoint: 'uponSanitizeAttribute',\n    hookFunction: UponSanitizeAttributeHook\n  ): void;\n\n  /**\n   * Remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if hook not specified)\n   *\n   * @param entryPoint entry point for the hook to remove\n   * @param hookFunction optional specific hook to remove\n   * @returns removed hook\n   */\n  removeHook(\n    entryPoint: BasicHookName,\n    hookFunction?: NodeHook\n  ): NodeHook | undefined;\n\n  /**\n   * Remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if hook not specified)\n   *\n   * @param entryPoint entry point for the hook to remove\n   * @param hookFunction optional specific hook to remove\n   * @returns removed hook\n   */\n  removeHook(\n    entryPoint: ElementHookName,\n    hookFunction?: ElementHook\n  ): ElementHook | undefined;\n\n  /**\n   * Remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if hook not specified)\n   *\n   * @param entryPoint entry point for the hook to remove\n   * @param hookFunction optional specific hook to remove\n   * @returns removed hook\n   */\n  removeHook(\n    entryPoint: DocumentFragmentHookName,\n    hookFunction?: DocumentFragmentHook\n  ): DocumentFragmentHook | undefined;\n\n  /**\n   * Remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if hook not specified)\n   *\n   * @param entryPoint entry point for the hook to remove\n   * @param hookFunction optional specific hook to remove\n   * @returns removed hook\n   */\n  removeHook(\n    entryPoint: 'uponSanitizeElement',\n    hookFunction?: UponSanitizeElementHook\n  ): UponSanitizeElementHook | undefined;\n\n  /**\n   * Remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if hook not specified)\n   *\n   * @param entryPoint entry point for the hook to remove\n   * @param hookFunction optional specific hook to remove\n   * @returns removed hook\n   */\n  removeHook(\n    entryPoint: 'uponSanitizeAttribute',\n    hookFunction?: UponSanitizeAttributeHook\n  ): UponSanitizeAttributeHook | undefined;\n\n  /**\n   * Removes all DOMPurify hooks at a given entryPoint\n   *\n   * @param entryPoint entry point for the hooks to remove\n   */\n  removeHooks(entryPoint: HookName): void;\n\n  /**\n   * Removes all DOMPurify hooks.\n   */\n  removeAllHooks(): void;\n}\n\n/**\n * An element removed by DOMPurify.\n */\nexport interface RemovedElement {\n  /**\n   * The element that was removed.\n   */\n  element: Node;\n}\n\n/**\n * An element removed by DOMPurify.\n */\nexport interface RemovedAttribute {\n  /**\n   * The attribute that was removed.\n   */\n  attribute: Attr | null;\n\n  /**\n   * The element that the attribute was removed.\n   */\n  from: Node;\n}\n\ntype BasicHookName =\n  | 'beforeSanitizeElements'\n  | 'afterSanitizeElements'\n  | 'uponSanitizeShadowNode';\ntype ElementHookName = 'beforeSanitizeAttributes' | 'afterSanitizeAttributes';\ntype DocumentFragmentHookName =\n  | 'beforeSanitizeShadowDOM'\n  | 'afterSanitizeShadowDOM';\ntype UponSanitizeElementHookName = 'uponSanitizeElement';\ntype UponSanitizeAttributeHookName = 'uponSanitizeAttribute';\n\ninterface HooksMap {\n  beforeSanitizeElements: NodeHook[];\n  afterSanitizeElements: NodeHook[];\n  beforeSanitizeShadowDOM: DocumentFragmentHook[];\n  uponSanitizeShadowNode: NodeHook[];\n  afterSanitizeShadowDOM: DocumentFragmentHook[];\n  beforeSanitizeAttributes: ElementHook[];\n  afterSanitizeAttributes: ElementHook[];\n  uponSanitizeElement: UponSanitizeElementHook[];\n  uponSanitizeAttribute: UponSanitizeAttributeHook[];\n}\n\nexport type HookName =\n  | BasicHookName\n  | ElementHookName\n  | DocumentFragmentHookName\n  | UponSanitizeElementHookName\n  | UponSanitizeAttributeHookName;\n\nexport type NodeHook = (\n  this: DOMPurify,\n  currentNode: Node,\n  hookEvent: null,\n  config: Config\n) => void;\n\nexport type ElementHook = (\n  this: DOMPurify,\n  currentNode: Element,\n  hookEvent: null,\n  config: Config\n) => void;\n\nexport type DocumentFragmentHook = (\n  this: DOMPurify,\n  currentNode: DocumentFragment,\n  hookEvent: null,\n  config: Config\n) => void;\n\nexport type UponSanitizeElementHook = (\n  this: DOMPurify,\n  currentNode: Node,\n  hookEvent: UponSanitizeElementHookEvent,\n  config: Config\n) => void;\n\nexport type UponSanitizeAttributeHook = (\n  this: DOMPurify,\n  currentNode: Element,\n  hookEvent: UponSanitizeAttributeHookEvent,\n  config: Config\n) => void;\n\nexport interface UponSanitizeElementHookEvent {\n  tagName: string;\n  allowedTags: Record<string, boolean>;\n}\n\nexport interface UponSanitizeAttributeHookEvent {\n  attrName: string;\n  attrValue: string;\n  keepAttr: boolean;\n  allowedAttributes: Record<string, boolean>;\n  forceKeepAttr: boolean | undefined;\n}\n\n/**\n * A `Window`-like object containing the properties and types that DOMPurify requires.\n */\nexport type WindowLike = Pick<\n  typeof globalThis,\n  | 'DocumentFragment'\n  | 'HTMLTemplateElement'\n  | 'Node'\n  | 'Element'\n  | 'NodeFilter'\n  | 'NamedNodeMap'\n  | 'HTMLFormElement'\n  | 'DOMParser'\n> & {\n  document?: Document;\n  MozNamedAttrMap?: typeof window.NamedNodeMap;\n} & Pick<TrustedTypesWindow, 'trustedTypes'>;\n","/**\n * marked v15.0.11 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.marked = {}));\n})(this, (function (exports) { 'use strict';\n\n    /**\n     * Gets the original marked default options.\n     */\n    function _getDefaults() {\n        return {\n            async: false,\n            breaks: false,\n            extensions: null,\n            gfm: true,\n            hooks: null,\n            pedantic: false,\n            renderer: null,\n            silent: false,\n            tokenizer: null,\n            walkTokens: null,\n        };\n    }\n    exports.defaults = _getDefaults();\n    function changeDefaults(newDefaults) {\n        exports.defaults = newDefaults;\n    }\n\n    const noopTest = { exec: () => null };\n    function edit(regex, opt = '') {\n        let source = typeof regex === 'string' ? regex : regex.source;\n        const obj = {\n            replace: (name, val) => {\n                let valSource = typeof val === 'string' ? val : val.source;\n                valSource = valSource.replace(other.caret, '$1');\n                source = source.replace(name, valSource);\n                return obj;\n            },\n            getRegex: () => {\n                return new RegExp(source, opt);\n            },\n        };\n        return obj;\n    }\n    const other = {\n        codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n        outputLinkReplace: /\\\\([\\[\\]])/g,\n        indentCodeCompensation: /^(\\s+)(?:```)/,\n        beginningSpace: /^\\s+/,\n        endingHash: /#$/,\n        startingSpaceChar: /^ /,\n        endingSpaceChar: / $/,\n        nonSpaceChar: /[^ ]/,\n        newLineCharGlobal: /\\n/g,\n        tabCharGlobal: /\\t/g,\n        multipleSpaceGlobal: /\\s+/g,\n        blankLine: /^[ \\t]*$/,\n        doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n        blockquoteStart: /^ {0,3}>/,\n        blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n        blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n        listReplaceTabs: /^\\t+/,\n        listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n        listIsTask: /^\\[[ xX]\\] /,\n        listReplaceTask: /^\\[[ xX]\\] +/,\n        anyLine: /\\n.*\\n/,\n        hrefBrackets: /^<(.*)>$/,\n        tableDelimiter: /[:|]/,\n        tableAlignChars: /^\\||\\| *$/g,\n        tableRowBlankLine: /\\n[ \\t]*$/,\n        tableAlignRight: /^ *-+: *$/,\n        tableAlignCenter: /^ *:-+: *$/,\n        tableAlignLeft: /^ *:-+ *$/,\n        startATag: /^<a /i,\n        endATag: /^<\\/a>/i,\n        startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n        endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n        startAngleBracket: /^</,\n        endAngleBracket: />$/,\n        pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n        unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n        escapeTest: /[&<>\"']/,\n        escapeReplace: /[&<>\"']/g,\n        escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n        escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n        unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n        caret: /(^|[^\\[])\\^/g,\n        percentDecode: /%25/g,\n        findPipe: /\\|/g,\n        splitPipe: / \\|/,\n        slashPipe: /\\\\\\|/g,\n        carriageReturn: /\\r\\n|\\r/g,\n        spaceLine: /^ +$/gm,\n        notSpaceStart: /^\\S*/,\n        endingNewline: /\\n$/,\n        listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n        nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n        hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n        fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n        headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n        htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n    };\n    /**\n     * Block-Level Grammar\n     */\n    const newline = /^(?:[ \\t]*(?:\\n|$))+/;\n    const blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\n    const fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\n    const hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\n    const heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\n    const bullet = /(?:[*+-]|\\d{1,9}[.)])/;\n    const lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\n    const lheading = edit(lheadingCore)\n        .replace(/bull/g, bullet) // lists can interrupt\n        .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n        .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n        .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n        .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n        .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n        .replace(/\\|table/g, '') // table not in commonmark\n        .getRegex();\n    const lheadingGfm = edit(lheadingCore)\n        .replace(/bull/g, bullet) // lists can interrupt\n        .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n        .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n        .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n        .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n        .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n        .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n        .getRegex();\n    const _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\n    const blockText = /^[^\\n]+/;\n    const _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\n    const def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n        .replace('label', _blockLabel)\n        .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n        .getRegex();\n    const list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n        .replace(/bull/g, bullet)\n        .getRegex();\n    const _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n        + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n        + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n        + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n        + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n        + '|tr|track|ul';\n    const _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\n    const html = edit('^ {0,3}(?:' // optional indentation\n        + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n        + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n        + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n        + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n        + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n        + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n        + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n        + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n        + ')', 'i')\n        .replace('comment', _comment)\n        .replace('tag', _tag)\n        .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n        .getRegex();\n    const paragraph = edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex();\n    const blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n        .replace('paragraph', paragraph)\n        .getRegex();\n    /**\n     * Normal Block Grammar\n     */\n    const blockNormal = {\n        blockquote,\n        code: blockCode,\n        def,\n        fences,\n        heading,\n        hr,\n        html,\n        lheading,\n        list,\n        newline,\n        paragraph,\n        table: noopTest,\n        text: blockText,\n    };\n    /**\n     * GFM Block Grammar\n     */\n    const gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n        + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n        + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('blockquote', ' {0,3}>')\n        .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n        .getRegex();\n    const blockGfm = {\n        ...blockNormal,\n        lheading: lheadingGfm,\n        table: gfmTable,\n        paragraph: edit(_paragraph)\n            .replace('hr', hr)\n            .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n            .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n            .replace('table', gfmTable) // interrupt paragraphs with table\n            .replace('blockquote', ' {0,3}>')\n            .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n            .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n            .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n            .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n            .getRegex(),\n    };\n    /**\n     * Pedantic grammar (original John Gruber's loose markdown specification)\n     */\n    const blockPedantic = {\n        ...blockNormal,\n        html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n            + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n            + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n            .replace('comment', _comment)\n            .replace(/tag/g, '(?!(?:'\n            + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n            + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n            + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n            .getRegex(),\n        def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n        heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n        fences: noopTest, // fences not supported\n        lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n        paragraph: edit(_paragraph)\n            .replace('hr', hr)\n            .replace('heading', ' *#{1,6} *[^\\n]')\n            .replace('lheading', lheading)\n            .replace('|table', '')\n            .replace('blockquote', ' {0,3}>')\n            .replace('|fences', '')\n            .replace('|list', '')\n            .replace('|html', '')\n            .replace('|tag', '')\n            .getRegex(),\n    };\n    /**\n     * Inline-Level Grammar\n     */\n    const escape$1 = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\n    const inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\n    const br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\n    const inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n    // list of unicode punctuation marks, plus any missing characters from CommonMark spec\n    const _punctuation = /[\\p{P}\\p{S}]/u;\n    const _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\n    const _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\n    const punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n        .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n    // GFM allows ~ inside strong and em for strikethrough\n    const _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\n    const _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\n    const _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n    // sequences em should skip over [title](link), `code`, <html>\n    const blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\n    const emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n    const emStrongLDelim = edit(emStrongLDelimCore, 'u')\n        .replace(/punct/g, _punctuation)\n        .getRegex();\n    const emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n        .replace(/punct/g, _punctuationGfmStrongEm)\n        .getRegex();\n    const emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n        + '|[^*]+(?=[^*])' // Consume to delim\n        + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n        + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n        + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n        + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n        + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n        + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\n    const emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n        .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n        .replace(/punctSpace/g, _punctuationOrSpace)\n        .replace(/punct/g, _punctuation)\n        .getRegex();\n    const emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n        .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n        .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n        .replace(/punct/g, _punctuationGfmStrongEm)\n        .getRegex();\n    // (6) Not allowed for _\n    const emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n        + '|[^_]+(?=[^_])' // Consume to delim\n        + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n        + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n        + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n        + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n        + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n        .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n        .replace(/punctSpace/g, _punctuationOrSpace)\n        .replace(/punct/g, _punctuation)\n        .getRegex();\n    const anyPunctuation = edit(/\\\\(punct)/, 'gu')\n        .replace(/punct/g, _punctuation)\n        .getRegex();\n    const autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n        .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n        .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n        .getRegex();\n    const _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\n    const tag = edit('^comment'\n        + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n        + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n        + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n        + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n        + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n        .replace('comment', _inlineComment)\n        .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n        .getRegex();\n    const _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n    const link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n        .replace('label', _inlineLabel)\n        .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n        .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n        .getRegex();\n    const reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n        .replace('label', _inlineLabel)\n        .replace('ref', _blockLabel)\n        .getRegex();\n    const nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n        .replace('ref', _blockLabel)\n        .getRegex();\n    const reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n        .replace('reflink', reflink)\n        .replace('nolink', nolink)\n        .getRegex();\n    /**\n     * Normal Inline Grammar\n     */\n    const inlineNormal = {\n        _backpedal: noopTest, // only used for GFM url\n        anyPunctuation,\n        autolink,\n        blockSkip,\n        br,\n        code: inlineCode,\n        del: noopTest,\n        emStrongLDelim,\n        emStrongRDelimAst,\n        emStrongRDelimUnd,\n        escape: escape$1,\n        link,\n        nolink,\n        punctuation,\n        reflink,\n        reflinkSearch,\n        tag,\n        text: inlineText,\n        url: noopTest,\n    };\n    /**\n     * Pedantic Inline Grammar\n     */\n    const inlinePedantic = {\n        ...inlineNormal,\n        link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n            .replace('label', _inlineLabel)\n            .getRegex(),\n        reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n            .replace('label', _inlineLabel)\n            .getRegex(),\n    };\n    /**\n     * GFM Inline Grammar\n     */\n    const inlineGfm = {\n        ...inlineNormal,\n        emStrongRDelimAst: emStrongRDelimAstGfm,\n        emStrongLDelim: emStrongLDelimGfm,\n        url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n            .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n            .getRegex(),\n        _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n        del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n        text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n    };\n    /**\n     * GFM + Line Breaks Inline Grammar\n     */\n    const inlineBreaks = {\n        ...inlineGfm,\n        br: edit(br).replace('{2,}', '*').getRegex(),\n        text: edit(inlineGfm.text)\n            .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n            .replace(/\\{2,\\}/g, '*')\n            .getRegex(),\n    };\n    /**\n     * exports\n     */\n    const block = {\n        normal: blockNormal,\n        gfm: blockGfm,\n        pedantic: blockPedantic,\n    };\n    const inline = {\n        normal: inlineNormal,\n        gfm: inlineGfm,\n        breaks: inlineBreaks,\n        pedantic: inlinePedantic,\n    };\n\n    /**\n     * Helpers\n     */\n    const escapeReplacements = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;',\n    };\n    const getEscapeReplacement = (ch) => escapeReplacements[ch];\n    function escape(html, encode) {\n        if (encode) {\n            if (other.escapeTest.test(html)) {\n                return html.replace(other.escapeReplace, getEscapeReplacement);\n            }\n        }\n        else {\n            if (other.escapeTestNoEncode.test(html)) {\n                return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n            }\n        }\n        return html;\n    }\n    function cleanUrl(href) {\n        try {\n            href = encodeURI(href).replace(other.percentDecode, '%');\n        }\n        catch {\n            return null;\n        }\n        return href;\n    }\n    function splitCells(tableRow, count) {\n        // ensure that every cell-delimiting pipe has a space\n        // before it to distinguish it from an escaped pipe\n        const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n            let escaped = false;\n            let curr = offset;\n            while (--curr >= 0 && str[curr] === '\\\\')\n                escaped = !escaped;\n            if (escaped) {\n                // odd number of slashes means | is escaped\n                // so we leave it alone\n                return '|';\n            }\n            else {\n                // add space before unescaped |\n                return ' |';\n            }\n        }), cells = row.split(other.splitPipe);\n        let i = 0;\n        // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n        if (!cells[0].trim()) {\n            cells.shift();\n        }\n        if (cells.length > 0 && !cells.at(-1)?.trim()) {\n            cells.pop();\n        }\n        if (count) {\n            if (cells.length > count) {\n                cells.splice(count);\n            }\n            else {\n                while (cells.length < count)\n                    cells.push('');\n            }\n        }\n        for (; i < cells.length; i++) {\n            // leading or trailing whitespace is ignored per the gfm spec\n            cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n        }\n        return cells;\n    }\n    /**\n     * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n     * /c*$/ is vulnerable to REDOS.\n     *\n     * @param str\n     * @param c\n     * @param invert Remove suffix of non-c chars instead. Default falsey.\n     */\n    function rtrim(str, c, invert) {\n        const l = str.length;\n        if (l === 0) {\n            return '';\n        }\n        // Length of suffix matching the invert condition.\n        let suffLen = 0;\n        // Step left until we fail to match the invert condition.\n        while (suffLen < l) {\n            const currChar = str.charAt(l - suffLen - 1);\n            if (currChar === c && true) {\n                suffLen++;\n            }\n            else {\n                break;\n            }\n        }\n        return str.slice(0, l - suffLen);\n    }\n    function findClosingBracket(str, b) {\n        if (str.indexOf(b[1]) === -1) {\n            return -1;\n        }\n        let level = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (str[i] === '\\\\') {\n                i++;\n            }\n            else if (str[i] === b[0]) {\n                level++;\n            }\n            else if (str[i] === b[1]) {\n                level--;\n                if (level < 0) {\n                    return i;\n                }\n            }\n        }\n        if (level > 0) {\n            return -2;\n        }\n        return -1;\n    }\n\n    function outputLink(cap, link, raw, lexer, rules) {\n        const href = link.href;\n        const title = link.title || null;\n        const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n        lexer.state.inLink = true;\n        const token = {\n            type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    function indentCodeCompensation(raw, text, rules) {\n        const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n        if (matchIndentToCode === null) {\n            return text;\n        }\n        const indentToCode = matchIndentToCode[1];\n        return text\n            .split('\\n')\n            .map(node => {\n            const matchIndentInNode = node.match(rules.other.beginningSpace);\n            if (matchIndentInNode === null) {\n                return node;\n            }\n            const [indentInNode] = matchIndentInNode;\n            if (indentInNode.length >= indentToCode.length) {\n                return node.slice(indentToCode.length);\n            }\n            return node;\n        })\n            .join('\\n');\n    }\n    /**\n     * Tokenizer\n     */\n    class _Tokenizer {\n        options;\n        rules; // set by the lexer\n        lexer; // set by the lexer\n        constructor(options) {\n            this.options = options || exports.defaults;\n        }\n        space(src) {\n            const cap = this.rules.block.newline.exec(src);\n            if (cap && cap[0].length > 0) {\n                return {\n                    type: 'space',\n                    raw: cap[0],\n                };\n            }\n        }\n        code(src) {\n            const cap = this.rules.block.code.exec(src);\n            if (cap) {\n                const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n                return {\n                    type: 'code',\n                    raw: cap[0],\n                    codeBlockStyle: 'indented',\n                    text: !this.options.pedantic\n                        ? rtrim(text, '\\n')\n                        : text,\n                };\n            }\n        }\n        fences(src) {\n            const cap = this.rules.block.fences.exec(src);\n            if (cap) {\n                const raw = cap[0];\n                const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n                return {\n                    type: 'code',\n                    raw,\n                    lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                    text,\n                };\n            }\n        }\n        heading(src) {\n            const cap = this.rules.block.heading.exec(src);\n            if (cap) {\n                let text = cap[2].trim();\n                // remove trailing #s\n                if (this.rules.other.endingHash.test(text)) {\n                    const trimmed = rtrim(text, '#');\n                    if (this.options.pedantic) {\n                        text = trimmed.trim();\n                    }\n                    else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                        // CommonMark requires space before trailing #s\n                        text = trimmed.trim();\n                    }\n                }\n                return {\n                    type: 'heading',\n                    raw: cap[0],\n                    depth: cap[1].length,\n                    text,\n                    tokens: this.lexer.inline(text),\n                };\n            }\n        }\n        hr(src) {\n            const cap = this.rules.block.hr.exec(src);\n            if (cap) {\n                return {\n                    type: 'hr',\n                    raw: rtrim(cap[0], '\\n'),\n                };\n            }\n        }\n        blockquote(src) {\n            const cap = this.rules.block.blockquote.exec(src);\n            if (cap) {\n                let lines = rtrim(cap[0], '\\n').split('\\n');\n                let raw = '';\n                let text = '';\n                const tokens = [];\n                while (lines.length > 0) {\n                    let inBlockquote = false;\n                    const currentLines = [];\n                    let i;\n                    for (i = 0; i < lines.length; i++) {\n                        // get lines up to a continuation\n                        if (this.rules.other.blockquoteStart.test(lines[i])) {\n                            currentLines.push(lines[i]);\n                            inBlockquote = true;\n                        }\n                        else if (!inBlockquote) {\n                            currentLines.push(lines[i]);\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                    lines = lines.slice(i);\n                    const currentRaw = currentLines.join('\\n');\n                    const currentText = currentRaw\n                        // precede setext continuation with 4 spaces so it isn't a setext\n                        .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                        .replace(this.rules.other.blockquoteSetextReplace2, '');\n                    raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                    text = text ? `${text}\\n${currentText}` : currentText;\n                    // parse blockquote lines as top level tokens\n                    // merge paragraphs if this is a continuation\n                    const top = this.lexer.state.top;\n                    this.lexer.state.top = true;\n                    this.lexer.blockTokens(currentText, tokens, true);\n                    this.lexer.state.top = top;\n                    // if there is no continuation then we are done\n                    if (lines.length === 0) {\n                        break;\n                    }\n                    const lastToken = tokens.at(-1);\n                    if (lastToken?.type === 'code') {\n                        // blockquote continuation cannot be preceded by a code block\n                        break;\n                    }\n                    else if (lastToken?.type === 'blockquote') {\n                        // include continuation in nested blockquote\n                        const oldToken = lastToken;\n                        const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                        const newToken = this.blockquote(newText);\n                        tokens[tokens.length - 1] = newToken;\n                        raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                        text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                        break;\n                    }\n                    else if (lastToken?.type === 'list') {\n                        // include continuation in nested list\n                        const oldToken = lastToken;\n                        const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                        const newToken = this.list(newText);\n                        tokens[tokens.length - 1] = newToken;\n                        raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                        text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                        lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                        continue;\n                    }\n                }\n                return {\n                    type: 'blockquote',\n                    raw,\n                    tokens,\n                    text,\n                };\n            }\n        }\n        list(src) {\n            let cap = this.rules.block.list.exec(src);\n            if (cap) {\n                let bull = cap[1].trim();\n                const isordered = bull.length > 1;\n                const list = {\n                    type: 'list',\n                    raw: '',\n                    ordered: isordered,\n                    start: isordered ? +bull.slice(0, -1) : '',\n                    loose: false,\n                    items: [],\n                };\n                bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n                if (this.options.pedantic) {\n                    bull = isordered ? bull : '[*+-]';\n                }\n                // Get next list item\n                const itemRegex = this.rules.other.listItemRegex(bull);\n                let endsWithBlankLine = false;\n                // Check if current bullet point can start a new List Item\n                while (src) {\n                    let endEarly = false;\n                    let raw = '';\n                    let itemContents = '';\n                    if (!(cap = itemRegex.exec(src))) {\n                        break;\n                    }\n                    if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                        break;\n                    }\n                    raw = cap[0];\n                    src = src.substring(raw.length);\n                    let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                    let nextLine = src.split('\\n', 1)[0];\n                    let blankLine = !line.trim();\n                    let indent = 0;\n                    if (this.options.pedantic) {\n                        indent = 2;\n                        itemContents = line.trimStart();\n                    }\n                    else if (blankLine) {\n                        indent = cap[1].length + 1;\n                    }\n                    else {\n                        indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                        indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                        itemContents = line.slice(indent);\n                        indent += cap[1].length;\n                    }\n                    if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                        raw += nextLine + '\\n';\n                        src = src.substring(nextLine.length + 1);\n                        endEarly = true;\n                    }\n                    if (!endEarly) {\n                        const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                        const hrRegex = this.rules.other.hrRegex(indent);\n                        const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                        const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                        const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                        // Check if following lines should be included in List Item\n                        while (src) {\n                            const rawLine = src.split('\\n', 1)[0];\n                            let nextLineWithoutTabs;\n                            nextLine = rawLine;\n                            // Re-align to follow commonmark nesting rules\n                            if (this.options.pedantic) {\n                                nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                                nextLineWithoutTabs = nextLine;\n                            }\n                            else {\n                                nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                            }\n                            // End list item if found code fences\n                            if (fencesBeginRegex.test(nextLine)) {\n                                break;\n                            }\n                            // End list item if found start of new heading\n                            if (headingBeginRegex.test(nextLine)) {\n                                break;\n                            }\n                            // End list item if found start of html block\n                            if (htmlBeginRegex.test(nextLine)) {\n                                break;\n                            }\n                            // End list item if found start of new bullet\n                            if (nextBulletRegex.test(nextLine)) {\n                                break;\n                            }\n                            // Horizontal rule found\n                            if (hrRegex.test(nextLine)) {\n                                break;\n                            }\n                            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                                itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                            }\n                            else {\n                                // not enough indentation\n                                if (blankLine) {\n                                    break;\n                                }\n                                // paragraph continuation unless last line was a different block level element\n                                if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                    break;\n                                }\n                                if (fencesBeginRegex.test(line)) {\n                                    break;\n                                }\n                                if (headingBeginRegex.test(line)) {\n                                    break;\n                                }\n                                if (hrRegex.test(line)) {\n                                    break;\n                                }\n                                itemContents += '\\n' + nextLine;\n                            }\n                            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                                blankLine = true;\n                            }\n                            raw += rawLine + '\\n';\n                            src = src.substring(rawLine.length + 1);\n                            line = nextLineWithoutTabs.slice(indent);\n                        }\n                    }\n                    if (!list.loose) {\n                        // If the previous item ended with a blank line, the list is loose\n                        if (endsWithBlankLine) {\n                            list.loose = true;\n                        }\n                        else if (this.rules.other.doubleBlankLine.test(raw)) {\n                            endsWithBlankLine = true;\n                        }\n                    }\n                    let istask = null;\n                    let ischecked;\n                    // Check for task list items\n                    if (this.options.gfm) {\n                        istask = this.rules.other.listIsTask.exec(itemContents);\n                        if (istask) {\n                            ischecked = istask[0] !== '[ ] ';\n                            itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                        }\n                    }\n                    list.items.push({\n                        type: 'list_item',\n                        raw,\n                        task: !!istask,\n                        checked: ischecked,\n                        loose: false,\n                        text: itemContents,\n                        tokens: [],\n                    });\n                    list.raw += raw;\n                }\n                // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n                const lastItem = list.items.at(-1);\n                if (lastItem) {\n                    lastItem.raw = lastItem.raw.trimEnd();\n                    lastItem.text = lastItem.text.trimEnd();\n                }\n                else {\n                    // not a list since there were no items\n                    return;\n                }\n                list.raw = list.raw.trimEnd();\n                // Item child tokens handled here at end because we needed to have the final item to trim it first\n                for (let i = 0; i < list.items.length; i++) {\n                    this.lexer.state.top = false;\n                    list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                    if (!list.loose) {\n                        // Check if list should be loose\n                        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                        const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                        list.loose = hasMultipleLineBreaks;\n                    }\n                }\n                // Set all items to loose if list is loose\n                if (list.loose) {\n                    for (let i = 0; i < list.items.length; i++) {\n                        list.items[i].loose = true;\n                    }\n                }\n                return list;\n            }\n        }\n        html(src) {\n            const cap = this.rules.block.html.exec(src);\n            if (cap) {\n                const token = {\n                    type: 'html',\n                    block: true,\n                    raw: cap[0],\n                    pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                    text: cap[0],\n                };\n                return token;\n            }\n        }\n        def(src) {\n            const cap = this.rules.block.def.exec(src);\n            if (cap) {\n                const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n                const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n                const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n                return {\n                    type: 'def',\n                    tag,\n                    raw: cap[0],\n                    href,\n                    title,\n                };\n            }\n        }\n        table(src) {\n            const cap = this.rules.block.table.exec(src);\n            if (!cap) {\n                return;\n            }\n            if (!this.rules.other.tableDelimiter.test(cap[2])) {\n                // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n                return;\n            }\n            const headers = splitCells(cap[1]);\n            const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n            const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n            const item = {\n                type: 'table',\n                raw: cap[0],\n                header: [],\n                align: [],\n                rows: [],\n            };\n            if (headers.length !== aligns.length) {\n                // header and align columns must be equal, rows can be different.\n                return;\n            }\n            for (const align of aligns) {\n                if (this.rules.other.tableAlignRight.test(align)) {\n                    item.align.push('right');\n                }\n                else if (this.rules.other.tableAlignCenter.test(align)) {\n                    item.align.push('center');\n                }\n                else if (this.rules.other.tableAlignLeft.test(align)) {\n                    item.align.push('left');\n                }\n                else {\n                    item.align.push(null);\n                }\n            }\n            for (let i = 0; i < headers.length; i++) {\n                item.header.push({\n                    text: headers[i],\n                    tokens: this.lexer.inline(headers[i]),\n                    header: true,\n                    align: item.align[i],\n                });\n            }\n            for (const row of rows) {\n                item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                    return {\n                        text: cell,\n                        tokens: this.lexer.inline(cell),\n                        header: false,\n                        align: item.align[i],\n                    };\n                }));\n            }\n            return item;\n        }\n        lheading(src) {\n            const cap = this.rules.block.lheading.exec(src);\n            if (cap) {\n                return {\n                    type: 'heading',\n                    raw: cap[0],\n                    depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                    text: cap[1],\n                    tokens: this.lexer.inline(cap[1]),\n                };\n            }\n        }\n        paragraph(src) {\n            const cap = this.rules.block.paragraph.exec(src);\n            if (cap) {\n                const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                    ? cap[1].slice(0, -1)\n                    : cap[1];\n                return {\n                    type: 'paragraph',\n                    raw: cap[0],\n                    text,\n                    tokens: this.lexer.inline(text),\n                };\n            }\n        }\n        text(src) {\n            const cap = this.rules.block.text.exec(src);\n            if (cap) {\n                return {\n                    type: 'text',\n                    raw: cap[0],\n                    text: cap[0],\n                    tokens: this.lexer.inline(cap[0]),\n                };\n            }\n        }\n        escape(src) {\n            const cap = this.rules.inline.escape.exec(src);\n            if (cap) {\n                return {\n                    type: 'escape',\n                    raw: cap[0],\n                    text: cap[1],\n                };\n            }\n        }\n        tag(src) {\n            const cap = this.rules.inline.tag.exec(src);\n            if (cap) {\n                if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                    this.lexer.state.inLink = true;\n                }\n                else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                    this.lexer.state.inLink = false;\n                }\n                if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                    this.lexer.state.inRawBlock = true;\n                }\n                else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                    this.lexer.state.inRawBlock = false;\n                }\n                return {\n                    type: 'html',\n                    raw: cap[0],\n                    inLink: this.lexer.state.inLink,\n                    inRawBlock: this.lexer.state.inRawBlock,\n                    block: false,\n                    text: cap[0],\n                };\n            }\n        }\n        link(src) {\n            const cap = this.rules.inline.link.exec(src);\n            if (cap) {\n                const trimmedUrl = cap[2].trim();\n                if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                    // commonmark requires matching angle brackets\n                    if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                        return;\n                    }\n                    // ending angle bracket cannot be escaped\n                    const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                    if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                        return;\n                    }\n                }\n                else {\n                    // find closing parenthesis\n                    const lastParenIndex = findClosingBracket(cap[2], '()');\n                    if (lastParenIndex === -2) {\n                        // more open parens than closed\n                        return;\n                    }\n                    if (lastParenIndex > -1) {\n                        const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                        const linkLen = start + cap[1].length + lastParenIndex;\n                        cap[2] = cap[2].substring(0, lastParenIndex);\n                        cap[0] = cap[0].substring(0, linkLen).trim();\n                        cap[3] = '';\n                    }\n                }\n                let href = cap[2];\n                let title = '';\n                if (this.options.pedantic) {\n                    // split pedantic href and title\n                    const link = this.rules.other.pedanticHrefTitle.exec(href);\n                    if (link) {\n                        href = link[1];\n                        title = link[3];\n                    }\n                }\n                else {\n                    title = cap[3] ? cap[3].slice(1, -1) : '';\n                }\n                href = href.trim();\n                if (this.rules.other.startAngleBracket.test(href)) {\n                    if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                        // pedantic allows starting angle bracket without ending angle bracket\n                        href = href.slice(1);\n                    }\n                    else {\n                        href = href.slice(1, -1);\n                    }\n                }\n                return outputLink(cap, {\n                    href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                    title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n                }, cap[0], this.lexer, this.rules);\n            }\n        }\n        reflink(src, links) {\n            let cap;\n            if ((cap = this.rules.inline.reflink.exec(src))\n                || (cap = this.rules.inline.nolink.exec(src))) {\n                const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n                const link = links[linkString.toLowerCase()];\n                if (!link) {\n                    const text = cap[0].charAt(0);\n                    return {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    };\n                }\n                return outputLink(cap, link, cap[0], this.lexer, this.rules);\n            }\n        }\n        emStrong(src, maskedSrc, prevChar = '') {\n            let match = this.rules.inline.emStrongLDelim.exec(src);\n            if (!match)\n                return;\n            // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n            if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n                return;\n            const nextChar = match[1] || match[2] || '';\n            if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n                // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n                const lLength = [...match[0]].length - 1;\n                let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n                const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n                endReg.lastIndex = 0;\n                // Clip maskedSrc to same section of string as src (move to lexer?)\n                maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n                while ((match = endReg.exec(maskedSrc)) != null) {\n                    rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                    if (!rDelim)\n                        continue; // skip single * in __abc*abc__\n                    rLength = [...rDelim].length;\n                    if (match[3] || match[4]) { // found another Left Delim\n                        delimTotal += rLength;\n                        continue;\n                    }\n                    else if (match[5] || match[6]) { // either Left or Right Delim\n                        if (lLength % 3 && !((lLength + rLength) % 3)) {\n                            midDelimTotal += rLength;\n                            continue; // CommonMark Emphasis Rules 9-10\n                        }\n                    }\n                    delimTotal -= rLength;\n                    if (delimTotal > 0)\n                        continue; // Haven't found enough closing delimiters\n                    // Remove extra characters. *a*** -> *a*\n                    rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                    // char length can be >1 for unicode characters;\n                    const lastCharLength = [...match[0]][0].length;\n                    const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                    // Create `em` if smallest delimiter has odd char count. *a***\n                    if (Math.min(lLength, rLength) % 2) {\n                        const text = raw.slice(1, -1);\n                        return {\n                            type: 'em',\n                            raw,\n                            text,\n                            tokens: this.lexer.inlineTokens(text),\n                        };\n                    }\n                    // Create 'strong' if smallest delimiter has even char count. **a***\n                    const text = raw.slice(2, -2);\n                    return {\n                        type: 'strong',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n            }\n        }\n        codespan(src) {\n            const cap = this.rules.inline.code.exec(src);\n            if (cap) {\n                let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n                const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n                const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n                if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                    text = text.substring(1, text.length - 1);\n                }\n                return {\n                    type: 'codespan',\n                    raw: cap[0],\n                    text,\n                };\n            }\n        }\n        br(src) {\n            const cap = this.rules.inline.br.exec(src);\n            if (cap) {\n                return {\n                    type: 'br',\n                    raw: cap[0],\n                };\n            }\n        }\n        del(src) {\n            const cap = this.rules.inline.del.exec(src);\n            if (cap) {\n                return {\n                    type: 'del',\n                    raw: cap[0],\n                    text: cap[2],\n                    tokens: this.lexer.inlineTokens(cap[2]),\n                };\n            }\n        }\n        autolink(src) {\n            const cap = this.rules.inline.autolink.exec(src);\n            if (cap) {\n                let text, href;\n                if (cap[2] === '@') {\n                    text = cap[1];\n                    href = 'mailto:' + text;\n                }\n                else {\n                    text = cap[1];\n                    href = text;\n                }\n                return {\n                    type: 'link',\n                    raw: cap[0],\n                    text,\n                    href,\n                    tokens: [\n                        {\n                            type: 'text',\n                            raw: text,\n                            text,\n                        },\n                    ],\n                };\n            }\n        }\n        url(src) {\n            let cap;\n            if (cap = this.rules.inline.url.exec(src)) {\n                let text, href;\n                if (cap[2] === '@') {\n                    text = cap[0];\n                    href = 'mailto:' + text;\n                }\n                else {\n                    // do extended autolink path validation\n                    let prevCapZero;\n                    do {\n                        prevCapZero = cap[0];\n                        cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                    } while (prevCapZero !== cap[0]);\n                    text = cap[0];\n                    if (cap[1] === 'www.') {\n                        href = 'http://' + cap[0];\n                    }\n                    else {\n                        href = cap[0];\n                    }\n                }\n                return {\n                    type: 'link',\n                    raw: cap[0],\n                    text,\n                    href,\n                    tokens: [\n                        {\n                            type: 'text',\n                            raw: text,\n                            text,\n                        },\n                    ],\n                };\n            }\n        }\n        inlineText(src) {\n            const cap = this.rules.inline.text.exec(src);\n            if (cap) {\n                const escaped = this.lexer.state.inRawBlock;\n                return {\n                    type: 'text',\n                    raw: cap[0],\n                    text: cap[0],\n                    escaped,\n                };\n            }\n        }\n    }\n\n    /**\n     * Block Lexer\n     */\n    class _Lexer {\n        tokens;\n        options;\n        state;\n        tokenizer;\n        inlineQueue;\n        constructor(options) {\n            // TokenList cannot be created in one go\n            this.tokens = [];\n            this.tokens.links = Object.create(null);\n            this.options = options || exports.defaults;\n            this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n            this.tokenizer = this.options.tokenizer;\n            this.tokenizer.options = this.options;\n            this.tokenizer.lexer = this;\n            this.inlineQueue = [];\n            this.state = {\n                inLink: false,\n                inRawBlock: false,\n                top: true,\n            };\n            const rules = {\n                other,\n                block: block.normal,\n                inline: inline.normal,\n            };\n            if (this.options.pedantic) {\n                rules.block = block.pedantic;\n                rules.inline = inline.pedantic;\n            }\n            else if (this.options.gfm) {\n                rules.block = block.gfm;\n                if (this.options.breaks) {\n                    rules.inline = inline.breaks;\n                }\n                else {\n                    rules.inline = inline.gfm;\n                }\n            }\n            this.tokenizer.rules = rules;\n        }\n        /**\n         * Expose Rules\n         */\n        static get rules() {\n            return {\n                block,\n                inline,\n            };\n        }\n        /**\n         * Static Lex Method\n         */\n        static lex(src, options) {\n            const lexer = new _Lexer(options);\n            return lexer.lex(src);\n        }\n        /**\n         * Static Lex Inline Method\n         */\n        static lexInline(src, options) {\n            const lexer = new _Lexer(options);\n            return lexer.inlineTokens(src);\n        }\n        /**\n         * Preprocessing\n         */\n        lex(src) {\n            src = src.replace(other.carriageReturn, '\\n');\n            this.blockTokens(src, this.tokens);\n            for (let i = 0; i < this.inlineQueue.length; i++) {\n                const next = this.inlineQueue[i];\n                this.inlineTokens(next.src, next.tokens);\n            }\n            this.inlineQueue = [];\n            return this.tokens;\n        }\n        blockTokens(src, tokens = [], lastParagraphClipped = false) {\n            if (this.options.pedantic) {\n                src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n            }\n            while (src) {\n                let token;\n                if (this.options.extensions?.block?.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                    continue;\n                }\n                // newline\n                if (token = this.tokenizer.space(src)) {\n                    src = src.substring(token.raw.length);\n                    const lastToken = tokens.at(-1);\n                    if (token.raw.length === 1 && lastToken !== undefined) {\n                        // if there's a single \\n as a spacer, it's terminating the last line,\n                        // so move it there so that we don't get unnecessary paragraph tags\n                        lastToken.raw += '\\n';\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                // code\n                if (token = this.tokenizer.code(src)) {\n                    src = src.substring(token.raw.length);\n                    const lastToken = tokens.at(-1);\n                    // An indented code block cannot interrupt a paragraph.\n                    if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.text;\n                        this.inlineQueue.at(-1).src = lastToken.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                // fences\n                if (token = this.tokenizer.fences(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // heading\n                if (token = this.tokenizer.heading(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // hr\n                if (token = this.tokenizer.hr(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // blockquote\n                if (token = this.tokenizer.blockquote(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // list\n                if (token = this.tokenizer.list(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // html\n                if (token = this.tokenizer.html(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // def\n                if (token = this.tokenizer.def(src)) {\n                    src = src.substring(token.raw.length);\n                    const lastToken = tokens.at(-1);\n                    if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.raw;\n                        this.inlineQueue.at(-1).src = lastToken.text;\n                    }\n                    else if (!this.tokens.links[token.tag]) {\n                        this.tokens.links[token.tag] = {\n                            href: token.href,\n                            title: token.title,\n                        };\n                    }\n                    continue;\n                }\n                // table (gfm)\n                if (token = this.tokenizer.table(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // lheading\n                if (token = this.tokenizer.lheading(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // top-level paragraph\n                // prevent paragraph consuming extensions by clipping 'src' to extension start\n                let cutSrc = src;\n                if (this.options.extensions?.startBlock) {\n                    let startIndex = Infinity;\n                    const tempSrc = src.slice(1);\n                    let tempStart;\n                    this.options.extensions.startBlock.forEach((getStartIndex) => {\n                        tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                        if (typeof tempStart === 'number' && tempStart >= 0) {\n                            startIndex = Math.min(startIndex, tempStart);\n                        }\n                    });\n                    if (startIndex < Infinity && startIndex >= 0) {\n                        cutSrc = src.substring(0, startIndex + 1);\n                    }\n                }\n                if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                    const lastToken = tokens.at(-1);\n                    if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.text;\n                        this.inlineQueue.pop();\n                        this.inlineQueue.at(-1).src = lastToken.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    lastParagraphClipped = cutSrc.length !== src.length;\n                    src = src.substring(token.raw.length);\n                    continue;\n                }\n                // text\n                if (token = this.tokenizer.text(src)) {\n                    src = src.substring(token.raw.length);\n                    const lastToken = tokens.at(-1);\n                    if (lastToken?.type === 'text') {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.text;\n                        this.inlineQueue.pop();\n                        this.inlineQueue.at(-1).src = lastToken.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                if (src) {\n                    const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        break;\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n            this.state.top = true;\n            return tokens;\n        }\n        inline(src, tokens = []) {\n            this.inlineQueue.push({ src, tokens });\n            return tokens;\n        }\n        /**\n         * Lexing/Compiling\n         */\n        inlineTokens(src, tokens = []) {\n            // String with links masked to avoid interference with em and strong\n            let maskedSrc = src;\n            let match = null;\n            // Mask out reflinks\n            if (this.tokens.links) {\n                const links = Object.keys(this.tokens.links);\n                if (links.length > 0) {\n                    while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                        if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                            maskedSrc = maskedSrc.slice(0, match.index)\n                                + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                                + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                        }\n                    }\n                }\n            }\n            // Mask out escaped characters\n            while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n                maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n            }\n            // Mask out other blocks\n            while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n                maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n            }\n            let keepPrevChar = false;\n            let prevChar = '';\n            while (src) {\n                if (!keepPrevChar) {\n                    prevChar = '';\n                }\n                keepPrevChar = false;\n                let token;\n                // extensions\n                if (this.options.extensions?.inline?.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                    continue;\n                }\n                // escape\n                if (token = this.tokenizer.escape(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // tag\n                if (token = this.tokenizer.tag(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // link\n                if (token = this.tokenizer.link(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // reflink, nolink\n                if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                    src = src.substring(token.raw.length);\n                    const lastToken = tokens.at(-1);\n                    if (token.type === 'text' && lastToken?.type === 'text') {\n                        lastToken.raw += token.raw;\n                        lastToken.text += token.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                // em & strong\n                if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // code\n                if (token = this.tokenizer.codespan(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // br\n                if (token = this.tokenizer.br(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // del (gfm)\n                if (token = this.tokenizer.del(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // autolink\n                if (token = this.tokenizer.autolink(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // url (gfm)\n                if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // text\n                // prevent inlineText consuming extensions by clipping 'src' to extension start\n                let cutSrc = src;\n                if (this.options.extensions?.startInline) {\n                    let startIndex = Infinity;\n                    const tempSrc = src.slice(1);\n                    let tempStart;\n                    this.options.extensions.startInline.forEach((getStartIndex) => {\n                        tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                        if (typeof tempStart === 'number' && tempStart >= 0) {\n                            startIndex = Math.min(startIndex, tempStart);\n                        }\n                    });\n                    if (startIndex < Infinity && startIndex >= 0) {\n                        cutSrc = src.substring(0, startIndex + 1);\n                    }\n                }\n                if (token = this.tokenizer.inlineText(cutSrc)) {\n                    src = src.substring(token.raw.length);\n                    if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                        prevChar = token.raw.slice(-1);\n                    }\n                    keepPrevChar = true;\n                    const lastToken = tokens.at(-1);\n                    if (lastToken?.type === 'text') {\n                        lastToken.raw += token.raw;\n                        lastToken.text += token.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                if (src) {\n                    const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        break;\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n            return tokens;\n        }\n    }\n\n    /**\n     * Renderer\n     */\n    class _Renderer {\n        options;\n        parser; // set by the parser\n        constructor(options) {\n            this.options = options || exports.defaults;\n        }\n        space(token) {\n            return '';\n        }\n        code({ text, lang, escaped }) {\n            const langString = (lang || '').match(other.notSpaceStart)?.[0];\n            const code = text.replace(other.endingNewline, '') + '\\n';\n            if (!langString) {\n                return '<pre><code>'\n                    + (escaped ? code : escape(code, true))\n                    + '</code></pre>\\n';\n            }\n            return '<pre><code class=\"language-'\n                + escape(langString)\n                + '\">'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        blockquote({ tokens }) {\n            const body = this.parser.parse(tokens);\n            return `<blockquote>\\n${body}</blockquote>\\n`;\n        }\n        html({ text }) {\n            return text;\n        }\n        heading({ tokens, depth }) {\n            return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n        }\n        hr(token) {\n            return '<hr>\\n';\n        }\n        list(token) {\n            const ordered = token.ordered;\n            const start = token.start;\n            let body = '';\n            for (let j = 0; j < token.items.length; j++) {\n                const item = token.items[j];\n                body += this.listitem(item);\n            }\n            const type = ordered ? 'ol' : 'ul';\n            const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n            return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n        }\n        listitem(item) {\n            let itemBody = '';\n            if (item.task) {\n                const checkbox = this.checkbox({ checked: !!item.checked });\n                if (item.loose) {\n                    if (item.tokens[0]?.type === 'paragraph') {\n                        item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                        if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                            item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                            item.tokens[0].tokens[0].escaped = true;\n                        }\n                    }\n                    else {\n                        item.tokens.unshift({\n                            type: 'text',\n                            raw: checkbox + ' ',\n                            text: checkbox + ' ',\n                            escaped: true,\n                        });\n                    }\n                }\n                else {\n                    itemBody += checkbox + ' ';\n                }\n            }\n            itemBody += this.parser.parse(item.tokens, !!item.loose);\n            return `<li>${itemBody}</li>\\n`;\n        }\n        checkbox({ checked }) {\n            return '<input '\n                + (checked ? 'checked=\"\" ' : '')\n                + 'disabled=\"\" type=\"checkbox\">';\n        }\n        paragraph({ tokens }) {\n            return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n        }\n        table(token) {\n            let header = '';\n            // header\n            let cell = '';\n            for (let j = 0; j < token.header.length; j++) {\n                cell += this.tablecell(token.header[j]);\n            }\n            header += this.tablerow({ text: cell });\n            let body = '';\n            for (let j = 0; j < token.rows.length; j++) {\n                const row = token.rows[j];\n                cell = '';\n                for (let k = 0; k < row.length; k++) {\n                    cell += this.tablecell(row[k]);\n                }\n                body += this.tablerow({ text: cell });\n            }\n            if (body)\n                body = `<tbody>${body}</tbody>`;\n            return '<table>\\n'\n                + '<thead>\\n'\n                + header\n                + '</thead>\\n'\n                + body\n                + '</table>\\n';\n        }\n        tablerow({ text }) {\n            return `<tr>\\n${text}</tr>\\n`;\n        }\n        tablecell(token) {\n            const content = this.parser.parseInline(token.tokens);\n            const type = token.header ? 'th' : 'td';\n            const tag = token.align\n                ? `<${type} align=\"${token.align}\">`\n                : `<${type}>`;\n            return tag + content + `</${type}>\\n`;\n        }\n        /**\n         * span level renderer\n         */\n        strong({ tokens }) {\n            return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n        }\n        em({ tokens }) {\n            return `<em>${this.parser.parseInline(tokens)}</em>`;\n        }\n        codespan({ text }) {\n            return `<code>${escape(text, true)}</code>`;\n        }\n        br(token) {\n            return '<br>';\n        }\n        del({ tokens }) {\n            return `<del>${this.parser.parseInline(tokens)}</del>`;\n        }\n        link({ href, title, tokens }) {\n            const text = this.parser.parseInline(tokens);\n            const cleanHref = cleanUrl(href);\n            if (cleanHref === null) {\n                return text;\n            }\n            href = cleanHref;\n            let out = '<a href=\"' + href + '\"';\n            if (title) {\n                out += ' title=\"' + (escape(title)) + '\"';\n            }\n            out += '>' + text + '</a>';\n            return out;\n        }\n        image({ href, title, text, tokens }) {\n            if (tokens) {\n                text = this.parser.parseInline(tokens, this.parser.textRenderer);\n            }\n            const cleanHref = cleanUrl(href);\n            if (cleanHref === null) {\n                return escape(text);\n            }\n            href = cleanHref;\n            let out = `<img src=\"${href}\" alt=\"${text}\"`;\n            if (title) {\n                out += ` title=\"${escape(title)}\"`;\n            }\n            out += '>';\n            return out;\n        }\n        text(token) {\n            return 'tokens' in token && token.tokens\n                ? this.parser.parseInline(token.tokens)\n                : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n        }\n    }\n\n    /**\n     * TextRenderer\n     * returns only the textual part of the token\n     */\n    class _TextRenderer {\n        // no need for block level renderers\n        strong({ text }) {\n            return text;\n        }\n        em({ text }) {\n            return text;\n        }\n        codespan({ text }) {\n            return text;\n        }\n        del({ text }) {\n            return text;\n        }\n        html({ text }) {\n            return text;\n        }\n        text({ text }) {\n            return text;\n        }\n        link({ text }) {\n            return '' + text;\n        }\n        image({ text }) {\n            return '' + text;\n        }\n        br() {\n            return '';\n        }\n    }\n\n    /**\n     * Parsing & Compiling\n     */\n    class _Parser {\n        options;\n        renderer;\n        textRenderer;\n        constructor(options) {\n            this.options = options || exports.defaults;\n            this.options.renderer = this.options.renderer || new _Renderer();\n            this.renderer = this.options.renderer;\n            this.renderer.options = this.options;\n            this.renderer.parser = this;\n            this.textRenderer = new _TextRenderer();\n        }\n        /**\n         * Static Parse Method\n         */\n        static parse(tokens, options) {\n            const parser = new _Parser(options);\n            return parser.parse(tokens);\n        }\n        /**\n         * Static Parse Inline Method\n         */\n        static parseInline(tokens, options) {\n            const parser = new _Parser(options);\n            return parser.parseInline(tokens);\n        }\n        /**\n         * Parse Loop\n         */\n        parse(tokens, top = true) {\n            let out = '';\n            for (let i = 0; i < tokens.length; i++) {\n                const anyToken = tokens[i];\n                // Run any renderer extensions\n                if (this.options.extensions?.renderers?.[anyToken.type]) {\n                    const genericToken = anyToken;\n                    const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                    if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                        out += ret || '';\n                        continue;\n                    }\n                }\n                const token = anyToken;\n                switch (token.type) {\n                    case 'space': {\n                        out += this.renderer.space(token);\n                        continue;\n                    }\n                    case 'hr': {\n                        out += this.renderer.hr(token);\n                        continue;\n                    }\n                    case 'heading': {\n                        out += this.renderer.heading(token);\n                        continue;\n                    }\n                    case 'code': {\n                        out += this.renderer.code(token);\n                        continue;\n                    }\n                    case 'table': {\n                        out += this.renderer.table(token);\n                        continue;\n                    }\n                    case 'blockquote': {\n                        out += this.renderer.blockquote(token);\n                        continue;\n                    }\n                    case 'list': {\n                        out += this.renderer.list(token);\n                        continue;\n                    }\n                    case 'html': {\n                        out += this.renderer.html(token);\n                        continue;\n                    }\n                    case 'paragraph': {\n                        out += this.renderer.paragraph(token);\n                        continue;\n                    }\n                    case 'text': {\n                        let textToken = token;\n                        let body = this.renderer.text(textToken);\n                        while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                            textToken = tokens[++i];\n                            body += '\\n' + this.renderer.text(textToken);\n                        }\n                        if (top) {\n                            out += this.renderer.paragraph({\n                                type: 'paragraph',\n                                raw: body,\n                                text: body,\n                                tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                            });\n                        }\n                        else {\n                            out += body;\n                        }\n                        continue;\n                    }\n                    default: {\n                        const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                        if (this.options.silent) {\n                            console.error(errMsg);\n                            return '';\n                        }\n                        else {\n                            throw new Error(errMsg);\n                        }\n                    }\n                }\n            }\n            return out;\n        }\n        /**\n         * Parse Inline Tokens\n         */\n        parseInline(tokens, renderer = this.renderer) {\n            let out = '';\n            for (let i = 0; i < tokens.length; i++) {\n                const anyToken = tokens[i];\n                // Run any renderer extensions\n                if (this.options.extensions?.renderers?.[anyToken.type]) {\n                    const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                    if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                        out += ret || '';\n                        continue;\n                    }\n                }\n                const token = anyToken;\n                switch (token.type) {\n                    case 'escape': {\n                        out += renderer.text(token);\n                        break;\n                    }\n                    case 'html': {\n                        out += renderer.html(token);\n                        break;\n                    }\n                    case 'link': {\n                        out += renderer.link(token);\n                        break;\n                    }\n                    case 'image': {\n                        out += renderer.image(token);\n                        break;\n                    }\n                    case 'strong': {\n                        out += renderer.strong(token);\n                        break;\n                    }\n                    case 'em': {\n                        out += renderer.em(token);\n                        break;\n                    }\n                    case 'codespan': {\n                        out += renderer.codespan(token);\n                        break;\n                    }\n                    case 'br': {\n                        out += renderer.br(token);\n                        break;\n                    }\n                    case 'del': {\n                        out += renderer.del(token);\n                        break;\n                    }\n                    case 'text': {\n                        out += renderer.text(token);\n                        break;\n                    }\n                    default: {\n                        const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                        if (this.options.silent) {\n                            console.error(errMsg);\n                            return '';\n                        }\n                        else {\n                            throw new Error(errMsg);\n                        }\n                    }\n                }\n            }\n            return out;\n        }\n    }\n\n    class _Hooks {\n        options;\n        block;\n        constructor(options) {\n            this.options = options || exports.defaults;\n        }\n        static passThroughHooks = new Set([\n            'preprocess',\n            'postprocess',\n            'processAllTokens',\n        ]);\n        /**\n         * Process markdown before marked\n         */\n        preprocess(markdown) {\n            return markdown;\n        }\n        /**\n         * Process HTML after marked is finished\n         */\n        postprocess(html) {\n            return html;\n        }\n        /**\n         * Process all tokens before walk tokens\n         */\n        processAllTokens(tokens) {\n            return tokens;\n        }\n        /**\n         * Provide function to tokenize markdown\n         */\n        provideLexer() {\n            return this.block ? _Lexer.lex : _Lexer.lexInline;\n        }\n        /**\n         * Provide function to parse tokens\n         */\n        provideParser() {\n            return this.block ? _Parser.parse : _Parser.parseInline;\n        }\n    }\n\n    class Marked {\n        defaults = _getDefaults();\n        options = this.setOptions;\n        parse = this.parseMarkdown(true);\n        parseInline = this.parseMarkdown(false);\n        Parser = _Parser;\n        Renderer = _Renderer;\n        TextRenderer = _TextRenderer;\n        Lexer = _Lexer;\n        Tokenizer = _Tokenizer;\n        Hooks = _Hooks;\n        constructor(...args) {\n            this.use(...args);\n        }\n        /**\n         * Run callback for every token\n         */\n        walkTokens(tokens, callback) {\n            let values = [];\n            for (const token of tokens) {\n                values = values.concat(callback.call(this, token));\n                switch (token.type) {\n                    case 'table': {\n                        const tableToken = token;\n                        for (const cell of tableToken.header) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                        for (const row of tableToken.rows) {\n                            for (const cell of row) {\n                                values = values.concat(this.walkTokens(cell.tokens, callback));\n                            }\n                        }\n                        break;\n                    }\n                    case 'list': {\n                        const listToken = token;\n                        values = values.concat(this.walkTokens(listToken.items, callback));\n                        break;\n                    }\n                    default: {\n                        const genericToken = token;\n                        if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                                const tokens = genericToken[childTokens].flat(Infinity);\n                                values = values.concat(this.walkTokens(tokens, callback));\n                            });\n                        }\n                        else if (genericToken.tokens) {\n                            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                        }\n                    }\n                }\n            }\n            return values;\n        }\n        use(...args) {\n            const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n            args.forEach((pack) => {\n                // copy options to new object\n                const opts = { ...pack };\n                // set async to true if it was set to true before\n                opts.async = this.defaults.async || opts.async || false;\n                // ==-- Parse \"addon\" extensions --== //\n                if (pack.extensions) {\n                    pack.extensions.forEach((ext) => {\n                        if (!ext.name) {\n                            throw new Error('extension name required');\n                        }\n                        if ('renderer' in ext) { // Renderer extensions\n                            const prevRenderer = extensions.renderers[ext.name];\n                            if (prevRenderer) {\n                                // Replace extension with func to run new extension but fall back if false\n                                extensions.renderers[ext.name] = function (...args) {\n                                    let ret = ext.renderer.apply(this, args);\n                                    if (ret === false) {\n                                        ret = prevRenderer.apply(this, args);\n                                    }\n                                    return ret;\n                                };\n                            }\n                            else {\n                                extensions.renderers[ext.name] = ext.renderer;\n                            }\n                        }\n                        if ('tokenizer' in ext) { // Tokenizer Extensions\n                            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                                throw new Error(\"extension level must be 'block' or 'inline'\");\n                            }\n                            const extLevel = extensions[ext.level];\n                            if (extLevel) {\n                                extLevel.unshift(ext.tokenizer);\n                            }\n                            else {\n                                extensions[ext.level] = [ext.tokenizer];\n                            }\n                            if (ext.start) { // Function to check for start of token\n                                if (ext.level === 'block') {\n                                    if (extensions.startBlock) {\n                                        extensions.startBlock.push(ext.start);\n                                    }\n                                    else {\n                                        extensions.startBlock = [ext.start];\n                                    }\n                                }\n                                else if (ext.level === 'inline') {\n                                    if (extensions.startInline) {\n                                        extensions.startInline.push(ext.start);\n                                    }\n                                    else {\n                                        extensions.startInline = [ext.start];\n                                    }\n                                }\n                            }\n                        }\n                        if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                            extensions.childTokens[ext.name] = ext.childTokens;\n                        }\n                    });\n                    opts.extensions = extensions;\n                }\n                // ==-- Parse \"overwrite\" extensions --== //\n                if (pack.renderer) {\n                    const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                    for (const prop in pack.renderer) {\n                        if (!(prop in renderer)) {\n                            throw new Error(`renderer '${prop}' does not exist`);\n                        }\n                        if (['options', 'parser'].includes(prop)) {\n                            // ignore options property\n                            continue;\n                        }\n                        const rendererProp = prop;\n                        const rendererFunc = pack.renderer[rendererProp];\n                        const prevRenderer = renderer[rendererProp];\n                        // Replace renderer with func to run extension, but fall back if false\n                        renderer[rendererProp] = (...args) => {\n                            let ret = rendererFunc.apply(renderer, args);\n                            if (ret === false) {\n                                ret = prevRenderer.apply(renderer, args);\n                            }\n                            return ret || '';\n                        };\n                    }\n                    opts.renderer = renderer;\n                }\n                if (pack.tokenizer) {\n                    const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                    for (const prop in pack.tokenizer) {\n                        if (!(prop in tokenizer)) {\n                            throw new Error(`tokenizer '${prop}' does not exist`);\n                        }\n                        if (['options', 'rules', 'lexer'].includes(prop)) {\n                            // ignore options, rules, and lexer properties\n                            continue;\n                        }\n                        const tokenizerProp = prop;\n                        const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                        const prevTokenizer = tokenizer[tokenizerProp];\n                        // Replace tokenizer with func to run extension, but fall back if false\n                        // @ts-expect-error cannot type tokenizer function dynamically\n                        tokenizer[tokenizerProp] = (...args) => {\n                            let ret = tokenizerFunc.apply(tokenizer, args);\n                            if (ret === false) {\n                                ret = prevTokenizer.apply(tokenizer, args);\n                            }\n                            return ret;\n                        };\n                    }\n                    opts.tokenizer = tokenizer;\n                }\n                // ==-- Parse Hooks extensions --== //\n                if (pack.hooks) {\n                    const hooks = this.defaults.hooks || new _Hooks();\n                    for (const prop in pack.hooks) {\n                        if (!(prop in hooks)) {\n                            throw new Error(`hook '${prop}' does not exist`);\n                        }\n                        if (['options', 'block'].includes(prop)) {\n                            // ignore options and block properties\n                            continue;\n                        }\n                        const hooksProp = prop;\n                        const hooksFunc = pack.hooks[hooksProp];\n                        const prevHook = hooks[hooksProp];\n                        if (_Hooks.passThroughHooks.has(prop)) {\n                            // @ts-expect-error cannot type hook function dynamically\n                            hooks[hooksProp] = (arg) => {\n                                if (this.defaults.async) {\n                                    return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                        return prevHook.call(hooks, ret);\n                                    });\n                                }\n                                const ret = hooksFunc.call(hooks, arg);\n                                return prevHook.call(hooks, ret);\n                            };\n                        }\n                        else {\n                            // @ts-expect-error cannot type hook function dynamically\n                            hooks[hooksProp] = (...args) => {\n                                let ret = hooksFunc.apply(hooks, args);\n                                if (ret === false) {\n                                    ret = prevHook.apply(hooks, args);\n                                }\n                                return ret;\n                            };\n                        }\n                    }\n                    opts.hooks = hooks;\n                }\n                // ==-- Parse WalkTokens extensions --== //\n                if (pack.walkTokens) {\n                    const walkTokens = this.defaults.walkTokens;\n                    const packWalktokens = pack.walkTokens;\n                    opts.walkTokens = function (token) {\n                        let values = [];\n                        values.push(packWalktokens.call(this, token));\n                        if (walkTokens) {\n                            values = values.concat(walkTokens.call(this, token));\n                        }\n                        return values;\n                    };\n                }\n                this.defaults = { ...this.defaults, ...opts };\n            });\n            return this;\n        }\n        setOptions(opt) {\n            this.defaults = { ...this.defaults, ...opt };\n            return this;\n        }\n        lexer(src, options) {\n            return _Lexer.lex(src, options ?? this.defaults);\n        }\n        parser(tokens, options) {\n            return _Parser.parse(tokens, options ?? this.defaults);\n        }\n        parseMarkdown(blockType) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const parse = (src, options) => {\n                const origOpt = { ...options };\n                const opt = { ...this.defaults, ...origOpt };\n                const throwError = this.onError(!!opt.silent, !!opt.async);\n                // throw error if an extension set async to true but parse was called with async: false\n                if (this.defaults.async === true && origOpt.async === false) {\n                    return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n                }\n                // throw error in case of non string input\n                if (typeof src === 'undefined' || src === null) {\n                    return throwError(new Error('marked(): input parameter is undefined or null'));\n                }\n                if (typeof src !== 'string') {\n                    return throwError(new Error('marked(): input parameter is of type '\n                        + Object.prototype.toString.call(src) + ', string expected'));\n                }\n                if (opt.hooks) {\n                    opt.hooks.options = opt;\n                    opt.hooks.block = blockType;\n                }\n                const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n                const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n                if (opt.async) {\n                    return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                        .then(src => lexer(src, opt))\n                        .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                        .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                        .then(tokens => parser(tokens, opt))\n                        .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                        .catch(throwError);\n                }\n                try {\n                    if (opt.hooks) {\n                        src = opt.hooks.preprocess(src);\n                    }\n                    let tokens = lexer(src, opt);\n                    if (opt.hooks) {\n                        tokens = opt.hooks.processAllTokens(tokens);\n                    }\n                    if (opt.walkTokens) {\n                        this.walkTokens(tokens, opt.walkTokens);\n                    }\n                    let html = parser(tokens, opt);\n                    if (opt.hooks) {\n                        html = opt.hooks.postprocess(html);\n                    }\n                    return html;\n                }\n                catch (e) {\n                    return throwError(e);\n                }\n            };\n            return parse;\n        }\n        onError(silent, async) {\n            return (e) => {\n                e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n                if (silent) {\n                    const msg = '<p>An error occurred:</p><pre>'\n                        + escape(e.message + '', true)\n                        + '</pre>';\n                    if (async) {\n                        return Promise.resolve(msg);\n                    }\n                    return msg;\n                }\n                if (async) {\n                    return Promise.reject(e);\n                }\n                throw e;\n            };\n        }\n    }\n\n    const markedInstance = new Marked();\n    function marked(src, opt) {\n        return markedInstance.parse(src, opt);\n    }\n    /**\n     * Sets the default options.\n     *\n     * @param options Hash of options\n     */\n    marked.options =\n        marked.setOptions = function (options) {\n            markedInstance.setOptions(options);\n            marked.defaults = markedInstance.defaults;\n            changeDefaults(marked.defaults);\n            return marked;\n        };\n    /**\n     * Gets the original marked default options.\n     */\n    marked.getDefaults = _getDefaults;\n    marked.defaults = exports.defaults;\n    /**\n     * Use Extension\n     */\n    marked.use = function (...args) {\n        markedInstance.use(...args);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n    /**\n     * Run callback for every token\n     */\n    marked.walkTokens = function (tokens, callback) {\n        return markedInstance.walkTokens(tokens, callback);\n    };\n    /**\n     * Compiles markdown to HTML without enclosing `p` tag.\n     *\n     * @param src String of markdown source to be compiled\n     * @param options Hash of options\n     * @return String of compiled HTML\n     */\n    marked.parseInline = markedInstance.parseInline;\n    /**\n     * Expose\n     */\n    marked.Parser = _Parser;\n    marked.parser = _Parser.parse;\n    marked.Renderer = _Renderer;\n    marked.TextRenderer = _TextRenderer;\n    marked.Lexer = _Lexer;\n    marked.lexer = _Lexer.lex;\n    marked.Tokenizer = _Tokenizer;\n    marked.Hooks = _Hooks;\n    marked.parse = marked;\n    const options = marked.options;\n    const setOptions = marked.setOptions;\n    const use = marked.use;\n    const walkTokens = marked.walkTokens;\n    const parseInline = marked.parseInline;\n    const parse = marked;\n    const parser = _Parser.parse;\n    const lexer = _Lexer.lex;\n\n    exports.Hooks = _Hooks;\n    exports.Lexer = _Lexer;\n    exports.Marked = Marked;\n    exports.Parser = _Parser;\n    exports.Renderer = _Renderer;\n    exports.TextRenderer = _TextRenderer;\n    exports.Tokenizer = _Tokenizer;\n    exports.getDefaults = _getDefaults;\n    exports.lexer = lexer;\n    exports.marked = marked;\n    exports.options = options;\n    exports.parse = parse;\n    exports.parseInline = parseInline;\n    exports.parser = parser;\n    exports.setOptions = setOptions;\n    exports.use = use;\n    exports.walkTokens = walkTokens;\n\n}));\n//# sourceMappingURL=marked.umd.js.map\n","/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null };\nfunction edit(regex, opt = '') {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(other.caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nexport const other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/\\|table/g, '') // table not in commonmark\n    .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    lheading: lheadingGfm,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n    .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\nconst emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n    .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n    + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    emStrongRDelimAst: emStrongRDelimAstGfm,\n    emStrongLDelim: emStrongLDelimGfm,\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nexport const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nexport const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n","import { other } from './rules.ts';\n/**\n * Helpers\n */\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (other.escapeTest.test(html)) {\n            return html.replace(other.escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (other.escapeTestNoEncode.test(html)) {\n            return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(other.unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(other.percentDecode, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    if (level > 0) {\n        return -2;\n    }\n    return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, findClosingBracket, } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    lexer.state.inLink = true;\n    const token = {\n        type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n        raw,\n        href,\n        title,\n        text,\n        tokens: lexer.inlineTokens(text),\n    };\n    lexer.state.inLink = false;\n    return token;\n}\nfunction indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(rules.other.beginningSpace);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (this.rules.other.endingHash.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (this.rules.other.blockquoteStart.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                    .replace(this.rules.other.blockquoteSetextReplace2, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = this.rules.other.listItemRegex(bull);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                    const hrRegex = this.rules.other.hrRegex(indent);\n                    const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                    const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                    const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (this.rules.other.doubleBlankLine.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = this.rules.other.listIsTask.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            const lastItem = list.items.at(-1);\n            if (lastItem) {\n                lastItem.raw = lastItem.raw.trimEnd();\n                lastItem.text = lastItem.text.trimEnd();\n            }\n            else {\n                // not a list since there were no items\n                return;\n            }\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!this.rules.other.tableDelimiter.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n        const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (this.rules.other.tableAlignRight.test(align)) {\n                item.align.push('right');\n            }\n            else if (this.rules.other.tableAlignCenter.test(align)) {\n                item.align.push('center');\n            }\n            else if (this.rules.other.tableAlignLeft.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1],\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex === -2) {\n                    // more open parens than closed\n                    return;\n                }\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = this.rules.other.pedanticHrefTitle.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (this.rules.other.startAngleBracket.test(href)) {\n                if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer, this.rules);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer, this.rules);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n            const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n            const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[1];\n                href = 'mailto:' + text;\n            }\n            else {\n                text = cap[1];\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[0];\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = cap[0];\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            const escaped = this.lexer.state.inRawBlock;\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                escaped,\n            };\n        }\n    }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            other,\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src.replace(other.carriageReturn, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n        }\n        while (src) {\n            let token;\n            if (this.options.extensions?.block?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.raw.length === 1 && lastToken !== undefined) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                const lastToken = tokens.at(-1);\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = cutSrc.length !== src.length;\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match = null;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index)\n                            + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                            + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        let keepPrevChar = false;\n        let prevChar = '';\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            let token;\n            // extensions\n            if (this.options.extensions?.inline?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.type === 'text' && lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape, } from './helpers.ts';\nimport { other } from './rules.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(other.notSpaceStart)?.[0];\n        const code = text.replace(other.endingNewline, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens[0]?.type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                        item.tokens[0].tokens[0].escaped = true;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true,\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + (escape(title)) + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text, tokens }) {\n        if (tokens) {\n            text = this.parser.parseInline(tokens, this.parser.textRenderer);\n        }\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return escape(text);\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${escape(title)}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens\n            ? this.parser.parseInline(token.tokens)\n            : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n    }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer = this.renderer) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nexport class _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults, } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n","function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function t(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if(\"string\"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var o=0,n=new Array(t);o<t;o++)n[o]=e[o];return n}var n,i,a,r,s,l=(n=[\"a[href]\",\"area[href]\",'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])',\"select:not([disabled]):not([aria-hidden])\",\"textarea:not([disabled]):not([aria-hidden])\",\"button:not([disabled]):not([aria-hidden])\",\"iframe\",\"object\",\"embed\",\"[contenteditable]\",'[tabindex]:not([tabindex^=\"-\"])'],i=function(){function o(e){var n=e.targetModal,i=e.triggers,a=void 0===i?[]:i,r=e.onShow,s=void 0===r?function(){}:r,l=e.onClose,c=void 0===l?function(){}:l,d=e.openTrigger,u=void 0===d?\"data-micromodal-trigger\":d,f=e.closeTrigger,h=void 0===f?\"data-micromodal-close\":f,v=e.openClass,g=void 0===v?\"is-open\":v,m=e.disableScroll,b=void 0!==m&&m,y=e.disableFocus,p=void 0!==y&&y,w=e.awaitCloseAnimation,E=void 0!==w&&w,k=e.awaitOpenAnimation,M=void 0!==k&&k,A=e.debugMode,C=void 0!==A&&A;!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,o),this.modal=\"string\"==typeof n?document.getElementById(n):n,this.config={debugMode:C,disableScroll:b,openTrigger:u,closeTrigger:h,openClass:g,onShow:s,onClose:c,awaitCloseAnimation:E,awaitOpenAnimation:M,disableFocus:p},a.length>0&&this.registerTriggers.apply(this,t(a)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}var i,a,r;return i=o,(a=[{key:\"registerTriggers\",value:function(){for(var e=this,t=arguments.length,o=new Array(t),n=0;n<t;n++)o[n]=arguments[n];o.filter(Boolean).forEach((function(t){t.addEventListener(\"click\",(function(t){return e.showModal(t)}))}))}},{key:\"showModal\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(this.activeElement=document.activeElement,this.modal.setAttribute(\"aria-hidden\",\"false\"),this.modal.classList.add(this.config.openClass),this.scrollBehaviour(\"disable\"),this.addEventListeners(),this.config.awaitOpenAnimation){var o=function t(){e.modal.removeEventListener(\"animationend\",t,!1),e.setFocusToFirstNode()};this.modal.addEventListener(\"animationend\",o,!1)}else this.setFocusToFirstNode();this.config.onShow(this.modal,this.activeElement,t)}},{key:\"closeModal\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.modal;if(this.modal.setAttribute(\"aria-hidden\",\"true\"),this.removeEventListeners(),this.scrollBehaviour(\"enable\"),this.activeElement&&this.activeElement.focus&&this.activeElement.focus(),this.config.onClose(this.modal,this.activeElement,e),this.config.awaitCloseAnimation){var o=this.config.openClass;this.modal.addEventListener(\"animationend\",(function e(){t.classList.remove(o),t.removeEventListener(\"animationend\",e,!1)}),!1)}else t.classList.remove(this.config.openClass)}},{key:\"closeModalByIdOrElement\",value:function(e){this.modal=\"string\"==typeof e?document.getElementById(e):e,this.modal&&this.closeModal()}},{key:\"scrollBehaviour\",value:function(e){if(this.config.disableScroll){var t=document.querySelector(\"body\");switch(e){case\"enable\":Object.assign(t.style,{overflow:\"\"});break;case\"disable\":Object.assign(t.style,{overflow:\"hidden\"})}}}},{key:\"addEventListeners\",value:function(){this.modal.addEventListener(\"touchstart\",this.onClick),this.modal.addEventListener(\"click\",this.onClick),document.addEventListener(\"keydown\",this.onKeydown)}},{key:\"removeEventListeners\",value:function(){this.modal.removeEventListener(\"touchstart\",this.onClick),this.modal.removeEventListener(\"click\",this.onClick),document.removeEventListener(\"keydown\",this.onKeydown)}},{key:\"onClick\",value:function(e){(e.target.hasAttribute(this.config.closeTrigger)||e.target.parentNode.hasAttribute(this.config.closeTrigger))&&(e.preventDefault(),e.stopPropagation(),this.closeModal(e))}},{key:\"onKeydown\",value:function(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.retainFocus(e)}},{key:\"getFocusableNodes\",value:function(){var e=this.modal.querySelectorAll(n);return Array.apply(void 0,t(e))}},{key:\"setFocusToFirstNode\",value:function(){var e=this;if(!this.config.disableFocus){var t=this.getFocusableNodes();if(0!==t.length){var o=t.filter((function(t){return!t.hasAttribute(e.config.closeTrigger)}));o.length>0&&o[0].focus(),0===o.length&&t[0].focus()}}}},{key:\"retainFocus\",value:function(e){var t=this.getFocusableNodes();if(0!==t.length)if(t=t.filter((function(e){return null!==e.offsetParent})),this.modal.contains(document.activeElement)){var o=t.indexOf(document.activeElement);e.shiftKey&&0===o&&(t[t.length-1].focus(),e.preventDefault()),!e.shiftKey&&t.length>0&&o===t.length-1&&(t[0].focus(),e.preventDefault())}else t[0].focus()}}])&&e(i.prototype,a),r&&e(i,r),o}(),a=null,r=function(e){if(\"string\"==typeof id?!document.getElementById(e):!e)return console.warn(\"MicroModal: ❗Seems like you have missed %c'\".concat(e,\"'\"),\"background-color: #f8f9fa;color: #50596c;font-weight: bold;\",\"ID somewhere in your code. Refer example below to resolve it.\"),console.warn(\"%cExample:\",\"background-color: #f8f9fa;color: #50596c;font-weight: bold;\",'<div class=\"modal\" id=\"'.concat(e,'\"></div>')),!1},s=function(e,t){if(function(e){e.length<=0&&(console.warn(\"MicroModal: ❗Please specify at least one %c'micromodal-trigger'\",\"background-color: #f8f9fa;color: #50596c;font-weight: bold;\",\"data attribute.\"),console.warn(\"%cExample:\",\"background-color: #f8f9fa;color: #50596c;font-weight: bold;\",'<a href=\"#\" data-micromodal-trigger=\"my-modal\"></a>'))}(e),!t)return!0;for(var o in t)r(o);return!0},{init:function(e){var o=Object.assign({},{openTrigger:\"data-micromodal-trigger\"},e),n=t(document.querySelectorAll(\"[\".concat(o.openTrigger,\"]\"))),r=function(e,t){var o=[];return e.forEach((function(e){var n=e.attributes[t].value;void 0===o[n]&&(o[n]=[]),o[n].push(e)})),o}(n,o.openTrigger);if(!0!==o.debugMode||!1!==s(n,r))for(var l in r){var c=r[l];o.targetModal=l,o.triggers=t(c),a=new i(o)}},show:function(e,t){var o=t||{};o.targetModal=e,!0===o.debugMode&&!1===r(e)||(a&&a.removeEventListeners(),(a=new i(o)).showModal())},close:function(e){e?a.closeModalByIdOrElement(e):a.closeModal()}});\"undefined\"!=typeof window&&(window.MicroModal=l);export default l;\n"],"names":["$d349326c2b62c55f$exports","factory","entries","setPrototypeOf","isFrozen","getPrototypeOf","getOwnPropertyDescriptor","Object","freeze","seal","create","apply","construct","Reflect","x","fun","thisValue","args","Func","arrayForEach","unapply","Array","prototype","forEach","arrayLastIndexOf","lastIndexOf","arrayPop","pop","arrayPush","push","arraySplice","splice","stringToLowerCase","String","toLowerCase","stringToString","toString","stringMatch","match","stringReplace","replace","stringIndexOf","indexOf","stringTrim","trim","objectHasOwnProperty","hasOwnProperty","regExpTest","RegExp","test","typeErrorCreate","func","TypeError","_len2","arguments","length","_key2","thisArg","lastIndex","_len","_key","addToSet","set","array","transformCaseFunc","undefined","l","element","lcElement","clone","object","newObject","property","value","isArray","cleanArray","index","constructor","lookupGetter","prop","desc","get","html$1","svg$1","svgFilters","svgDisallowed","mathMl$1","mathMlDisallowed","text","html","svg","mathMl","xml","MUSTACHE_EXPR","ERB_EXPR","TMPLIT_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","DOCTYPE_NAME","EXPRESSIONS","__proto__","CUSTOM_ELEMENT","NODE_TYPE","progressingInstruction","comment","document","_createTrustedTypesPolicy","trustedTypes","purifyHostElement","createPolicy","suffix","ATTR_NAME","hasAttribute","getAttribute","policyName","createHTML","createScriptURL","scriptUrl","_","console","warn","_createHooksMap","afterSanitizeAttributes","afterSanitizeElements","afterSanitizeShadowDOM","beforeSanitizeAttributes","beforeSanitizeElements","beforeSanitizeShadowDOM","uponSanitizeAttribute","uponSanitizeElement","uponSanitizeShadowNode","createDOMPurify","trustedTypesPolicy","window1","window","DOMPurify","root","version","removed","nodeType","Element","isSupported","originalDocument","currentScript","DocumentFragment","HTMLTemplateElement","Node","NodeFilter","NamedNodeMap","MozNamedAttrMap","HTMLFormElement","DOMParser","ElementPrototype","cloneNode","remove","getNextSibling","getChildNodes","getParentNode","template","createElement","content","ownerDocument","emptyHTML","implementation","createNodeIterator","createDocumentFragment","getElementsByTagName","importNode","hooks","createHTMLDocument","IS_ALLOWED_URI$1","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","CUSTOM_ELEMENT_HANDLING","tagNameCheck","writable","configurable","enumerable","attributeNameCheck","allowCustomizedBuiltInElements","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","ALLOW_SELF_CLOSE_IN_ATTR","SAFE_FOR_TEMPLATES","SAFE_FOR_XML","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_TRUSTED_TYPE","SANITIZE_DOM","SANITIZE_NAMED_PROPS","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DEFAULT_FORBID_CONTENTS","DATA_URI_TAGS","DEFAULT_DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","MATHML_NAMESPACE","SVG_NAMESPACE","HTML_NAMESPACE","NAMESPACE","IS_EMPTY_INPUT","ALLOWED_NAMESPACES","DEFAULT_ALLOWED_NAMESPACES","MATHML_TEXT_INTEGRATION_POINTS","HTML_INTEGRATION_POINTS","COMMON_SVG_AND_HTML_ELEMENTS","PARSER_MEDIA_TYPE","SUPPORTED_PARSER_MEDIA_TYPES","CONFIG","formElement","isRegexOrFunction","testValue","Function","_parseConfig","cfg","ADD_URI_SAFE_ATTR","ADD_DATA_URI_TAGS","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","table","tbody","TRUSTED_TYPES_POLICY","ALL_SVG_TAGS","ALL_MATHML_TAGS","_checkValidNamespace","parent","tagName","namespaceURI","parentTagName","Boolean","_forceRemove","node","removeChild","_removeAttribute","name","attribute","getAttributeNode","from","removeAttribute","setAttribute","_initDocument","dirty","doc","leadingWhitespace","matches","dirtyPayload","parseFromString","documentElement","createDocument","innerHTML","body","insertBefore","createTextNode","childNodes","call","_createNodeIterator","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","SHOW_PROCESSING_INSTRUCTION","SHOW_CDATA_SECTION","_isClobbered","nodeName","textContent","attributes","hasChildNodes","_isNode","_executeHooks","currentNode","data","hook","_sanitizeElements","allowedTags","firstElementChild","_isBasicCustomElement","parentNode","childCount","i","childClone","__removalCount","expr","_isValidAttribute","lcTag","lcName","_sanitizeAttributes","hookEvent","attrName","attrValue","keepAttr","allowedAttributes","forceKeepAttr","SANITIZE_NAMED_PROPS_PREFIX","getAttributeType","setAttributeNS","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","nextNode","sanitize","importedNode","returnNode","appendChild","firstChild","nodeIterator","shadowroot","shadowrootmode","serializedHTML","outerHTML","doctype","setConfig","clearConfig","isValidAttribute","tag","attr","addHook","entryPoint","hookFunction","removeHook","removeHooks","removeAllHooks","$d55025bea272cdc1$exports","$adcf363a09f534a1$var$e","e","t","o","n","defineProperty","key","$adcf363a09f534a1$var$t","$adcf363a09f534a1$var$o","Symbol","iterator","slice","exports1","_getDefaults","async","breaks","extensions","gfm","pedantic","renderer","silent","tokenizer","walkTokens","changeDefaults","newDefaults","defaults","noopTest","exec","edit","regex","opt","source","obj","val","valSource","other","caret","getRegex","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","hr","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","_blockLabel","def","list","_tag","_comment","paragraph","blockNormal","blockquote","code","fences","heading","newline","gfmTable","blockGfm","blockPedantic","br","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","_inlineLabel","link","reflink","nolink","reflinkSearch","inlineNormal","_backpedal","blockSkip","del","escape","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","encode","cleanUrl","href","encodeURI","splitCells","tableRow","count","cells","row","offset","str","escaped","curr","split","shift","at","rtrim","c","invert","suffLen","currChar","charAt","outputLink","cap","raw","lexer","rules","title","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","options","space","src","codeBlockStyle","matchIndentToCode","indentToCode","map","matchIndentInNode","indentInNode","join","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","newText","oldToken","newToken","substring","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","ischecked","endEarly","itemContents","line","repeat","nextLine","trimStart","search","nextLineWithoutTabs","rawLine","istask","task","checked","lastItem","trimEnd","spacers","filter","some","pre","headers","aligns","rows","item","header","align","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","findClosingBracket","b","level","linkLen","links","linkString","emStrong","maskedSrc","prevChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastCharLength","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","inlineText","_Lexer","inlineQueue","lex","lexInline","next","lastParagraphClipped","extTokenizer","cutSrc","startBlock","tempStart","startIndex","Infinity","tempSrc","getStartIndex","errMsg","charCodeAt","error","Error","keys","includes","keepPrevChar","startInline","_Renderer","parser","langString","parse","parseInline","j","listitem","itemBody","checkbox","unshift","tablecell","tablerow","k","strong","em","cleanHref","out","image","textRenderer","_TextRenderer","_Parser","anyToken","renderers","ret","genericToken","textToken","_Hooks","passThroughHooks","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","Marked","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","use","callback","values","concat","tableToken","listToken","childTokens","flat","pack","opts","ext","prevRenderer","extLevel","rendererFunc","tokenizerFunc","prevTokenizer","hooksFunc","prevHook","has","arg","Promise","resolve","then","packWalktokens","blockType","origOpt","throwError","onError","all","catch","message","msg","reject","markedInstance","marked","getDefaults","$adcf363a09f534a1$var$n","$adcf363a09f534a1$var$i","$adcf363a09f534a1$var$a","$adcf363a09f534a1$var$r","$adcf363a09f534a1$var$s","$adcf363a09f534a1$var$l","a","r","targetModal","triggers","onShow","onClose","d","openTrigger","f","closeTrigger","v","openClass","m","disableScroll","y","disableFocus","w","awaitCloseAnimation","awaitOpenAnimation","A","debugMode","modal","getElementById","config","registerTriggers","onClick","bind","onKeydown","addEventListener","showModal","activeElement","classList","add","scrollBehaviour","addEventListeners","removeEventListener","setFocusToFirstNode","removeEventListeners","focus","closeModal","querySelector","assign","style","overflow","target","preventDefault","stopPropagation","keyCode","retainFocus","querySelectorAll","getFocusableNodes","offsetParent","contains","shiftKey","id","init","show","close","closeModalByIdOrElement","MicroModal","$b63be9b0371e788c$var$JINA_API_KEY","$b63be9b0371e788c$var$GEMINI_API_KEY","$b63be9b0371e788c$var$SETTINGS_STORAGE_KEY","$b63be9b0371e788c$var$urlInputSection","$b63be9b0371e788c$var$responseSection","$b63be9b0371e788c$var$urlTextarea","$b63be9b0371e788c$var$submitButton","$b63be9b0371e788c$var$responseOutput","$b63be9b0371e788c$var$additionalQuestionTextarea","$b63be9b0371e788c$var$submitAdditionalQuestionButton","$b63be9b0371e788c$var$logoLink","$b63be9b0371e788c$var$settingButton","$b63be9b0371e788c$var$modalGeminiApiKeyInput","$b63be9b0371e788c$var$modalJinaApiKeyInput","$b63be9b0371e788c$var$saveModalSettingsButton","$b63be9b0371e788c$var$userLevelRadios","$b63be9b0371e788c$var$userLevelText","$b63be9b0371e788c$var$modalAdditionalPromptInput","$b63be9b0371e788c$var$modalTabs","$b63be9b0371e788c$var$tabContents","$b63be9b0371e788c$var$initializeTextareaAutoHeight","textareaElement","initialRows","initialHeight","lineHeight","parseFloat","getComputedStyle","height","newHeight","scrollHeight","$b63be9b0371e788c$var$showPage","pageToShow","$b63be9b0371e788c$var$handleSubmit","urlToProcess","alert","articleData","$b63be9b0371e788c$var$fetchArticleContent","articleContent","articleTitle","markdownSummary","$b63be9b0371e788c$var$summarizeTextWithGemini","dirtyHtml","__esModule","default","readerApiUrl","log","response","fetch","method","Authorization","Accept","ok","errorData","json","statusText","status","textToSummarize","savedSettings","JSON","localStorage","getItem","finalPrompt","userLevel","levelDescription","userLevelText","additionalPrompt","geminiApiUrl","requestBody","contents","parts","stringify","candidates","$b63be9b0371e788c$var$loadSettings","settings","jinaApiKey","geminiApiKey","info","$b63be9b0371e788c$var$loadSettingsToModal","savedLevelRadio","find","radio","selectedLevel","parseInt","setItem","event","ctrlKey","metaKey","click","tab","targetContentId","dataset","tabTarget","unconstruct","isPropertyExist","fallbackValue","cdataSection","entityReference","entityNode","documentType","documentFragment","notation","getGlobal","VERSION","TAGS","ATTRS","DEFAULT_PARSER_MEDIA_TYPE","_defaults"],"version":3,"file":"explainfy-project.32ac7697.js.map"}